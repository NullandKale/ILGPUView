Sample: WarpShuffle 				status: runs
Sample: SpecializedKernel 			status: missing type
Sample: SimpleViews 				status: runs
Sample: SimpleStructures			status: missing type
Sample: SimpleMath 					status: runs
Sample: SimpleKernel 				status: runs
Sample: SimpleConstants				status: runs
Sample: SimpleAtomics				status: runs
Sample: SimpleAlloc					status: runs
Sample: SharedMemory				status: runs
Sample: PinnedMemoryCopy			status: runs
Sample: MatrixMultiply				status: fails to compile
Sample: Mandelbrot					status: forms, could convert to bitmap type sample
Sample: LowLevelKernelCompilation	status: runs
Sample: IndexImplementation			status: missing type
Sample: ImplicitlyGroupedKernels	status: runs
Sample: GroupGridIndices			status: runs
Sample: GenericKernel				status: missing type
Sample: ExplicitlyGroupedKernels	status: runs
Sample: Empty						status: runs
Sample: DynamicSharedMemory			status: fails to compile
Sample: DeviceInfo					status: runs
Sample: CustomIntrinsics			status: runs
Sample: AlgorithmsWarps				status: runs
Sample: AlgorithmsTransform			status: kernel compile fails
Sample: AlgorithmsSequence			status: kernel compile fails
Sample: AlgorithmsScan				status: kernel compile fails
Sample: AlgorithmsReduce			status: runs
Sample: AlgorithmsRadixSort			status: kernel compile fails
Sample: AlgorithmsMath				status: runs
Sample: AlgorithmsInitialize		status: runs
Sample: AlgorithmsGroups			status: runs
Sample: AlgorithmsReduce			status: kernel compile fails
Sample: AdvancedViews				status: kernel compile fails
Sample: AdvancedAtomics				status: runs
Sample: SharedMemory				status: runs

sample logs:
START SAMPLEWarpShuffle
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Shuffle-down kernel
Data[0] = 0
END SAMPLE: WarpShuffle
START SAMPLESpecializedKernel
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'ILGPU.ArrayView`1[WarpShuffle.Program+ComplexStruct]'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'ILGPU.ArrayView`1[WarpShuffle.Program+ComplexStruct]'.
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadKernel[TDelegate](MethodInfo method, KernelSpecialization specialization, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadKernel[T1,T2](Accelerator accelerator, Action`2 action, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadStreamKernel[T1,T2](Accelerator accelerator, Action`2 action, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadStreamKernel[T1,T2](Accelerator accelerator, Action`2 action)
   at WarpShuffle.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
END SAMPLE: SpecializedKernel
Render Thread Failed
System.TypeLoadException: Access is denied: 'SpecializedKernel.Program+CustomStruct'.
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Runtime.Kernel.CreateSpecializedLauncherStruct(RuntimeSystem runtimeSystem, EntryPointDescription& entry)
   at ILGPU.Runtime.Kernel.CreateSpecializedLauncher[TDelegate,TLoader](Accelerator accelerator, EntryPointDescription& entry, KernelSpecialization& specialization, Method kernelMethod, TLoader& loader)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass175_0`2.<LoadSpecializationKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadKernel[TDelegate](MethodInfo method, KernelSpecialization specialization, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadKernel[T1,T2](Accelerator accelerator, Action`2 action, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadStreamKernel[T1,T2](Accelerator accelerator, Action`2 action, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadStreamKernel[T1,T2](Accelerator accelerator, Action`2 action)
   at SpecializedKernel.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
START SAMPLESimpleViews
DoubleAsByte[0] = 0
DoubleAsByte[1] = 0
DoubleAsByte[2] = 0
DoubleAsByte[3] = 0
DoubleAsByte[4] = 0
DoubleAsByte[5] = 0
DoubleAsByte[6] = 248
DoubleAsByte[7] = 255
Value of sub view at index 0: 42 = value of view at index 10: 42
Value of sub view 2 at index 0: 42 = value of view at index 10: 42
Value of sub view 3 at index 1: 23 = value of view at index 21: 23
END SAMPLE: SimpleViews
START SAMPLESimpleStructures
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'ILGPU.ArrayView`1[SimpleStructures.Program+CustomDataType]'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'ILGPU.ArrayView`1[SimpleStructures.Program+CustomDataType]'.
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1](Accelerator accelerator, Action`2 action)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel[TIndex,T1](Accelerator accelerator, Action`2 action)
   at SimpleStructures.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: SimpleStructures
START SAMPLESimpleMath
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Math results: 0 (float) 0 (double [GPUMath]) 0 (double [.Net Math])
Math results: 1 (float) 1 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 2 (float) 2 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 3 (float) 3 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 4 (float) 4 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 5 (float) 5 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 6 (float) 6 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 7 (float) 7 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 8 (float) 8 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 9 (float) 9 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 10 (float) 10 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 11 (float) 11 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 12 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 13 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 14 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 15 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 16 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 17 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 18 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 19 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 20 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 21 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 22 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 23 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 24 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 25 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 26 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 27 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 28 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 29 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 30 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 31 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 32 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 33 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 34 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 35 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 36 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 37 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 38 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 39 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 40 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 41 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 42 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 43 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 44 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 45 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 46 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 47 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 48 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 49 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 50 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 51 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 52 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 53 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 54 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 55 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 56 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 57 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 58 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 59 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 60 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 61 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 62 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 63 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 64 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 65 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 66 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 67 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 68 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 69 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 70 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 71 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 72 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 73 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 74 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 75 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 76 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 77 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 78 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 79 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 80 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 81 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 82 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 83 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 84 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 85 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 86 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 87 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 88 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 89 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 90 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 91 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 92 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 93 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 94 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 95 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 96 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 97 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 98 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 99 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 100 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 101 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 102 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 103 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 104 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 105 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 106 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 107 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 108 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 109 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 110 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 111 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 112 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 113 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 114 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 115 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 116 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 117 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 118 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 119 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 120 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 121 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 122 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 123 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 124 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 125 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 126 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 127 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Math results: 0 (float) 0 (double [GPUMath]) 0 (double [.Net Math])
Math results: 1 (float) 1 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 2 (float) 2 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 3 (float) 3 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 4 (float) 4 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 5 (float) 5 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 6 (float) 6 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 7 (float) 7 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 8 (float) 8 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 9 (float) 9 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 10 (float) 10 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 11 (float) 11 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 12 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 13 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 14 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 15 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 16 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 17 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 18 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 19 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 20 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 21 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 22 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 23 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 24 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 25 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 26 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 27 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 28 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 29 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 30 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 31 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 32 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 33 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 34 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 35 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 36 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 37 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 38 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 39 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 40 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 41 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 42 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 43 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 44 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 45 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 46 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 47 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 48 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 49 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 50 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 51 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 52 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 53 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 54 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 55 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 56 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 57 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 58 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 59 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 60 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 61 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 62 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 63 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 64 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 65 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 66 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 67 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 68 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 69 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 70 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 71 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 72 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 73 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 74 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 75 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 76 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 77 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 78 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 79 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 80 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 81 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 82 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 83 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 84 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 85 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 86 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 87 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 88 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 89 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 90 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 91 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 92 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 93 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 94 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 95 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 96 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 97 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 98 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 99 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 100 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 101 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 102 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 103 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 104 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 105 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 106 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 107 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 108 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 109 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 110 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 111 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 112 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 113 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 114 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 115 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 116 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 117 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 118 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 119 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 120 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 121 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 122 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 123 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 124 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 125 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 126 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
Math results: 127 (float) 12 (double [GPUMath]) 0.2 (double [.Net Math])
END SAMPLE: SimpleMath
START SAMPLESimpleKernel
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
END SAMPLE: SimpleKernel
START SAMPLESimpleConstants
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
END SAMPLE: SimpleConstants
START SAMPLE SimpleAtomics
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data[0] = 4096
Data[1] = 4
Data[2] = 0
Data[3] = 0
Data[4] = 4
Data[5] = 0
Data[6] = 0
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Data[0] = 4096
Data[1] = 4
Data[2] = 0
Data[3] = 0
Data[4] = 4
Data[5] = 0
Data[6] = 0
END SAMPLE: SimpleAtomics
START SAMPLE SimpleAlloc
Performing 1D allocation on CPUAccelerator
Performing 2D allocation on CPUAccelerator
Performing 3D allocation on CPUAccelerator
Performing 1D allocation on GeForce RTX 2060
Performing 2D allocation on GeForce RTX 2060
Performing 3D allocation on GeForce RTX 2060
END SAMPLE: SimpleAlloc
START SAMPLE SharedMemory
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Shared-memory kernel
Data[0] = 12
Data[1] = 12
Data[2] = 12
Data[3] = 12
Data[4] = 12
Data[5] = 12
Data[6] = 12
Data[7] = 12
Data[8] = 12
Data[9] = 12
Data[10] = 12
Data[11] = 12
Data[12] = 24
Data[13] = 24
Data[14] = 24
Data[15] = 24
Data[16] = 24
Data[17] = 24
Data[18] = 24
Data[19] = 24
Data[20] = 24
Data[21] = 24
Data[22] = 24
Data[23] = 24
Data[24] = 36
Data[25] = 36
Data[26] = 36
Data[27] = 36
Data[28] = 36
Data[29] = 36
Data[30] = 36
Data[31] = 36
Data[32] = 36
Data[33] = 36
Data[34] = 36
Data[35] = 36
Data[36] = 48
Data[37] = 48
Data[38] = 48
Data[39] = 48
Data[40] = 48
Data[41] = 48
Data[42] = 48
Data[43] = 48
Data[44] = 48
Data[45] = 48
Data[46] = 48
Data[47] = 48
Data[48] = 60
Data[49] = 60
Data[50] = 60
Data[51] = 60
Data[52] = 60
Data[53] = 60
Data[54] = 60
Data[55] = 60
Data[56] = 60
Data[57] = 60
Data[58] = 60
Data[59] = 60
Data[60] = 72
Data[61] = 72
Data[62] = 72
Data[63] = 72
Data[64] = 72
Data[65] = 72
Data[66] = 72
Data[67] = 72
Data[68] = 72
Data[69] = 72
Data[70] = 72
Data[71] = 72
Data[72] = 84
Data[73] = 84
Data[74] = 84
Data[75] = 84
Data[76] = 84
Data[77] = 84
Data[78] = 84
Data[79] = 84
Data[80] = 84
Data[81] = 84
Data[82] = 84
Data[83] = 84
Data[84] = 96
Data[85] = 96
Data[86] = 96
Data[87] = 96
Data[88] = 96
Data[89] = 96
Data[90] = 96
Data[91] = 96
Data[92] = 96
Data[93] = 96
Data[94] = 96
Data[95] = 96
Data[96] = 108
Data[97] = 108
Data[98] = 108
Data[99] = 108
Data[100] = 108
Data[101] = 108
Data[102] = 108
Data[103] = 108
Data[104] = 108
Data[105] = 108
Data[106] = 108
Data[107] = 108
Data[108] = 120
Data[109] = 120
Data[110] = 120
Data[111] = 120
Data[112] = 120
Data[113] = 120
Data[114] = 120
Data[115] = 120
Data[116] = 120
Data[117] = 120
Data[118] = 120
Data[119] = 120
Data[120] = 128
Data[121] = 128
Data[122] = 128
Data[123] = 128
Data[124] = 128
Data[125] = 128
Data[126] = 128
Data[127] = 128
Shared-memory-array kernel
Data[0] = 78
Data[1] = 78
Data[2] = 78
Data[3] = 78
Data[4] = 78
Data[5] = 78
Data[6] = 78
Data[7] = 78
Data[8] = 78
Data[9] = 78
Data[10] = 78
Data[11] = 78
Data[12] = 222
Data[13] = 222
Data[14] = 222
Data[15] = 222
Data[16] = 222
Data[17] = 222
Data[18] = 222
Data[19] = 222
Data[20] = 222
Data[21] = 222
Data[22] = 222
Data[23] = 222
Data[24] = 366
Data[25] = 366
Data[26] = 366
Data[27] = 366
Data[28] = 366
Data[29] = 366
Data[30] = 366
Data[31] = 366
Data[32] = 366
Data[33] = 366
Data[34] = 366
Data[35] = 366
Data[36] = 510
Data[37] = 510
Data[38] = 510
Data[39] = 510
Data[40] = 510
Data[41] = 510
Data[42] = 510
Data[43] = 510
Data[44] = 510
Data[45] = 510
Data[46] = 510
Data[47] = 510
Data[48] = 654
Data[49] = 654
Data[50] = 654
Data[51] = 654
Data[52] = 654
Data[53] = 654
Data[54] = 654
Data[55] = 654
Data[56] = 654
Data[57] = 654
Data[58] = 654
Data[59] = 654
Data[60] = 798
Data[61] = 798
Data[62] = 798
Data[63] = 798
Data[64] = 798
Data[65] = 798
Data[66] = 798
Data[67] = 798
Data[68] = 798
Data[69] = 798
Data[70] = 798
Data[71] = 798
Data[72] = 942
Data[73] = 942
Data[74] = 942
Data[75] = 942
Data[76] = 942
Data[77] = 942
Data[78] = 942
Data[79] = 942
Data[80] = 942
Data[81] = 942
Data[82] = 942
Data[83] = 942
Data[84] = 1086
Data[85] = 1086
Data[86] = 1086
Data[87] = 1086
Data[88] = 1086
Data[89] = 1086
Data[90] = 1086
Data[91] = 1086
Data[92] = 1086
Data[93] = 1086
Data[94] = 1086
Data[95] = 1086
Data[96] = 1230
Data[97] = 1230
Data[98] = 1230
Data[99] = 1230
Data[100] = 1230
Data[101] = 1230
Data[102] = 1230
Data[103] = 1230
Data[104] = 1230
Data[105] = 1230
Data[106] = 1230
Data[107] = 1230
Data[108] = 1374
Data[109] = 1374
Data[110] = 1374
Data[111] = 1374
Data[112] = 1374
Data[113] = 1374
Data[114] = 1374
Data[115] = 1374
Data[116] = 1374
Data[117] = 1374
Data[118] = 1374
Data[119] = 1374
Data[120] = 996
Data[121] = 996
Data[122] = 996
Data[123] = 996
Data[124] = 996
Data[125] = 996
Data[126] = 996
Data[127] = 996
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Shared-memory kernel
Data[0] = 128
Data[1] = 128
Data[2] = 128
Data[3] = 128
Data[4] = 128
Data[5] = 128
Data[6] = 128
Data[7] = 128
Data[8] = 128
Data[9] = 128
Data[10] = 128
Data[11] = 128
Data[12] = 128
Data[13] = 128
Data[14] = 128
Data[15] = 128
Data[16] = 128
Data[17] = 128
Data[18] = 128
Data[19] = 128
Data[20] = 128
Data[21] = 128
Data[22] = 128
Data[23] = 128
Data[24] = 128
Data[25] = 128
Data[26] = 128
Data[27] = 128
Data[28] = 128
Data[29] = 128
Data[30] = 128
Data[31] = 128
Data[32] = 128
Data[33] = 128
Data[34] = 128
Data[35] = 128
Data[36] = 128
Data[37] = 128
Data[38] = 128
Data[39] = 128
Data[40] = 128
Data[41] = 128
Data[42] = 128
Data[43] = 128
Data[44] = 128
Data[45] = 128
Data[46] = 128
Data[47] = 128
Data[48] = 128
Data[49] = 128
Data[50] = 128
Data[51] = 128
Data[52] = 128
Data[53] = 128
Data[54] = 128
Data[55] = 128
Data[56] = 128
Data[57] = 128
Data[58] = 128
Data[59] = 128
Data[60] = 128
Data[61] = 128
Data[62] = 128
Data[63] = 128
Data[64] = 128
Data[65] = 128
Data[66] = 128
Data[67] = 128
Data[68] = 128
Data[69] = 128
Data[70] = 128
Data[71] = 128
Data[72] = 128
Data[73] = 128
Data[74] = 128
Data[75] = 128
Data[76] = 128
Data[77] = 128
Data[78] = 128
Data[79] = 128
Data[80] = 128
Data[81] = 128
Data[82] = 128
Data[83] = 128
Data[84] = 128
Data[85] = 128
Data[86] = 128
Data[87] = 128
Data[88] = 128
Data[89] = 128
Data[90] = 128
Data[91] = 128
Data[92] = 128
Data[93] = 128
Data[94] = 128
Data[95] = 128
Data[96] = 128
Data[97] = 128
Data[98] = 128
Data[99] = 128
Data[100] = 128
Data[101] = 128
Data[102] = 128
Data[103] = 128
Data[104] = 128
Data[105] = 128
Data[106] = 128
Data[107] = 128
Data[108] = 128
Data[109] = 128
Data[110] = 128
Data[111] = 128
Data[112] = 128
Data[113] = 128
Data[114] = 128
Data[115] = 128
Data[116] = 128
Data[117] = 128
Data[118] = 128
Data[119] = 128
Data[120] = 128
Data[121] = 128
Data[122] = 128
Data[123] = 128
Data[124] = 128
Data[125] = 128
Data[126] = 128
Data[127] = 128
Shared-memory-array kernel
Data[0] = 8256
Data[1] = 8256
Data[2] = 8256
Data[3] = 8256
Data[4] = 8256
Data[5] = 8256
Data[6] = 8256
Data[7] = 8256
Data[8] = 8256
Data[9] = 8256
Data[10] = 8256
Data[11] = 8256
Data[12] = 8256
Data[13] = 8256
Data[14] = 8256
Data[15] = 8256
Data[16] = 8256
Data[17] = 8256
Data[18] = 8256
Data[19] = 8256
Data[20] = 8256
Data[21] = 8256
Data[22] = 8256
Data[23] = 8256
Data[24] = 8256
Data[25] = 8256
Data[26] = 8256
Data[27] = 8256
Data[28] = 8256
Data[29] = 8256
Data[30] = 8256
Data[31] = 8256
Data[32] = 8256
Data[33] = 8256
Data[34] = 8256
Data[35] = 8256
Data[36] = 8256
Data[37] = 8256
Data[38] = 8256
Data[39] = 8256
Data[40] = 8256
Data[41] = 8256
Data[42] = 8256
Data[43] = 8256
Data[44] = 8256
Data[45] = 8256
Data[46] = 8256
Data[47] = 8256
Data[48] = 8256
Data[49] = 8256
Data[50] = 8256
Data[51] = 8256
Data[52] = 8256
Data[53] = 8256
Data[54] = 8256
Data[55] = 8256
Data[56] = 8256
Data[57] = 8256
Data[58] = 8256
Data[59] = 8256
Data[60] = 8256
Data[61] = 8256
Data[62] = 8256
Data[63] = 8256
Data[64] = 8256
Data[65] = 8256
Data[66] = 8256
Data[67] = 8256
Data[68] = 8256
Data[69] = 8256
Data[70] = 8256
Data[71] = 8256
Data[72] = 8256
Data[73] = 8256
Data[74] = 8256
Data[75] = 8256
Data[76] = 8256
Data[77] = 8256
Data[78] = 8256
Data[79] = 8256
Data[80] = 8256
Data[81] = 8256
Data[82] = 8256
Data[83] = 8256
Data[84] = 8256
Data[85] = 8256
Data[86] = 8256
Data[87] = 8256
Data[88] = 8256
Data[89] = 8256
Data[90] = 8256
Data[91] = 8256
Data[92] = 8256
Data[93] = 8256
Data[94] = 8256
Data[95] = 8256
Data[96] = 8256
Data[97] = 8256
Data[98] = 8256
Data[99] = 8256
Data[100] = 8256
Data[101] = 8256
Data[102] = 8256
Data[103] = 8256
Data[104] = 8256
Data[105] = 8256
Data[106] = 8256
Data[107] = 8256
Data[108] = 8256
Data[109] = 8256
Data[110] = 8256
Data[111] = 8256
Data[112] = 8256
Data[113] = 8256
Data[114] = 8256
Data[115] = 8256
Data[116] = 8256
Data[117] = 8256
Data[118] = 8256
Data[119] = 8256
Data[120] = 8256
Data[121] = 8256
Data[122] = 8256
Data[123] = 8256
Data[124] = 8256
Data[125] = 8256
Data[126] = 8256
Data[127] = 8256
END SAMPLE: SharedMemory
START SAMPLE PinnedMemoryCopy
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data: 42, 23
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Data: 42, 23
END SAMPLE: PinnedMemoryCopy
START SAMPLE MatrixMultiply
Compilation Failed with error(s):
CS0234: The type or namespace name 'Allocate2D' does not exist in the namespace 'SharedMemory' (are you missing an assembly reference?) @ : (313,24)-(313,54)
CS0234: The type or namespace name 'Allocate2D' does not exist in the namespace 'SharedMemory' (are you missing an assembly reference?) @ : (314,24)-(314,54)
END SAMPLE: MatrixMultiply
START SAMPLE Mandelbrot
Compilation Failed with error(s):
CS0234: The type or namespace name 'Forms' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?) @ : (12,21)-(12,26)
CS0103: The name 'Application' does not exist in the current context @ : (25,12)-(25,23)
CS0103: The name 'HighDpiMode' does not exist in the current context @ : (25,39)-(25,50)
CS0103: The name 'Application' does not exist in the current context @ : (27,12)-(27,23)
CS0103: The name 'Application' does not exist in the current context @ : (28,12)-(28,23)
CS0103: The name 'Application' does not exist in the current context @ : (30,12)-(30,23)
END SAMPLE: Mandelbrot
START SAMPLE LowLevelKernelCompilation
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
END SAMPLE: LowLevelKernelCompilation
START SAMPLE IndexImplementation
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Performing nD allocation on CPUAccelerator
Performing nD allocation on CPUAccelerator
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'ILGPU.ArrayView`2[System.Int32,IndexImplementation.MyIndex4]'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'ILGPU.ArrayView`2[System.Int32,IndexImplementation.MyIndex4]'.
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1](Accelerator accelerator, Action`2 action)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel[TIndex,T1](Accelerator accelerator, Action`2 action)
   at IndexImplementation.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: IndexImplementation
START SAMPLE ImplicitlyGroupedKernels
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
END SAMPLE: ImplicitlyGroupedKernels
START SAMPLE GroupGridIndices
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Default grouped kernel
Data[0] = 64
Data[1] = 64
Data[2] = 64
Data[3] = 64
Data[4] = 64
Data[5] = 64
Data[6] = 64
Data[7] = 64
Data[8] = 64
Data[9] = 64
Data[10] = 64
Data[11] = 64
Data[12] = 64
Data[13] = 64
Data[14] = 64
Data[15] = 64
Data[16] = 64
Data[17] = 64
Data[18] = 64
Data[19] = 64
Data[20] = 64
Data[21] = 64
Data[22] = 64
Data[23] = 64
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Default grouped kernel
Data[0] = 64
Data[1] = 64
Data[2] = 64
Data[3] = 64
Data[4] = 64
Data[5] = 64
Data[6] = 64
Data[7] = 64
Data[8] = 64
Data[9] = 64
Data[10] = 64
Data[11] = 64
Data[12] = 64
Data[13] = 64
Data[14] = 64
Data[15] = 64
Data[16] = 64
Data[17] = 64
Data[18] = 64
Data[19] = 64
Data[20] = 64
Data[21] = 64
Data[22] = 64
Data[23] = 64
Data[24] = 64
Data[25] = 64
Data[26] = 64
Data[27] = 64
Data[28] = 64
Data[29] = 64
Data[30] = 64
Data[31] = 64
Data[32] = 64
Data[33] = 64
Data[34] = 64
Data[35] = 64
Data[36] = 64
Data[37] = 64
Data[38] = 64
Data[39] = 64
Data[40] = 64
Data[41] = 64
Data[42] = 64
Data[43] = 64
Data[44] = 64
Data[45] = 64
Data[46] = 64
Data[47] = 64
Data[48] = 64
Data[49] = 64
Data[50] = 64
Data[51] = 64
Data[52] = 64
Data[53] = 64
Data[54] = 64
Data[55] = 64
Data[56] = 64
Data[57] = 64
Data[58] = 64
Data[59] = 64
Data[60] = 64
Data[61] = 64
Data[62] = 64
Data[63] = 64
Data[64] = 64
Data[65] = 64
Data[66] = 64
Data[67] = 64
Data[68] = 64
Data[69] = 64
Data[70] = 64
Data[71] = 64
Data[72] = 64
Data[73] = 64
Data[74] = 64
Data[75] = 64
Data[76] = 64
Data[77] = 64
Data[78] = 64
Data[79] = 64
Data[80] = 64
Data[81] = 64
Data[82] = 64
Data[83] = 64
Data[84] = 64
Data[85] = 64
Data[86] = 64
Data[87] = 64
Data[88] = 64
Data[89] = 64
Data[90] = 64
Data[91] = 64
Data[92] = 64
Data[93] = 64
Data[94] = 64
Data[95] = 64
Data[96] = 64
Data[97] = 64
Data[98] = 64
Data[99] = 64
Data[100] = 64
Data[101] = 64
Data[102] = 64
Data[103] = 64
Data[104] = 64
Data[105] = 64
Data[106] = 64
Data[107] = 64
Data[108] = 64
Data[109] = 64
Data[110] = 64
Data[111] = 64
Data[112] = 64
Data[113] = 64
Data[114] = 64
Data[115] = 64
Data[116] = 64
Data[117] = 64
Data[118] = 64
Data[119] = 64
Data[120] = 64
Data[121] = 64
Data[122] = 64
Data[123] = 64
Data[124] = 64
Data[125] = 64
Data[126] = 64
Data[127] = 64
Data[128] = 64
Data[129] = 64
Data[130] = 64
Data[131] = 64
Data[132] = 64
Data[133] = 64
Data[134] = 64
Data[135] = 64
Data[136] = 64
Data[137] = 64
Data[138] = 64
Data[139] = 64
Data[140] = 64
Data[141] = 64
Data[142] = 64
Data[143] = 64
Data[144] = 64
Data[145] = 64
Data[146] = 64
Data[147] = 64
Data[148] = 64
Data[149] = 64
Data[150] = 64
Data[151] = 64
Data[152] = 64
Data[153] = 64
Data[154] = 64
Data[155] = 64
Data[156] = 64
Data[157] = 64
Data[158] = 64
Data[159] = 64
Data[160] = 64
Data[161] = 64
Data[162] = 64
Data[163] = 64
Data[164] = 64
Data[165] = 64
Data[166] = 64
Data[167] = 64
Data[168] = 64
Data[169] = 64
Data[170] = 64
Data[171] = 64
Data[172] = 64
Data[173] = 64
Data[174] = 64
Data[175] = 64
Data[176] = 64
Data[177] = 64
Data[178] = 64
Data[179] = 64
Data[180] = 64
Data[181] = 64
Data[182] = 64
Data[183] = 64
Data[184] = 64
Data[185] = 64
Data[186] = 64
Data[187] = 64
Data[188] = 64
Data[189] = 64
Data[190] = 64
Data[191] = 64
Data[192] = 64
Data[193] = 64
Data[194] = 64
Data[195] = 64
Data[196] = 64
Data[197] = 64
Data[198] = 64
Data[199] = 64
Data[200] = 64
Data[201] = 64
Data[202] = 64
Data[203] = 64
Data[204] = 64
Data[205] = 64
Data[206] = 64
Data[207] = 64
Data[208] = 64
Data[209] = 64
Data[210] = 64
Data[211] = 64
Data[212] = 64
Data[213] = 64
Data[214] = 64
Data[215] = 64
Data[216] = 64
Data[217] = 64
Data[218] = 64
Data[219] = 64
Data[220] = 64
Data[221] = 64
Data[222] = 64
Data[223] = 64
Data[224] = 64
Data[225] = 64
Data[226] = 64
Data[227] = 64
Data[228] = 64
Data[229] = 64
Data[230] = 64
Data[231] = 64
Data[232] = 64
Data[233] = 64
Data[234] = 64
Data[235] = 64
Data[236] = 64
Data[237] = 64
Data[238] = 64
Data[239] = 64
Data[240] = 64
Data[241] = 64
Data[242] = 64
Data[243] = 64
Data[244] = 64
Data[245] = 64
Data[246] = 64
Data[247] = 64
Data[248] = 64
Data[249] = 64
Data[250] = 64
Data[251] = 64
Data[252] = 64
Data[253] = 64
Data[254] = 64
Data[255] = 64
Data[256] = 64
Data[257] = 64
Data[258] = 64
Data[259] = 64
Data[260] = 64
Data[261] = 64
Data[262] = 64
Data[263] = 64
Data[264] = 64
Data[265] = 64
Data[266] = 64
Data[267] = 64
Data[268] = 64
Data[269] = 64
Data[270] = 64
Data[271] = 64
Data[272] = 64
Data[273] = 64
Data[274] = 64
Data[275] = 64
Data[276] = 64
Data[277] = 64
Data[278] = 64
Data[279] = 64
Data[280] = 64
Data[281] = 64
Data[282] = 64
Data[283] = 64
Data[284] = 64
Data[285] = 64
Data[286] = 64
Data[287] = 64
Data[288] = 64
Data[289] = 64
Data[290] = 64
Data[291] = 64
Data[292] = 64
Data[293] = 64
Data[294] = 64
Data[295] = 64
Data[296] = 64
Data[297] = 64
Data[298] = 64
Data[299] = 64
Data[300] = 64
Data[301] = 64
Data[302] = 64
Data[303] = 64
Data[304] = 64
Data[305] = 64
Data[306] = 64
Data[307] = 64
Data[308] = 64
Data[309] = 64
Data[310] = 64
Data[311] = 64
Data[312] = 64
Data[313] = 64
Data[314] = 64
Data[315] = 64
Data[316] = 64
Data[317] = 64
Data[318] = 64
Data[319] = 64
Data[320] = 64
Data[321] = 64
Data[322] = 64
Data[323] = 64
Data[324] = 64
Data[325] = 64
Data[326] = 64
Data[327] = 64
Data[328] = 64
Data[329] = 64
Data[330] = 64
Data[331] = 64
Data[332] = 64
Data[333] = 64
Data[334] = 64
Data[335] = 64
Data[336] = 64
Data[337] = 64
Data[338] = 64
Data[339] = 64
Data[340] = 64
Data[341] = 64
Data[342] = 64
Data[343] = 64
Data[344] = 64
Data[345] = 64
Data[346] = 64
Data[347] = 64
Data[348] = 64
Data[349] = 64
Data[350] = 64
Data[351] = 64
Data[352] = 64
Data[353] = 64
Data[354] = 64
Data[355] = 64
Data[356] = 64
Data[357] = 64
Data[358] = 64
Data[359] = 64
Data[360] = 64
Data[361] = 64
Data[362] = 64
Data[363] = 64
Data[364] = 64
Data[365] = 64
Data[366] = 64
Data[367] = 64
Data[368] = 64
Data[369] = 64
Data[370] = 64
Data[371] = 64
Data[372] = 64
Data[373] = 64
Data[374] = 64
Data[375] = 64
Data[376] = 64
Data[377] = 64
Data[378] = 64
Data[379] = 64
Data[380] = 64
Data[381] = 64
Data[382] = 64
Data[383] = 64
Data[384] = 64
Data[385] = 64
Data[386] = 64
Data[387] = 64
Data[388] = 64
Data[389] = 64
Data[390] = 64
Data[391] = 64
Data[392] = 64
Data[393] = 64
Data[394] = 64
Data[395] = 64
Data[396] = 64
Data[397] = 64
Data[398] = 64
Data[399] = 64
Data[400] = 64
Data[401] = 64
Data[402] = 64
Data[403] = 64
Data[404] = 64
Data[405] = 64
Data[406] = 64
Data[407] = 64
Data[408] = 64
Data[409] = 64
Data[410] = 64
Data[411] = 64
Data[412] = 64
Data[413] = 64
Data[414] = 64
Data[415] = 64
Data[416] = 64
Data[417] = 64
Data[418] = 64
Data[419] = 64
Data[420] = 64
Data[421] = 64
Data[422] = 64
Data[423] = 64
Data[424] = 64
Data[425] = 64
Data[426] = 64
Data[427] = 64
Data[428] = 64
Data[429] = 64
Data[430] = 64
Data[431] = 64
Data[432] = 64
Data[433] = 64
Data[434] = 64
Data[435] = 64
Data[436] = 64
Data[437] = 64
Data[438] = 64
Data[439] = 64
Data[440] = 64
Data[441] = 64
Data[442] = 64
Data[443] = 64
Data[444] = 64
Data[445] = 64
Data[446] = 64
Data[447] = 64
Data[448] = 64
Data[449] = 64
Data[450] = 64
Data[451] = 64
Data[452] = 64
Data[453] = 64
Data[454] = 64
Data[455] = 64
Data[456] = 64
Data[457] = 64
Data[458] = 64
Data[459] = 64
Data[460] = 64
Data[461] = 64
Data[462] = 64
Data[463] = 64
Data[464] = 64
Data[465] = 64
Data[466] = 64
Data[467] = 64
Data[468] = 64
Data[469] = 64
Data[470] = 64
Data[471] = 64
Data[472] = 64
Data[473] = 64
Data[474] = 64
Data[475] = 64
Data[476] = 64
Data[477] = 64
Data[478] = 64
Data[479] = 64
Data[480] = 64
Data[481] = 64
Data[482] = 64
Data[483] = 64
Data[484] = 64
Data[485] = 64
Data[486] = 64
Data[487] = 64
Data[488] = 64
Data[489] = 64
Data[490] = 64
Data[491] = 64
Data[492] = 64
Data[493] = 64
Data[494] = 64
Data[495] = 64
Data[496] = 64
Data[497] = 64
Data[498] = 64
Data[499] = 64
Data[500] = 64
Data[501] = 64
Data[502] = 64
Data[503] = 64
Data[504] = 64
Data[505] = 64
Data[506] = 64
Data[507] = 64
Data[508] = 64
Data[509] = 64
Data[510] = 64
Data[511] = 64
Data[512] = 64
Data[513] = 64
Data[514] = 64
Data[515] = 64
Data[516] = 64
Data[517] = 64
Data[518] = 64
Data[519] = 64
Data[520] = 64
Data[521] = 64
Data[522] = 64
Data[523] = 64
Data[524] = 64
Data[525] = 64
Data[526] = 64
Data[527] = 64
Data[528] = 64
Data[529] = 64
Data[530] = 64
Data[531] = 64
Data[532] = 64
Data[533] = 64
Data[534] = 64
Data[535] = 64
Data[536] = 64
Data[537] = 64
Data[538] = 64
Data[539] = 64
Data[540] = 64
Data[541] = 64
Data[542] = 64
Data[543] = 64
Data[544] = 64
Data[545] = 64
Data[546] = 64
Data[547] = 64
Data[548] = 64
Data[549] = 64
Data[550] = 64
Data[551] = 64
Data[552] = 64
Data[553] = 64
Data[554] = 64
Data[555] = 64
Data[556] = 64
Data[557] = 64
Data[558] = 64
Data[559] = 64
Data[560] = 64
Data[561] = 64
Data[562] = 64
Data[563] = 64
Data[564] = 64
Data[565] = 64
Data[566] = 64
Data[567] = 64
Data[568] = 64
Data[569] = 64
Data[570] = 64
Data[571] = 64
Data[572] = 64
Data[573] = 64
Data[574] = 64
Data[575] = 64
Data[576] = 64
Data[577] = 64
Data[578] = 64
Data[579] = 64
Data[580] = 64
Data[581] = 64
Data[582] = 64
Data[583] = 64
Data[584] = 64
Data[585] = 64
Data[586] = 64
Data[587] = 64
Data[588] = 64
Data[589] = 64
Data[590] = 64
Data[591] = 64
Data[592] = 64
Data[593] = 64
Data[594] = 64
Data[595] = 64
Data[596] = 64
Data[597] = 64
Data[598] = 64
Data[599] = 64
Data[600] = 64
Data[601] = 64
Data[602] = 64
Data[603] = 64
Data[604] = 64
Data[605] = 64
Data[606] = 64
Data[607] = 64
Data[608] = 64
Data[609] = 64
Data[610] = 64
Data[611] = 64
Data[612] = 64
Data[613] = 64
Data[614] = 64
Data[615] = 64
Data[616] = 64
Data[617] = 64
Data[618] = 64
Data[619] = 64
Data[620] = 64
Data[621] = 64
Data[622] = 64
Data[623] = 64
Data[624] = 64
Data[625] = 64
Data[626] = 64
Data[627] = 64
Data[628] = 64
Data[629] = 64
Data[630] = 64
Data[631] = 64
Data[632] = 64
Data[633] = 64
Data[634] = 64
Data[635] = 64
Data[636] = 64
Data[637] = 64
Data[638] = 64
Data[639] = 64
Data[640] = 64
Data[641] = 64
Data[642] = 64
Data[643] = 64
Data[644] = 64
Data[645] = 64
Data[646] = 64
Data[647] = 64
Data[648] = 64
Data[649] = 64
Data[650] = 64
Data[651] = 64
Data[652] = 64
Data[653] = 64
Data[654] = 64
Data[655] = 64
Data[656] = 64
Data[657] = 64
Data[658] = 64
Data[659] = 64
Data[660] = 64
Data[661] = 64
Data[662] = 64
Data[663] = 64
Data[664] = 64
Data[665] = 64
Data[666] = 64
Data[667] = 64
Data[668] = 64
Data[669] = 64
Data[670] = 64
Data[671] = 64
Data[672] = 64
Data[673] = 64
Data[674] = 64
Data[675] = 64
Data[676] = 64
Data[677] = 64
Data[678] = 64
Data[679] = 64
Data[680] = 64
Data[681] = 64
Data[682] = 64
Data[683] = 64
Data[684] = 64
Data[685] = 64
Data[686] = 64
Data[687] = 64
Data[688] = 64
Data[689] = 64
Data[690] = 64
Data[691] = 64
Data[692] = 64
Data[693] = 64
Data[694] = 64
Data[695] = 64
Data[696] = 64
Data[697] = 64
Data[698] = 64
Data[699] = 64
Data[700] = 64
Data[701] = 64
Data[702] = 64
Data[703] = 64
Data[704] = 64
Data[705] = 64
Data[706] = 64
Data[707] = 64
Data[708] = 64
Data[709] = 64
Data[710] = 64
Data[711] = 64
Data[712] = 64
Data[713] = 64
Data[714] = 64
Data[715] = 64
Data[716] = 64
Data[717] = 64
Data[718] = 64
Data[719] = 64
Data[720] = 64
Data[721] = 64
Data[722] = 64
Data[723] = 64
Data[724] = 64
Data[725] = 64
Data[726] = 64
Data[727] = 64
Data[728] = 64
Data[729] = 64
Data[730] = 64
Data[731] = 64
Data[732] = 64
Data[733] = 64
Data[734] = 64
Data[735] = 64
Data[736] = 64
Data[737] = 64
Data[738] = 64
Data[739] = 64
Data[740] = 64
Data[741] = 64
Data[742] = 64
Data[743] = 64
Data[744] = 64
Data[745] = 64
Data[746] = 64
Data[747] = 64
Data[748] = 64
Data[749] = 64
Data[750] = 64
Data[751] = 64
Data[752] = 64
Data[753] = 64
Data[754] = 64
Data[755] = 64
Data[756] = 64
Data[757] = 64
Data[758] = 64
Data[759] = 64
Data[760] = 64
Data[761] = 64
Data[762] = 64
Data[763] = 64
Data[764] = 64
Data[765] = 64
Data[766] = 64
Data[767] = 64
Data[768] = 64
Data[769] = 64
Data[770] = 64
Data[771] = 64
Data[772] = 64
Data[773] = 64
Data[774] = 64
Data[775] = 64
Data[776] = 64
Data[777] = 64
Data[778] = 64
Data[779] = 64
Data[780] = 64
Data[781] = 64
Data[782] = 64
Data[783] = 64
Data[784] = 64
Data[785] = 64
Data[786] = 64
Data[787] = 64
Data[788] = 64
Data[789] = 64
Data[790] = 64
Data[791] = 64
Data[792] = 64
Data[793] = 64
Data[794] = 64
Data[795] = 64
Data[796] = 64
Data[797] = 64
Data[798] = 64
Data[799] = 64
Data[800] = 64
Data[801] = 64
Data[802] = 64
Data[803] = 64
Data[804] = 64
Data[805] = 64
Data[806] = 64
Data[807] = 64
Data[808] = 64
Data[809] = 64
Data[810] = 64
Data[811] = 64
Data[812] = 64
Data[813] = 64
Data[814] = 64
Data[815] = 64
Data[816] = 64
Data[817] = 64
Data[818] = 64
Data[819] = 64
Data[820] = 64
Data[821] = 64
Data[822] = 64
Data[823] = 64
Data[824] = 64
Data[825] = 64
Data[826] = 64
Data[827] = 64
Data[828] = 64
Data[829] = 64
Data[830] = 64
Data[831] = 64
Data[832] = 64
Data[833] = 64
Data[834] = 64
Data[835] = 64
Data[836] = 64
Data[837] = 64
Data[838] = 64
Data[839] = 64
Data[840] = 64
Data[841] = 64
Data[842] = 64
Data[843] = 64
Data[844] = 64
Data[845] = 64
Data[846] = 64
Data[847] = 64
Data[848] = 64
Data[849] = 64
Data[850] = 64
Data[851] = 64
Data[852] = 64
Data[853] = 64
Data[854] = 64
Data[855] = 64
Data[856] = 64
Data[857] = 64
Data[858] = 64
Data[859] = 64
Data[860] = 64
Data[861] = 64
Data[862] = 64
Data[863] = 64
Data[864] = 64
Data[865] = 64
Data[866] = 64
Data[867] = 64
Data[868] = 64
Data[869] = 64
Data[870] = 64
Data[871] = 64
Data[872] = 64
Data[873] = 64
Data[874] = 64
Data[875] = 64
Data[876] = 64
Data[877] = 64
Data[878] = 64
Data[879] = 64
Data[880] = 64
Data[881] = 64
Data[882] = 64
Data[883] = 64
Data[884] = 64
Data[885] = 64
Data[886] = 64
Data[887] = 64
Data[888] = 64
Data[889] = 64
Data[890] = 64
Data[891] = 64
Data[892] = 64
Data[893] = 64
Data[894] = 64
Data[895] = 64
Data[896] = 64
Data[897] = 64
Data[898] = 64
Data[899] = 64
Data[900] = 64
Data[901] = 64
Data[902] = 64
Data[903] = 64
Data[904] = 64
Data[905] = 64
Data[906] = 64
Data[907] = 64
Data[908] = 64
Data[909] = 64
Data[910] = 64
Data[911] = 64
Data[912] = 64
Data[913] = 64
Data[914] = 64
Data[915] = 64
Data[916] = 64
Data[917] = 64
Data[918] = 64
Data[919] = 64
Data[920] = 64
Data[921] = 64
Data[922] = 64
Data[923] = 64
Data[924] = 64
Data[925] = 64
Data[926] = 64
Data[927] = 64
Data[928] = 64
Data[929] = 64
Data[930] = 64
Data[931] = 64
Data[932] = 64
Data[933] = 64
Data[934] = 64
Data[935] = 64
Data[936] = 64
Data[937] = 64
Data[938] = 64
Data[939] = 64
Data[940] = 64
Data[941] = 64
Data[942] = 64
Data[943] = 64
Data[944] = 64
Data[945] = 64
Data[946] = 64
Data[947] = 64
Data[948] = 64
Data[949] = 64
Data[950] = 64
Data[951] = 64
Data[952] = 64
Data[953] = 64
Data[954] = 64
Data[955] = 64
Data[956] = 64
Data[957] = 64
Data[958] = 64
Data[959] = 64
Data[960] = 64
Data[961] = 64
Data[962] = 64
Data[963] = 64
Data[964] = 64
Data[965] = 64
Data[966] = 64
Data[967] = 64
Data[968] = 64
Data[969] = 64
Data[970] = 64
Data[971] = 64
Data[972] = 64
Data[973] = 64
Data[974] = 64
Data[975] = 64
Data[976] = 64
Data[977] = 64
Data[978] = 64
Data[979] = 64
Data[980] = 64
Data[981] = 64
Data[982] = 64
Data[983] = 64
Data[984] = 64
Data[985] = 64
Data[986] = 64
Data[987] = 64
Data[988] = 64
Data[989] = 64
Data[990] = 64
Data[991] = 64
Data[992] = 64
Data[993] = 64
Data[994] = 64
Data[995] = 64
Data[996] = 64
Data[997] = 64
Data[998] = 64
Data[999] = 64
Data[1000] = 64
Data[1001] = 64
Data[1002] = 64
Data[1003] = 64
Data[1004] = 64
Data[1005] = 64
Data[1006] = 64
Data[1007] = 64
Data[1008] = 64
Data[1009] = 64
Data[1010] = 64
Data[1011] = 64
Data[1012] = 64
Data[1013] = 64
Data[1014] = 64
Data[1015] = 64
Data[1016] = 64
Data[1017] = 64
Data[1018] = 64
Data[1019] = 64
Data[1020] = 64
Data[1021] = 64
Data[1022] = 64
Data[1023] = 64
Data[1024] = 64
Data[1025] = 64
Data[1026] = 64
Data[1027] = 64
Data[1028] = 64
Data[1029] = 64
Data[1030] = 64
Data[1031] = 64
Data[1032] = 64
Data[1033] = 64
Data[1034] = 64
Data[1035] = 64
Data[1036] = 64
Data[1037] = 64
Data[1038] = 64
Data[1039] = 64
Data[1040] = 64
Data[1041] = 64
Data[1042] = 64
Data[1043] = 64
Data[1044] = 64
Data[1045] = 64
Data[1046] = 64
Data[1047] = 64
Data[1048] = 64
Data[1049] = 64
Data[1050] = 64
Data[1051] = 64
Data[1052] = 64
Data[1053] = 64
Data[1054] = 64
Data[1055] = 64
Data[1056] = 64
Data[1057] = 64
Data[1058] = 64
Data[1059] = 64
Data[1060] = 64
Data[1061] = 64
Data[1062] = 64
Data[1063] = 64
Data[1064] = 64
Data[1065] = 64
Data[1066] = 64
Data[1067] = 64
Data[1068] = 64
Data[1069] = 64
Data[1070] = 64
Data[1071] = 64
Data[1072] = 64
Data[1073] = 64
Data[1074] = 64
Data[1075] = 64
Data[1076] = 64
Data[1077] = 64
Data[1078] = 64
Data[1079] = 64
Data[1080] = 64
Data[1081] = 64
Data[1082] = 64
Data[1083] = 64
Data[1084] = 64
Data[1085] = 64
Data[1086] = 64
Data[1087] = 64
Data[1088] = 64
Data[1089] = 64
Data[1090] = 64
Data[1091] = 64
Data[1092] = 64
Data[1093] = 64
Data[1094] = 64
Data[1095] = 64
Data[1096] = 64
Data[1097] = 64
Data[1098] = 64
Data[1099] = 64
Data[1100] = 64
Data[1101] = 64
Data[1102] = 64
Data[1103] = 64
Data[1104] = 64
Data[1105] = 64
Data[1106] = 64
Data[1107] = 64
Data[1108] = 64
Data[1109] = 64
Data[1110] = 64
Data[1111] = 64
Data[1112] = 64
Data[1113] = 64
Data[1114] = 64
Data[1115] = 64
Data[1116] = 64
Data[1117] = 64
Data[1118] = 64
Data[1119] = 64
Data[1120] = 64
Data[1121] = 64
Data[1122] = 64
Data[1123] = 64
Data[1124] = 64
Data[1125] = 64
Data[1126] = 64
Data[1127] = 64
Data[1128] = 64
Data[1129] = 64
Data[1130] = 64
Data[1131] = 64
Data[1132] = 64
Data[1133] = 64
Data[1134] = 64
Data[1135] = 64
Data[1136] = 64
Data[1137] = 64
Data[1138] = 64
Data[1139] = 64
Data[1140] = 64
Data[1141] = 64
Data[1142] = 64
Data[1143] = 64
Data[1144] = 64
Data[1145] = 64
Data[1146] = 64
Data[1147] = 64
Data[1148] = 64
Data[1149] = 64
Data[1150] = 64
Data[1151] = 64
Data[1152] = 64
Data[1153] = 64
Data[1154] = 64
Data[1155] = 64
Data[1156] = 64
Data[1157] = 64
Data[1158] = 64
Data[1159] = 64
Data[1160] = 64
Data[1161] = 64
Data[1162] = 64
Data[1163] = 64
Data[1164] = 64
Data[1165] = 64
Data[1166] = 64
Data[1167] = 64
Data[1168] = 64
Data[1169] = 64
Data[1170] = 64
Data[1171] = 64
Data[1172] = 64
Data[1173] = 64
Data[1174] = 64
Data[1175] = 64
Data[1176] = 64
Data[1177] = 64
Data[1178] = 64
Data[1179] = 64
Data[1180] = 64
Data[1181] = 64
Data[1182] = 64
Data[1183] = 64
Data[1184] = 64
Data[1185] = 64
Data[1186] = 64
Data[1187] = 64
Data[1188] = 64
Data[1189] = 64
Data[1190] = 64
Data[1191] = 64
Data[1192] = 64
Data[1193] = 64
Data[1194] = 64
Data[1195] = 64
Data[1196] = 64
Data[1197] = 64
Data[1198] = 64
Data[1199] = 64
Data[1200] = 64
Data[1201] = 64
Data[1202] = 64
Data[1203] = 64
Data[1204] = 64
Data[1205] = 64
Data[1206] = 64
Data[1207] = 64
Data[1208] = 64
Data[1209] = 64
Data[1210] = 64
Data[1211] = 64
Data[1212] = 64
Data[1213] = 64
Data[1214] = 64
Data[1215] = 64
Data[1216] = 64
Data[1217] = 64
Data[1218] = 64
Data[1219] = 64
Data[1220] = 64
Data[1221] = 64
Data[1222] = 64
Data[1223] = 64
Data[1224] = 64
Data[1225] = 64
Data[1226] = 64
Data[1227] = 64
Data[1228] = 64
Data[1229] = 64
Data[1230] = 64
Data[1231] = 64
Data[1232] = 64
Data[1233] = 64
Data[1234] = 64
Data[1235] = 64
Data[1236] = 64
Data[1237] = 64
Data[1238] = 64
Data[1239] = 64
Data[1240] = 64
Data[1241] = 64
Data[1242] = 64
Data[1243] = 64
Data[1244] = 64
Data[1245] = 64
Data[1246] = 64
Data[1247] = 64
Data[1248] = 64
Data[1249] = 64
Data[1250] = 64
Data[1251] = 64
Data[1252] = 64
Data[1253] = 64
Data[1254] = 64
Data[1255] = 64
Data[1256] = 64
Data[1257] = 64
Data[1258] = 64
Data[1259] = 64
Data[1260] = 64
Data[1261] = 64
Data[1262] = 64
Data[1263] = 64
Data[1264] = 64
Data[1265] = 64
Data[1266] = 64
Data[1267] = 64
Data[1268] = 64
Data[1269] = 64
Data[1270] = 64
Data[1271] = 64
Data[1272] = 64
Data[1273] = 64
Data[1274] = 64
Data[1275] = 64
Data[1276] = 64
Data[1277] = 64
Data[1278] = 64
Data[1279] = 64
Data[1280] = 64
Data[1281] = 64
Data[1282] = 64
Data[1283] = 64
Data[1284] = 64
Data[1285] = 64
Data[1286] = 64
Data[1287] = 64
Data[1288] = 64
Data[1289] = 64
Data[1290] = 64
Data[1291] = 64
Data[1292] = 64
Data[1293] = 64
Data[1294] = 64
Data[1295] = 64
Data[1296] = 64
Data[1297] = 64
Data[1298] = 64
Data[1299] = 64
Data[1300] = 64
Data[1301] = 64
Data[1302] = 64
Data[1303] = 64
Data[1304] = 64
Data[1305] = 64
Data[1306] = 64
Data[1307] = 64
Data[1308] = 64
Data[1309] = 64
Data[1310] = 64
Data[1311] = 64
Data[1312] = 64
Data[1313] = 64
Data[1314] = 64
Data[1315] = 64
Data[1316] = 64
Data[1317] = 64
Data[1318] = 64
Data[1319] = 64
Data[1320] = 64
Data[1321] = 64
Data[1322] = 64
Data[1323] = 64
Data[1324] = 64
Data[1325] = 64
Data[1326] = 64
Data[1327] = 64
Data[1328] = 64
Data[1329] = 64
Data[1330] = 64
Data[1331] = 64
Data[1332] = 64
Data[1333] = 64
Data[1334] = 64
Data[1335] = 64
Data[1336] = 64
Data[1337] = 64
Data[1338] = 64
Data[1339] = 64
Data[1340] = 64
Data[1341] = 64
Data[1342] = 64
Data[1343] = 64
Data[1344] = 64
Data[1345] = 64
Data[1346] = 64
Data[1347] = 64
Data[1348] = 64
Data[1349] = 64
Data[1350] = 64
Data[1351] = 64
Data[1352] = 64
Data[1353] = 64
Data[1354] = 64
Data[1355] = 64
Data[1356] = 64
Data[1357] = 64
Data[1358] = 64
Data[1359] = 64
Data[1360] = 64
Data[1361] = 64
Data[1362] = 64
Data[1363] = 64
Data[1364] = 64
Data[1365] = 64
Data[1366] = 64
Data[1367] = 64
Data[1368] = 64
Data[1369] = 64
Data[1370] = 64
Data[1371] = 64
Data[1372] = 64
Data[1373] = 64
Data[1374] = 64
Data[1375] = 64
Data[1376] = 64
Data[1377] = 64
Data[1378] = 64
Data[1379] = 64
Data[1380] = 64
Data[1381] = 64
Data[1382] = 64
Data[1383] = 64
Data[1384] = 64
Data[1385] = 64
Data[1386] = 64
Data[1387] = 64
Data[1388] = 64
Data[1389] = 64
Data[1390] = 64
Data[1391] = 64
Data[1392] = 64
Data[1393] = 64
Data[1394] = 64
Data[1395] = 64
Data[1396] = 64
Data[1397] = 64
Data[1398] = 64
Data[1399] = 64
Data[1400] = 64
Data[1401] = 64
Data[1402] = 64
Data[1403] = 64
Data[1404] = 64
Data[1405] = 64
Data[1406] = 64
Data[1407] = 64
Data[1408] = 64
Data[1409] = 64
Data[1410] = 64
Data[1411] = 64
Data[1412] = 64
Data[1413] = 64
Data[1414] = 64
Data[1415] = 64
Data[1416] = 64
Data[1417] = 64
Data[1418] = 64
Data[1419] = 64
Data[1420] = 64
Data[1421] = 64
Data[1422] = 64
Data[1423] = 64
Data[1424] = 64
Data[1425] = 64
Data[1426] = 64
Data[1427] = 64
Data[1428] = 64
Data[1429] = 64
Data[1430] = 64
Data[1431] = 64
Data[1432] = 64
Data[1433] = 64
Data[1434] = 64
Data[1435] = 64
Data[1436] = 64
Data[1437] = 64
Data[1438] = 64
Data[1439] = 64
Data[1440] = 64
Data[1441] = 64
Data[1442] = 64
Data[1443] = 64
Data[1444] = 64
Data[1445] = 64
Data[1446] = 64
Data[1447] = 64
Data[1448] = 64
Data[1449] = 64
Data[1450] = 64
Data[1451] = 64
Data[1452] = 64
Data[1453] = 64
Data[1454] = 64
Data[1455] = 64
Data[1456] = 64
Data[1457] = 64
Data[1458] = 64
Data[1459] = 64
Data[1460] = 64
Data[1461] = 64
Data[1462] = 64
Data[1463] = 64
Data[1464] = 64
Data[1465] = 64
Data[1466] = 64
Data[1467] = 64
Data[1468] = 64
Data[1469] = 64
Data[1470] = 64
Data[1471] = 64
Data[1472] = 64
Data[1473] = 64
Data[1474] = 64
Data[1475] = 64
Data[1476] = 64
Data[1477] = 64
Data[1478] = 64
Data[1479] = 64
Data[1480] = 64
Data[1481] = 64
Data[1482] = 64
Data[1483] = 64
Data[1484] = 64
Data[1485] = 64
Data[1486] = 64
Data[1487] = 64
Data[1488] = 64
Data[1489] = 64
Data[1490] = 64
Data[1491] = 64
Data[1492] = 64
Data[1493] = 64
Data[1494] = 64
Data[1495] = 64
Data[1496] = 64
Data[1497] = 64
Data[1498] = 64
Data[1499] = 64
Data[1500] = 64
Data[1501] = 64
Data[1502] = 64
Data[1503] = 64
Data[1504] = 64
Data[1505] = 64
Data[1506] = 64
Data[1507] = 64
Data[1508] = 64
Data[1509] = 64
Data[1510] = 64
Data[1511] = 64
Data[1512] = 64
Data[1513] = 64
Data[1514] = 64
Data[1515] = 64
Data[1516] = 64
Data[1517] = 64
Data[1518] = 64
Data[1519] = 64
Data[1520] = 64
Data[1521] = 64
Data[1522] = 64
Data[1523] = 64
Data[1524] = 64
Data[1525] = 64
Data[1526] = 64
Data[1527] = 64
Data[1528] = 64
Data[1529] = 64
Data[1530] = 64
Data[1531] = 64
Data[1532] = 64
Data[1533] = 64
Data[1534] = 64
Data[1535] = 64
Data[1536] = 64
Data[1537] = 64
Data[1538] = 64
Data[1539] = 64
Data[1540] = 64
Data[1541] = 64
Data[1542] = 64
Data[1543] = 64
Data[1544] = 64
Data[1545] = 64
Data[1546] = 64
Data[1547] = 64
Data[1548] = 64
Data[1549] = 64
Data[1550] = 64
Data[1551] = 64
Data[1552] = 64
Data[1553] = 64
Data[1554] = 64
Data[1555] = 64
Data[1556] = 64
Data[1557] = 64
Data[1558] = 64
Data[1559] = 64
Data[1560] = 64
Data[1561] = 64
Data[1562] = 64
Data[1563] = 64
Data[1564] = 64
Data[1565] = 64
Data[1566] = 64
Data[1567] = 64
Data[1568] = 64
Data[1569] = 64
Data[1570] = 64
Data[1571] = 64
Data[1572] = 64
Data[1573] = 64
Data[1574] = 64
Data[1575] = 64
Data[1576] = 64
Data[1577] = 64
Data[1578] = 64
Data[1579] = 64
Data[1580] = 64
Data[1581] = 64
Data[1582] = 64
Data[1583] = 64
Data[1584] = 64
Data[1585] = 64
Data[1586] = 64
Data[1587] = 64
Data[1588] = 64
Data[1589] = 64
Data[1590] = 64
Data[1591] = 64
Data[1592] = 64
Data[1593] = 64
Data[1594] = 64
Data[1595] = 64
Data[1596] = 64
Data[1597] = 64
Data[1598] = 64
Data[1599] = 64
Data[1600] = 64
Data[1601] = 64
Data[1602] = 64
Data[1603] = 64
Data[1604] = 64
Data[1605] = 64
Data[1606] = 64
Data[1607] = 64
Data[1608] = 64
Data[1609] = 64
Data[1610] = 64
Data[1611] = 64
Data[1612] = 64
Data[1613] = 64
Data[1614] = 64
Data[1615] = 64
Data[1616] = 64
Data[1617] = 64
Data[1618] = 64
Data[1619] = 64
Data[1620] = 64
Data[1621] = 64
Data[1622] = 64
Data[1623] = 64
Data[1624] = 64
Data[1625] = 64
Data[1626] = 64
Data[1627] = 64
Data[1628] = 64
Data[1629] = 64
Data[1630] = 64
Data[1631] = 64
Data[1632] = 64
Data[1633] = 64
Data[1634] = 64
Data[1635] = 64
Data[1636] = 64
Data[1637] = 64
Data[1638] = 64
Data[1639] = 64
Data[1640] = 64
Data[1641] = 64
Data[1642] = 64
Data[1643] = 64
Data[1644] = 64
Data[1645] = 64
Data[1646] = 64
Data[1647] = 64
Data[1648] = 64
Data[1649] = 64
Data[1650] = 64
Data[1651] = 64
Data[1652] = 64
Data[1653] = 64
Data[1654] = 64
Data[1655] = 64
Data[1656] = 64
Data[1657] = 64
Data[1658] = 64
Data[1659] = 64
Data[1660] = 64
Data[1661] = 64
Data[1662] = 64
Data[1663] = 64
Data[1664] = 64
Data[1665] = 64
Data[1666] = 64
Data[1667] = 64
Data[1668] = 64
Data[1669] = 64
Data[1670] = 64
Data[1671] = 64
Data[1672] = 64
Data[1673] = 64
Data[1674] = 64
Data[1675] = 64
Data[1676] = 64
Data[1677] = 64
Data[1678] = 64
Data[1679] = 64
Data[1680] = 64
Data[1681] = 64
Data[1682] = 64
Data[1683] = 64
Data[1684] = 64
Data[1685] = 64
Data[1686] = 64
Data[1687] = 64
Data[1688] = 64
Data[1689] = 64
Data[1690] = 64
Data[1691] = 64
Data[1692] = 64
Data[1693] = 64
Data[1694] = 64
Data[1695] = 64
Data[1696] = 64
Data[1697] = 64
Data[1698] = 64
Data[1699] = 64
Data[1700] = 64
Data[1701] = 64
Data[1702] = 64
Data[1703] = 64
Data[1704] = 64
Data[1705] = 64
Data[1706] = 64
Data[1707] = 64
Data[1708] = 64
Data[1709] = 64
Data[1710] = 64
Data[1711] = 64
Data[1712] = 64
Data[1713] = 64
Data[1714] = 64
Data[1715] = 64
Data[1716] = 64
Data[1717] = 64
Data[1718] = 64
Data[1719] = 64
Data[1720] = 64
Data[1721] = 64
Data[1722] = 64
Data[1723] = 64
Data[1724] = 64
Data[1725] = 64
Data[1726] = 64
Data[1727] = 64
Data[1728] = 64
Data[1729] = 64
Data[1730] = 64
Data[1731] = 64
Data[1732] = 64
Data[1733] = 64
Data[1734] = 64
Data[1735] = 64
Data[1736] = 64
Data[1737] = 64
Data[1738] = 64
Data[1739] = 64
Data[1740] = 64
Data[1741] = 64
Data[1742] = 64
Data[1743] = 64
Data[1744] = 64
Data[1745] = 64
Data[1746] = 64
Data[1747] = 64
Data[1748] = 64
Data[1749] = 64
Data[1750] = 64
Data[1751] = 64
Data[1752] = 64
Data[1753] = 64
Data[1754] = 64
Data[1755] = 64
Data[1756] = 64
Data[1757] = 64
Data[1758] = 64
Data[1759] = 64
Data[1760] = 64
Data[1761] = 64
Data[1762] = 64
Data[1763] = 64
Data[1764] = 64
Data[1765] = 64
Data[1766] = 64
Data[1767] = 64
Data[1768] = 64
Data[1769] = 64
Data[1770] = 64
Data[1771] = 64
Data[1772] = 64
Data[1773] = 64
Data[1774] = 64
Data[1775] = 64
Data[1776] = 64
Data[1777] = 64
Data[1778] = 64
Data[1779] = 64
Data[1780] = 64
Data[1781] = 64
Data[1782] = 64
Data[1783] = 64
Data[1784] = 64
Data[1785] = 64
Data[1786] = 64
Data[1787] = 64
Data[1788] = 64
Data[1789] = 64
Data[1790] = 64
Data[1791] = 64
Data[1792] = 64
Data[1793] = 64
Data[1794] = 64
Data[1795] = 64
Data[1796] = 64
Data[1797] = 64
Data[1798] = 64
Data[1799] = 64
Data[1800] = 64
Data[1801] = 64
Data[1802] = 64
Data[1803] = 64
Data[1804] = 64
Data[1805] = 64
Data[1806] = 64
Data[1807] = 64
Data[1808] = 64
Data[1809] = 64
Data[1810] = 64
Data[1811] = 64
Data[1812] = 64
Data[1813] = 64
Data[1814] = 64
Data[1815] = 64
Data[1816] = 64
Data[1817] = 64
Data[1818] = 64
Data[1819] = 64
Data[1820] = 64
Data[1821] = 64
Data[1822] = 64
Data[1823] = 64
Data[1824] = 64
Data[1825] = 64
Data[1826] = 64
Data[1827] = 64
Data[1828] = 64
Data[1829] = 64
Data[1830] = 64
Data[1831] = 64
Data[1832] = 64
Data[1833] = 64
Data[1834] = 64
Data[1835] = 64
Data[1836] = 64
Data[1837] = 64
Data[1838] = 64
Data[1839] = 64
Data[1840] = 64
Data[1841] = 64
Data[1842] = 64
Data[1843] = 64
Data[1844] = 64
Data[1845] = 64
Data[1846] = 64
Data[1847] = 64
Data[1848] = 64
Data[1849] = 64
Data[1850] = 64
Data[1851] = 64
Data[1852] = 64
Data[1853] = 64
Data[1854] = 64
Data[1855] = 64
Data[1856] = 64
Data[1857] = 64
Data[1858] = 64
Data[1859] = 64
Data[1860] = 64
Data[1861] = 64
Data[1862] = 64
Data[1863] = 64
Data[1864] = 64
Data[1865] = 64
Data[1866] = 64
Data[1867] = 64
Data[1868] = 64
Data[1869] = 64
Data[1870] = 64
Data[1871] = 64
Data[1872] = 64
Data[1873] = 64
Data[1874] = 64
Data[1875] = 64
Data[1876] = 64
Data[1877] = 64
Data[1878] = 64
Data[1879] = 64
Data[1880] = 64
Data[1881] = 64
Data[1882] = 64
Data[1883] = 64
Data[1884] = 64
Data[1885] = 64
Data[1886] = 64
Data[1887] = 64
Data[1888] = 64
Data[1889] = 64
Data[1890] = 64
Data[1891] = 64
Data[1892] = 64
Data[1893] = 64
Data[1894] = 64
Data[1895] = 64
Data[1896] = 64
Data[1897] = 64
Data[1898] = 64
Data[1899] = 64
Data[1900] = 64
Data[1901] = 64
Data[1902] = 64
Data[1903] = 64
Data[1904] = 64
Data[1905] = 64
Data[1906] = 64
Data[1907] = 64
Data[1908] = 64
Data[1909] = 64
Data[1910] = 64
Data[1911] = 64
Data[1912] = 64
Data[1913] = 64
Data[1914] = 64
Data[1915] = 64
Data[1916] = 64
Data[1917] = 64
Data[1918] = 64
Data[1919] = 64
Data[1920] = 64
Data[1921] = 64
Data[1922] = 64
Data[1923] = 64
Data[1924] = 64
Data[1925] = 64
Data[1926] = 64
Data[1927] = 64
Data[1928] = 64
Data[1929] = 64
Data[1930] = 64
Data[1931] = 64
Data[1932] = 64
Data[1933] = 64
Data[1934] = 64
Data[1935] = 64
Data[1936] = 64
Data[1937] = 64
Data[1938] = 64
Data[1939] = 64
Data[1940] = 64
Data[1941] = 64
Data[1942] = 64
Data[1943] = 64
Data[1944] = 64
Data[1945] = 64
Data[1946] = 64
Data[1947] = 64
Data[1948] = 64
Data[1949] = 64
Data[1950] = 64
Data[1951] = 64
Data[1952] = 64
Data[1953] = 64
Data[1954] = 64
Data[1955] = 64
Data[1956] = 64
Data[1957] = 64
Data[1958] = 64
Data[1959] = 64
Data[1960] = 64
Data[1961] = 64
Data[1962] = 64
Data[1963] = 64
Data[1964] = 64
Data[1965] = 64
Data[1966] = 64
Data[1967] = 64
Data[1968] = 64
Data[1969] = 64
Data[1970] = 64
Data[1971] = 64
Data[1972] = 64
Data[1973] = 64
Data[1974] = 64
Data[1975] = 64
Data[1976] = 64
Data[1977] = 64
Data[1978] = 64
Data[1979] = 64
Data[1980] = 64
Data[1981] = 64
Data[1982] = 64
Data[1983] = 64
Data[1984] = 64
Data[1985] = 64
Data[1986] = 64
Data[1987] = 64
Data[1988] = 64
Data[1989] = 64
Data[1990] = 64
Data[1991] = 64
Data[1992] = 64
Data[1993] = 64
Data[1994] = 64
Data[1995] = 64
Data[1996] = 64
Data[1997] = 64
Data[1998] = 64
Data[1999] = 64
Data[2000] = 64
Data[2001] = 64
Data[2002] = 64
Data[2003] = 64
Data[2004] = 64
Data[2005] = 64
Data[2006] = 64
Data[2007] = 64
Data[2008] = 64
Data[2009] = 64
Data[2010] = 64
Data[2011] = 64
Data[2012] = 64
Data[2013] = 64
Data[2014] = 64
Data[2015] = 64
Data[2016] = 64
Data[2017] = 64
Data[2018] = 64
Data[2019] = 64
Data[2020] = 64
Data[2021] = 64
Data[2022] = 64
Data[2023] = 64
Data[2024] = 64
Data[2025] = 64
Data[2026] = 64
Data[2027] = 64
Data[2028] = 64
Data[2029] = 64
Data[2030] = 64
Data[2031] = 64
Data[2032] = 64
Data[2033] = 64
Data[2034] = 64
Data[2035] = 64
Data[2036] = 64
Data[2037] = 64
Data[2038] = 64
Data[2039] = 64
Data[2040] = 64
Data[2041] = 64
Data[2042] = 64
Data[2043] = 64
Data[2044] = 64
Data[2045] = 64
Data[2046] = 64
Data[2047] = 64
END SAMPLE: GroupGridIndices
START SAMPLE GenericKernel
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'GenericKernel.LambdaClosure'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'GenericKernel.LambdaClosure'.
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1,T2,T3](Accelerator accelerator, Action`4 action)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel[TIndex,T1,T2,T3](Accelerator accelerator, Action`4 action)
   at GenericKernel.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: GenericKernel
START SAMPLE ExplicitlyGroupedKernels
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Default grouped kernel
Data[0] = 64
Data[1] = 65
Data[2] = 66
Data[3] = 67
Data[4] = 68
Data[5] = 69
Data[6] = 70
Data[7] = 71
Data[8] = 72
Data[9] = 73
Data[10] = 74
Data[11] = 75
Data[12] = 76
Data[13] = 77
Data[14] = 78
Data[15] = 79
Data[16] = 80
Data[17] = 81
Data[18] = 82
Data[19] = 83
Data[20] = 84
Data[21] = 85
Data[22] = 86
Data[23] = 87
Data[24] = 88
Data[25] = 89
Data[26] = 90
Data[27] = 91
Data[28] = 92
Data[29] = 93
Data[30] = 94
Data[31] = 95
Data[32] = 96
Data[33] = 97
Data[34] = 98
Data[35] = 99
Data[36] = 100
Data[37] = 101
Data[38] = 102
Data[39] = 103
Data[40] = 104
Data[41] = 105
Data[42] = 106
Data[43] = 107
Data[44] = 108
Data[45] = 109
Data[46] = 110
Data[47] = 111
Data[48] = 112
Data[49] = 113
Data[50] = 114
Data[51] = 115
Data[52] = 116
Data[53] = 117
Data[54] = 118
Data[55] = 119
Data[56] = 120
Data[57] = 121
Data[58] = 122
Data[59] = 123
Data[60] = 124
Data[61] = 125
Data[62] = 126
Data[63] = 127
Data[64] = 128
Data[65] = 129
Data[66] = 130
Data[67] = 131
Data[68] = 132
Data[69] = 133
Data[70] = 134
Data[71] = 135
Data[72] = 136
Data[73] = 137
Data[74] = 138
Data[75] = 139
Data[76] = 140
Data[77] = 141
Data[78] = 142
Data[79] = 143
Data[80] = 144
Data[81] = 145
Data[82] = 146
Data[83] = 147
Data[84] = 148
Data[85] = 149
Data[86] = 150
Data[87] = 151
Data[88] = 152
Data[89] = 153
Data[90] = 154
Data[91] = 155
Data[92] = 156
Data[93] = 157
Data[94] = 158
Data[95] = 159
Data[96] = 160
Data[97] = 161
Data[98] = 162
Data[99] = 163
Data[100] = 164
Data[101] = 165
Data[102] = 166
Data[103] = 167
Data[104] = 168
Data[105] = 169
Data[106] = 170
Data[107] = 171
Data[108] = 172
Data[109] = 173
Data[110] = 174
Data[111] = 175
Data[112] = 176
Data[113] = 177
Data[114] = 178
Data[115] = 179
Data[116] = 180
Data[117] = 181
Data[118] = 182
Data[119] = 183
Data[120] = 184
Data[121] = 185
Data[122] = 186
Data[123] = 187
Data[124] = 188
Data[125] = 189
Data[126] = 190
Data[127] = 191
Grouped-barrier kernel
Data[0] = 0
Data[1] = 0
Data[2] = 0
Data[3] = 0
Data[4] = 0
Data[5] = 0
Data[6] = 0
Data[7] = 0
Data[8] = 0
Data[9] = 0
Data[10] = 0
Data[11] = 0
Data[12] = 0
Data[13] = 0
Data[14] = 0
Data[15] = 0
Data[16] = 0
Data[17] = 0
Data[18] = 0
Data[19] = 0
Data[20] = 0
Data[21] = 0
Data[22] = 0
Data[23] = 0
Data[24] = 0
Data[25] = 0
Data[26] = 0
Data[27] = 0
Data[28] = 0
Data[29] = 0
Data[30] = 0
Data[31] = 0
Data[32] = 0
Data[33] = 0
Data[34] = 0
Data[35] = 0
Data[36] = 0
Data[37] = 0
Data[38] = 0
Data[39] = 0
Data[40] = 0
Data[41] = 0
Data[42] = 0
Data[43] = 0
Data[44] = 0
Data[45] = 0
Data[46] = 0
Data[47] = 0
Data[48] = 0
Data[49] = 0
Data[50] = 0
Data[51] = 0
Data[52] = 0
Data[53] = 0
Data[54] = 0
Data[55] = 0
Data[56] = 0
Data[57] = 0
Data[58] = 0
Data[59] = 0
Data[60] = 0
Data[61] = 0
Data[62] = 0
Data[63] = 0
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-and-barrier kernel
Data[0] = 1
Data[1] = 1
Data[2] = 1
Data[3] = 1
Data[4] = 1
Data[5] = 1
Data[6] = 1
Data[7] = 1
Data[8] = 1
Data[9] = 1
Data[10] = 1
Data[11] = 1
Data[12] = 1
Data[13] = 1
Data[14] = 1
Data[15] = 1
Data[16] = 1
Data[17] = 1
Data[18] = 1
Data[19] = 1
Data[20] = 1
Data[21] = 1
Data[22] = 1
Data[23] = 1
Data[24] = 1
Data[25] = 1
Data[26] = 1
Data[27] = 1
Data[28] = 1
Data[29] = 1
Data[30] = 1
Data[31] = 1
Data[32] = 1
Data[33] = 1
Data[34] = 1
Data[35] = 1
Data[36] = 1
Data[37] = 1
Data[38] = 1
Data[39] = 1
Data[40] = 1
Data[41] = 1
Data[42] = 1
Data[43] = 1
Data[44] = 1
Data[45] = 1
Data[46] = 1
Data[47] = 1
Data[48] = 1
Data[49] = 1
Data[50] = 1
Data[51] = 1
Data[52] = 1
Data[53] = 1
Data[54] = 1
Data[55] = 1
Data[56] = 1
Data[57] = 1
Data[58] = 1
Data[59] = 1
Data[60] = 1
Data[61] = 1
Data[62] = 1
Data[63] = 1
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-or-barrier kernel
Data[0] = 0
Data[1] = 0
Data[2] = 0
Data[3] = 0
Data[4] = 0
Data[5] = 0
Data[6] = 0
Data[7] = 0
Data[8] = 0
Data[9] = 0
Data[10] = 0
Data[11] = 0
Data[12] = 0
Data[13] = 0
Data[14] = 0
Data[15] = 0
Data[16] = 0
Data[17] = 0
Data[18] = 0
Data[19] = 0
Data[20] = 0
Data[21] = 0
Data[22] = 0
Data[23] = 0
Data[24] = 0
Data[25] = 0
Data[26] = 0
Data[27] = 0
Data[28] = 0
Data[29] = 0
Data[30] = 0
Data[31] = 0
Data[32] = 0
Data[33] = 0
Data[34] = 0
Data[35] = 0
Data[36] = 0
Data[37] = 0
Data[38] = 0
Data[39] = 0
Data[40] = 0
Data[41] = 0
Data[42] = 0
Data[43] = 0
Data[44] = 0
Data[45] = 0
Data[46] = 0
Data[47] = 0
Data[48] = 0
Data[49] = 0
Data[50] = 0
Data[51] = 0
Data[52] = 0
Data[53] = 0
Data[54] = 0
Data[55] = 0
Data[56] = 0
Data[57] = 0
Data[58] = 0
Data[59] = 0
Data[60] = 1
Data[61] = 1
Data[62] = 1
Data[63] = 1
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-popcount-barrier kernel
Data[0] = 12
Data[1] = 12
Data[2] = 12
Data[3] = 12
Data[4] = 12
Data[5] = 12
Data[6] = 12
Data[7] = 12
Data[8] = 12
Data[9] = 12
Data[10] = 12
Data[11] = 12
Data[12] = 12
Data[13] = 12
Data[14] = 12
Data[15] = 12
Data[16] = 12
Data[17] = 12
Data[18] = 12
Data[19] = 12
Data[20] = 12
Data[21] = 12
Data[22] = 12
Data[23] = 12
Data[24] = 12
Data[25] = 12
Data[26] = 12
Data[27] = 12
Data[28] = 12
Data[29] = 12
Data[30] = 12
Data[31] = 12
Data[32] = 12
Data[33] = 12
Data[34] = 12
Data[35] = 12
Data[36] = 12
Data[37] = 12
Data[38] = 12
Data[39] = 12
Data[40] = 12
Data[41] = 12
Data[42] = 12
Data[43] = 12
Data[44] = 12
Data[45] = 12
Data[46] = 12
Data[47] = 12
Data[48] = 12
Data[49] = 12
Data[50] = 12
Data[51] = 12
Data[52] = 12
Data[53] = 12
Data[54] = 12
Data[55] = 12
Data[56] = 12
Data[57] = 12
Data[58] = 12
Data[59] = 12
Data[60] = 12
Data[61] = 12
Data[62] = 12
Data[63] = 12
Data[64] = 12
Data[65] = 12
Data[66] = 12
Data[67] = 12
Data[68] = 12
Data[69] = 12
Data[70] = 12
Data[71] = 12
Data[72] = 12
Data[73] = 12
Data[74] = 12
Data[75] = 12
Data[76] = 12
Data[77] = 12
Data[78] = 12
Data[79] = 12
Data[80] = 12
Data[81] = 12
Data[82] = 12
Data[83] = 12
Data[84] = 12
Data[85] = 12
Data[86] = 12
Data[87] = 12
Data[88] = 12
Data[89] = 12
Data[90] = 12
Data[91] = 12
Data[92] = 12
Data[93] = 12
Data[94] = 12
Data[95] = 12
Data[96] = 12
Data[97] = 12
Data[98] = 12
Data[99] = 12
Data[100] = 12
Data[101] = 12
Data[102] = 12
Data[103] = 12
Data[104] = 12
Data[105] = 12
Data[106] = 12
Data[107] = 12
Data[108] = 12
Data[109] = 12
Data[110] = 12
Data[111] = 12
Data[112] = 12
Data[113] = 12
Data[114] = 12
Data[115] = 12
Data[116] = 12
Data[117] = 12
Data[118] = 12
Data[119] = 12
Data[120] = 8
Data[121] = 8
Data[122] = 8
Data[123] = 8
Data[124] = 8
Data[125] = 8
Data[126] = 8
Data[127] = 8
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Default grouped kernel
Data[0] = 64
Data[1] = 65
Data[2] = 66
Data[3] = 67
Data[4] = 68
Data[5] = 69
Data[6] = 70
Data[7] = 71
Data[8] = 72
Data[9] = 73
Data[10] = 74
Data[11] = 75
Data[12] = 76
Data[13] = 77
Data[14] = 78
Data[15] = 79
Data[16] = 80
Data[17] = 81
Data[18] = 82
Data[19] = 83
Data[20] = 84
Data[21] = 85
Data[22] = 86
Data[23] = 87
Data[24] = 88
Data[25] = 89
Data[26] = 90
Data[27] = 91
Data[28] = 92
Data[29] = 93
Data[30] = 94
Data[31] = 95
Data[32] = 96
Data[33] = 97
Data[34] = 98
Data[35] = 99
Data[36] = 100
Data[37] = 101
Data[38] = 102
Data[39] = 103
Data[40] = 104
Data[41] = 105
Data[42] = 106
Data[43] = 107
Data[44] = 108
Data[45] = 109
Data[46] = 110
Data[47] = 111
Data[48] = 112
Data[49] = 113
Data[50] = 114
Data[51] = 115
Data[52] = 116
Data[53] = 117
Data[54] = 118
Data[55] = 119
Data[56] = 120
Data[57] = 121
Data[58] = 122
Data[59] = 123
Data[60] = 124
Data[61] = 125
Data[62] = 126
Data[63] = 127
Data[64] = 128
Data[65] = 129
Data[66] = 130
Data[67] = 131
Data[68] = 132
Data[69] = 133
Data[70] = 134
Data[71] = 135
Data[72] = 136
Data[73] = 137
Data[74] = 138
Data[75] = 139
Data[76] = 140
Data[77] = 141
Data[78] = 142
Data[79] = 143
Data[80] = 144
Data[81] = 145
Data[82] = 146
Data[83] = 147
Data[84] = 148
Data[85] = 149
Data[86] = 150
Data[87] = 151
Data[88] = 152
Data[89] = 153
Data[90] = 154
Data[91] = 155
Data[92] = 156
Data[93] = 157
Data[94] = 158
Data[95] = 159
Data[96] = 160
Data[97] = 161
Data[98] = 162
Data[99] = 163
Data[100] = 164
Data[101] = 165
Data[102] = 166
Data[103] = 167
Data[104] = 168
Data[105] = 169
Data[106] = 170
Data[107] = 171
Data[108] = 172
Data[109] = 173
Data[110] = 174
Data[111] = 175
Data[112] = 176
Data[113] = 177
Data[114] = 178
Data[115] = 179
Data[116] = 180
Data[117] = 181
Data[118] = 182
Data[119] = 183
Data[120] = 184
Data[121] = 185
Data[122] = 186
Data[123] = 187
Data[124] = 188
Data[125] = 189
Data[126] = 190
Data[127] = 191
Grouped-barrier kernel
Data[0] = 0
Data[1] = 0
Data[2] = 0
Data[3] = 0
Data[4] = 0
Data[5] = 0
Data[6] = 0
Data[7] = 0
Data[8] = 0
Data[9] = 0
Data[10] = 0
Data[11] = 0
Data[12] = 0
Data[13] = 0
Data[14] = 0
Data[15] = 0
Data[16] = 0
Data[17] = 0
Data[18] = 0
Data[19] = 0
Data[20] = 0
Data[21] = 0
Data[22] = 0
Data[23] = 0
Data[24] = 0
Data[25] = 0
Data[26] = 0
Data[27] = 0
Data[28] = 0
Data[29] = 0
Data[30] = 0
Data[31] = 0
Data[32] = 0
Data[33] = 0
Data[34] = 0
Data[35] = 0
Data[36] = 0
Data[37] = 0
Data[38] = 0
Data[39] = 0
Data[40] = 0
Data[41] = 0
Data[42] = 0
Data[43] = 0
Data[44] = 0
Data[45] = 0
Data[46] = 0
Data[47] = 0
Data[48] = 0
Data[49] = 0
Data[50] = 0
Data[51] = 0
Data[52] = 0
Data[53] = 0
Data[54] = 0
Data[55] = 0
Data[56] = 0
Data[57] = 0
Data[58] = 0
Data[59] = 0
Data[60] = 0
Data[61] = 0
Data[62] = 0
Data[63] = 0
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-and-barrier kernel
Data[0] = 1
Data[1] = 1
Data[2] = 1
Data[3] = 1
Data[4] = 1
Data[5] = 1
Data[6] = 1
Data[7] = 1
Data[8] = 1
Data[9] = 1
Data[10] = 1
Data[11] = 1
Data[12] = 1
Data[13] = 1
Data[14] = 1
Data[15] = 1
Data[16] = 1
Data[17] = 1
Data[18] = 1
Data[19] = 1
Data[20] = 1
Data[21] = 1
Data[22] = 1
Data[23] = 1
Data[24] = 1
Data[25] = 1
Data[26] = 1
Data[27] = 1
Data[28] = 1
Data[29] = 1
Data[30] = 1
Data[31] = 1
Data[32] = 1
Data[33] = 1
Data[34] = 1
Data[35] = 1
Data[36] = 1
Data[37] = 1
Data[38] = 1
Data[39] = 1
Data[40] = 1
Data[41] = 1
Data[42] = 1
Data[43] = 1
Data[44] = 1
Data[45] = 1
Data[46] = 1
Data[47] = 1
Data[48] = 1
Data[49] = 1
Data[50] = 1
Data[51] = 1
Data[52] = 1
Data[53] = 1
Data[54] = 1
Data[55] = 1
Data[56] = 1
Data[57] = 1
Data[58] = 1
Data[59] = 1
Data[60] = 1
Data[61] = 1
Data[62] = 1
Data[63] = 1
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-or-barrier kernel
Data[0] = 1
Data[1] = 1
Data[2] = 1
Data[3] = 1
Data[4] = 1
Data[5] = 1
Data[6] = 1
Data[7] = 1
Data[8] = 1
Data[9] = 1
Data[10] = 1
Data[11] = 1
Data[12] = 1
Data[13] = 1
Data[14] = 1
Data[15] = 1
Data[16] = 1
Data[17] = 1
Data[18] = 1
Data[19] = 1
Data[20] = 1
Data[21] = 1
Data[22] = 1
Data[23] = 1
Data[24] = 1
Data[25] = 1
Data[26] = 1
Data[27] = 1
Data[28] = 1
Data[29] = 1
Data[30] = 1
Data[31] = 1
Data[32] = 1
Data[33] = 1
Data[34] = 1
Data[35] = 1
Data[36] = 1
Data[37] = 1
Data[38] = 1
Data[39] = 1
Data[40] = 1
Data[41] = 1
Data[42] = 1
Data[43] = 1
Data[44] = 1
Data[45] = 1
Data[46] = 1
Data[47] = 1
Data[48] = 1
Data[49] = 1
Data[50] = 1
Data[51] = 1
Data[52] = 1
Data[53] = 1
Data[54] = 1
Data[55] = 1
Data[56] = 1
Data[57] = 1
Data[58] = 1
Data[59] = 1
Data[60] = 1
Data[61] = 1
Data[62] = 1
Data[63] = 1
Data[64] = 1
Data[65] = 1
Data[66] = 1
Data[67] = 1
Data[68] = 1
Data[69] = 1
Data[70] = 1
Data[71] = 1
Data[72] = 1
Data[73] = 1
Data[74] = 1
Data[75] = 1
Data[76] = 1
Data[77] = 1
Data[78] = 1
Data[79] = 1
Data[80] = 1
Data[81] = 1
Data[82] = 1
Data[83] = 1
Data[84] = 1
Data[85] = 1
Data[86] = 1
Data[87] = 1
Data[88] = 1
Data[89] = 1
Data[90] = 1
Data[91] = 1
Data[92] = 1
Data[93] = 1
Data[94] = 1
Data[95] = 1
Data[96] = 1
Data[97] = 1
Data[98] = 1
Data[99] = 1
Data[100] = 1
Data[101] = 1
Data[102] = 1
Data[103] = 1
Data[104] = 1
Data[105] = 1
Data[106] = 1
Data[107] = 1
Data[108] = 1
Data[109] = 1
Data[110] = 1
Data[111] = 1
Data[112] = 1
Data[113] = 1
Data[114] = 1
Data[115] = 1
Data[116] = 1
Data[117] = 1
Data[118] = 1
Data[119] = 1
Data[120] = 1
Data[121] = 1
Data[122] = 1
Data[123] = 1
Data[124] = 1
Data[125] = 1
Data[126] = 1
Data[127] = 1
Grouped-popcount-barrier kernel
Data[0] = 128
Data[1] = 128
Data[2] = 128
Data[3] = 128
Data[4] = 128
Data[5] = 128
Data[6] = 128
Data[7] = 128
Data[8] = 128
Data[9] = 128
Data[10] = 128
Data[11] = 128
Data[12] = 128
Data[13] = 128
Data[14] = 128
Data[15] = 128
Data[16] = 128
Data[17] = 128
Data[18] = 128
Data[19] = 128
Data[20] = 128
Data[21] = 128
Data[22] = 128
Data[23] = 128
Data[24] = 128
Data[25] = 128
Data[26] = 128
Data[27] = 128
Data[28] = 128
Data[29] = 128
Data[30] = 128
Data[31] = 128
Data[32] = 128
Data[33] = 128
Data[34] = 128
Data[35] = 128
Data[36] = 128
Data[37] = 128
Data[38] = 128
Data[39] = 128
Data[40] = 128
Data[41] = 128
Data[42] = 128
Data[43] = 128
Data[44] = 128
Data[45] = 128
Data[46] = 128
Data[47] = 128
Data[48] = 128
Data[49] = 128
Data[50] = 128
Data[51] = 128
Data[52] = 128
Data[53] = 128
Data[54] = 128
Data[55] = 128
Data[56] = 128
Data[57] = 128
Data[58] = 128
Data[59] = 128
Data[60] = 128
Data[61] = 128
Data[62] = 128
Data[63] = 128
Data[64] = 128
Data[65] = 128
Data[66] = 128
Data[67] = 128
Data[68] = 128
Data[69] = 128
Data[70] = 128
Data[71] = 128
Data[72] = 128
Data[73] = 128
Data[74] = 128
Data[75] = 128
Data[76] = 128
Data[77] = 128
Data[78] = 128
Data[79] = 128
Data[80] = 128
Data[81] = 128
Data[82] = 128
Data[83] = 128
Data[84] = 128
Data[85] = 128
Data[86] = 128
Data[87] = 128
Data[88] = 128
Data[89] = 128
Data[90] = 128
Data[91] = 128
Data[92] = 128
Data[93] = 128
Data[94] = 128
Data[95] = 128
Data[96] = 128
Data[97] = 128
Data[98] = 128
Data[99] = 128
Data[100] = 128
Data[101] = 128
Data[102] = 128
Data[103] = 128
Data[104] = 128
Data[105] = 128
Data[106] = 128
Data[107] = 128
Data[108] = 128
Data[109] = 128
Data[110] = 128
Data[111] = 128
Data[112] = 128
Data[113] = 128
Data[114] = 128
Data[115] = 128
Data[116] = 128
Data[117] = 128
Data[118] = 128
Data[119] = 128
Data[120] = 128
Data[121] = 128
Data[122] = 128
Data[123] = 128
Data[124] = 128
Data[125] = 128
Data[126] = 128
Data[127] = 128
END SAMPLE: ExplicitlyGroupedKernels
START SAMPLE Empty
END SAMPLE: Empty
START SAMPLEEmpty
END SAMPLE: Empty
START SAMPLE DynamicSharedMemory
Compilation Failed with error(s):
CS0234: The type or namespace name 'GetDynamic' does not exist in the namespace 'SharedMemory' (are you missing an assembly reference?) @ : (29,32)-(29,62)
CS0234: The type or namespace name 'GetDynamic' does not exist in the namespace 'SharedMemory' (are you missing an assembly reference?) @ : (48,32)-(48,60)
END SAMPLE: DynamicSharedMemory
START SAMPLE DeviceInfo
AcceleratorId: CPU, CPUAccelerator
Name: CPUAccelerator
MemorySize: 9223372036854775807
MaxThreadsPerGroup: 12
MaxSharedMemoryPerGroup: 2147483647
MaxGridSize: (2147483647, 2147483647, 2147483647)
MaxConstantMemory: 2147483647
WarpSize: 1
NumMultiprocessors: 1

AcceleratorId: Cuda, GeForce RTX 2060
Name: GeForce RTX 2060
MemorySize: 6442450944
MaxThreadsPerGroup: 1024
MaxSharedMemoryPerGroup: 49152
MaxGridSize: (2147483647, 65535, 65535)
MaxConstantMemory: 65536
WarpSize: 32
NumMultiprocessors: 30

Name: CPUAccelerator
MemorySize: 9223372036854775807
MaxThreadsPerGroup: 4
MaxSharedMemoryPerGroup: 2147483647
MaxGridSize: (2147483647, 2147483647, 2147483647)
MaxConstantMemory: 2147483647
WarpSize: 1
NumMultiprocessors: 1
END SAMPLE: DeviceInfo
START SAMPLE CustomIntrinsics
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Remapping: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
CodeGeneration: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Remapping: 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62
CodeGeneration: 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62
END SAMPLE: CustomIntrinsics
START SAMPLE AlgorithmsWarps
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data[0, 0] = 1
Data[0, 1] = 0
Data[0, 2] = 1
Data[0, 3] = 1
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Data[0, 0] = 32
Data[0, 1] = 0
Data[0, 2] = 1
Data[0, 3] = 1
Data[1, 0] = 32
Data[1, 1] = 1
Data[1, 2] = 2
Data[1, 3] = 1
Data[2, 0] = 32
Data[2, 1] = 2
Data[2, 2] = 3
Data[2, 3] = 1
Data[3, 0] = 32
Data[3, 1] = 3
Data[3, 2] = 4
Data[3, 3] = 1
Data[4, 0] = 32
Data[4, 1] = 4
Data[4, 2] = 5
Data[4, 3] = 1
Data[5, 0] = 32
Data[5, 1] = 5
Data[5, 2] = 6
Data[5, 3] = 1
Data[6, 0] = 32
Data[6, 1] = 6
Data[6, 2] = 7
Data[6, 3] = 1
Data[7, 0] = 32
Data[7, 1] = 7
Data[7, 2] = 8
Data[7, 3] = 1
Data[8, 0] = 32
Data[8, 1] = 8
Data[8, 2] = 9
Data[8, 3] = 1
Data[9, 0] = 32
Data[9, 1] = 9
Data[9, 2] = 10
Data[9, 3] = 1
Data[10, 0] = 32
Data[10, 1] = 10
Data[10, 2] = 11
Data[10, 3] = 1
Data[11, 0] = 32
Data[11, 1] = 11
Data[11, 2] = 12
Data[11, 3] = 1
Data[12, 0] = 32
Data[12, 1] = 12
Data[12, 2] = 13
Data[12, 3] = 1
Data[13, 0] = 32
Data[13, 1] = 13
Data[13, 2] = 14
Data[13, 3] = 1
Data[14, 0] = 32
Data[14, 1] = 14
Data[14, 2] = 15
Data[14, 3] = 1
Data[15, 0] = 32
Data[15, 1] = 15
Data[15, 2] = 16
Data[15, 3] = 1
Data[16, 0] = 32
Data[16, 1] = 16
Data[16, 2] = 17
Data[16, 3] = 1
Data[17, 0] = 32
Data[17, 1] = 17
Data[17, 2] = 18
Data[17, 3] = 1
Data[18, 0] = 32
Data[18, 1] = 18
Data[18, 2] = 19
Data[18, 3] = 1
Data[19, 0] = 32
Data[19, 1] = 19
Data[19, 2] = 20
Data[19, 3] = 1
Data[20, 0] = 32
Data[20, 1] = 20
Data[20, 2] = 21
Data[20, 3] = 1
Data[21, 0] = 32
Data[21, 1] = 21
Data[21, 2] = 22
Data[21, 3] = 1
Data[22, 0] = 32
Data[22, 1] = 22
Data[22, 2] = 23
Data[22, 3] = 1
Data[23, 0] = 32
Data[23, 1] = 23
Data[23, 2] = 24
Data[23, 3] = 1
Data[24, 0] = 32
Data[24, 1] = 24
Data[24, 2] = 25
Data[24, 3] = 1
Data[25, 0] = 32
Data[25, 1] = 25
Data[25, 2] = 26
Data[25, 3] = 1
Data[26, 0] = 32
Data[26, 1] = 26
Data[26, 2] = 27
Data[26, 3] = 1
Data[27, 0] = 32
Data[27, 1] = 27
Data[27, 2] = 28
Data[27, 3] = 1
Data[28, 0] = 32
Data[28, 1] = 28
Data[28, 2] = 29
Data[28, 3] = 1
Data[29, 0] = 32
Data[29, 1] = 29
Data[29, 2] = 30
Data[29, 3] = 1
Data[30, 0] = 32
Data[30, 1] = 30
Data[30, 2] = 31
Data[30, 3] = 1
Data[31, 0] = 32
Data[31, 1] = 31
Data[31, 2] = 32
Data[31, 3] = 1
END SAMPLE: AlgorithmsWarps
START SAMPLE AlgorithmsTransform
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'AlgorithmsTransform.IntToCustomStructTransformer'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'AlgorithmsTransform.IntToCustomStructTransformer'.
   at System.Reflection.Emit.TypeBuilder.TermCreateClass(QCallModule module, Int32 tk, ObjectHandleOnStack type)
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1,T2,T3](Accelerator accelerator, Action`4 action, KernelInfo& kernelInfo)
   at ILGPU.Algorithms.TransformExtensions.CreateRawTransformer[TSource,TTarget,TTransformer](Accelerator accelerator, Index1& minDataSize)
   at ILGPU.Algorithms.TransformExtensions.CreateTransformer[TSource,TTarget,TTransformer](Accelerator accelerator)
   at ILGPU.Algorithms.TransformExtensions.Transform[TSource,TTarget,TTransformer](Accelerator accelerator, AcceleratorStream stream, ArrayView`1 source, ArrayView`1 target, TTransformer transformer)
   at AlgorithmsTransform.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: AlgorithmsTransform
START SAMPLE AlgorithmsSequence
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data[0] = 0
Data[1] = 1
Data[2] = 2
Data[3] = 3
Data[4] = 4
Data[5] = 5
Data[6] = 6
Data[7] = 7
Data[8] = 8
Data[9] = 9
Data[10] = 10
Data[11] = 11
Data[12] = 12
Data[13] = 13
Data[14] = 14
Data[15] = 15
Data[16] = 16
Data[17] = 17
Data[18] = 18
Data[19] = 19
Data[20] = 20
Data[21] = 21
Data[22] = 22
Data[23] = 23
Data[24] = 24
Data[25] = 25
Data[26] = 26
Data[27] = 27
Data[28] = 28
Data[29] = 29
Data[30] = 30
Data[31] = 31
Data[32] = 32
Data[33] = 33
Data[34] = 34
Data[35] = 35
Data[36] = 36
Data[37] = 37
Data[38] = 38
Data[39] = 39
Data[40] = 40
Data[41] = 41
Data[42] = 42
Data[43] = 43
Data[44] = 44
Data[45] = 45
Data[46] = 46
Data[47] = 47
Data[48] = 48
Data[49] = 49
Data[50] = 50
Data[51] = 51
Data[52] = 52
Data[53] = 53
Data[54] = 54
Data[55] = 55
Data[56] = 56
Data[57] = 57
Data[58] = 58
Data[59] = 59
Data[60] = 60
Data[61] = 61
Data[62] = 62
Data[63] = 63
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'ILGPU.ArrayView`1[AlgorithmsSequence.CustomStruct]'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'ILGPU.ArrayView`1[AlgorithmsSequence.CustomStruct]'.
   at System.Reflection.Emit.TypeBuilder.TermCreateClass(QCallModule module, Int32 tk, ObjectHandleOnStack type)
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1,T2,T3,T4](Accelerator accelerator, Action`5 action, KernelInfo& kernelInfo)
   at ILGPU.Algorithms.SequenceExtensions.CreateRawSequencer[T,TSequencer](Accelerator accelerator, Index1& minDataSize)
   at ILGPU.Algorithms.SequenceExtensions.CreateSequencer[T,TSequencer](Accelerator accelerator)
   at ILGPU.Algorithms.SequenceExtensions.Sequence[T,TSequencer](Accelerator accelerator, AcceleratorStream stream, ArrayView`1 view, TSequencer sequencer)
   at AlgorithmsSequence.Program.Sequence(Accelerator accelerator)
   at AlgorithmsSequence.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: AlgorithmsSequence
START SAMPLE AlgorithmsScan
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Inclusive Scan:
Data[0] = 2
Data[1] = 4
Data[2] = 6
Data[3] = 8
Data[4] = 10
Data[5] = 12
Data[6] = 14
Data[7] = 16
Data[8] = 18
Data[9] = 20
Data[10] = 22
Data[11] = 24
Data[12] = 26
Data[13] = 28
Data[14] = 30
Data[15] = 32
Data[16] = 34
Data[17] = 36
Data[18] = 38
Data[19] = 40
Data[20] = 42
Data[21] = 44
Data[22] = 46
Data[23] = 48
Data[24] = 50
Data[25] = 52
Data[26] = 54
Data[27] = 56
Data[28] = 58
Data[29] = 60
Data[30] = 62
Data[31] = 64
Exclusive Scan:
Data[0] = 0
Data[1] = 2
Data[2] = 4
Data[3] = 6
Data[4] = 8
Data[5] = 10
Data[6] = 12
Data[7] = 14
Data[8] = 16
Data[9] = 18
Data[10] = 20
Data[11] = 22
Data[12] = 24
Data[13] = 26
Data[14] = 28
Data[15] = 30
Data[16] = 32
Data[17] = 34
Data[18] = 36
Data[19] = 38
Data[20] = 40
Data[21] = 42
Data[22] = 44
Data[23] = 46
Data[24] = 48
Data[25] = 50
Data[26] = 52
Data[27] = 54
Data[28] = 56
Data[29] = 58
Data[30] = 60
Data[31] = 62
Data[0] = 2
Data[1] = 4
Data[2] = 6
Data[3] = 8
Data[4] = 10
Data[5] = 12
Data[6] = 14
Data[7] = 16
Data[8] = 18
Data[9] = 20
Data[10] = 22
Data[11] = 24
Data[12] = 26
Data[13] = 28
Data[14] = 30
Data[15] = 32
Data[16] = 34
Data[17] = 36
Data[18] = 38
Data[19] = 40
Data[20] = 42
Data[21] = 44
Data[22] = 46
Data[23] = 48
Data[24] = 50
Data[25] = 52
Data[26] = 54
Data[27] = 56
Data[28] = 58
Data[29] = 60
Data[30] = 62
Data[31] = 64
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Inclusive Scan:
Data[0] = 2
Data[1] = 4
Data[2] = 6
Data[3] = 8
Data[4] = 10
Data[5] = 12
Data[6] = 14
Data[7] = 16
Data[8] = 18
Data[9] = 20
Data[10] = 22
Data[11] = 24
Data[12] = 26
Data[13] = 28
Data[14] = 30
Data[15] = 32
Data[16] = 34
Data[17] = 36
Data[18] = 38
Data[19] = 40
Data[20] = 42
Data[21] = 44
Data[22] = 46
Data[23] = 48
Data[24] = 50
Data[25] = 52
Data[26] = 54
Data[27] = 56
Data[28] = 58
Data[29] = 60
Data[30] = 62
Data[31] = 64
Exclusive Scan:
Data[0] = 0
Data[1] = 2
Data[2] = 4
Data[3] = 6
Data[4] = 8
Data[5] = 10
Data[6] = 12
Data[7] = 14
Data[8] = 16
Data[9] = 18
Data[10] = 20
Data[11] = 22
Data[12] = 24
Data[13] = 26
Data[14] = 28
Data[15] = 30
Data[16] = 32
Data[17] = 34
Data[18] = 36
Data[19] = 38
Data[20] = 40
Data[21] = 42
Data[22] = 44
Data[23] = 46
Data[24] = 48
Data[25] = 50
Data[26] = 52
Data[27] = 54
Data[28] = 56
Data[29] = 58
Data[30] = 60
Data[31] = 62
Data[0] = 2
Data[1] = 4
Data[2] = 6
Data[3] = 8
Data[4] = 10
Data[5] = 12
Data[6] = 14
Data[7] = 16
Data[8] = 18
Data[9] = 20
Data[10] = 22
Data[11] = 24
Data[12] = 26
Data[13] = 28
Data[14] = 30
Data[15] = 32
Data[16] = 34
Data[17] = 36
Data[18] = 38
Data[19] = 40
Data[20] = 42
Data[21] = 44
Data[22] = 46
Data[23] = 48
Data[24] = 50
Data[25] = 52
Data[26] = 54
Data[27] = 56
Data[28] = 58
Data[29] = 60
Data[30] = 62
Data[31] = 64
END SAMPLE: AlgorithmsScan
START SAMPLE AlgorithmsReduce
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Reduced[0] = 2016
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Reduced[0] = 2016
END SAMPLE: AlgorithmsReduce
START SAMPLE AlgorithmsRadixSort
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'AlgorithmsRadixSort.InverseInt32Sequencer'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'AlgorithmsRadixSort.InverseInt32Sequencer'.
   at System.Reflection.Emit.TypeBuilder.TermCreateClass(QCallModule module, Int32 tk, ObjectHandleOnStack type)
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1,T2,T3,T4](Accelerator accelerator, Action`5 action, KernelInfo& kernelInfo)
   at ILGPU.Algorithms.SequenceExtensions.CreateRawSequencer[T,TSequencer](Accelerator accelerator, Index1& minDataSize)
   at ILGPU.Algorithms.SequenceExtensions.CreateSequencer[T,TSequencer](Accelerator accelerator)
   at ILGPU.Algorithms.SequenceExtensions.Sequence[T,TSequencer](Accelerator accelerator, AcceleratorStream stream, ArrayView`1 view, TSequencer sequencer)
   at AlgorithmsRadixSort.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: AlgorithmsRadixSort
START SAMPLE AlgorithmsMath
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
KernelWithXMath
Data[0] = 0.1998354
Data[1] = 1.4353161
Data[2] = 4.121525
Data[3] = 11.176119
Data[4] = 30.261522
Data[5] = 82.10757
Data[6] = 223.02742
Data[7] = 606.08276
Data[8] = 1647.3341
Data[9] = 4477.7476
Data[10] = 12171.609
Data[11] = 33085.695
Data[12] = 89936.07
Data[13] = 244471.39
Data[14] = 664542
Data[15] = 1806412.2
Data[16] = 4910337.5
Data[17] = 13347681
Data[18] = 36282760
Data[19] = 98626760
Data[20] = 268095330
Data[21] = 728758660
Data[22] = 1.9809715E+09
Data[23] = 5.3848387E+09
Data[24] = 1.463751E+10
Data[25] = 3.9788876E+10
Data[26] = 1.0815738E+11
Data[27] = 2.9400223E+11
Data[28] = 7.991809E+11
Data[29] = 2.172399E+12
Data[30] = 5.9051926E+12
Data[31] = 1.6051978E+13
Data[32] = 4.3633718E+13
Data[33] = 1.1860874E+14
Data[34] = 3.22412E+14
Data[35] = 8.7640667E+14
Data[36] = 2.38232E+15
Data[37] = 6.475818E+15
Data[38] = 1.7603097E+16
Data[39] = 4.785018E+16
Data[40] = 1.30070276E+17
Data[41] = 3.535677E+17
Data[42] = 9.610966E+17
Data[43] = 2.6125314E+18
Data[44] = 7.1015966E+18
Data[45] = 1.930414E+19
Data[46] = 5.2474096E+19
Data[47] = 1.4263938E+20
Data[48] = 3.8773403E+20
Data[49] = 1.0539704E+21
Data[50] = 2.8649885E+21
Data[51] = 7.787846E+21
Data[52] = 2.1169562E+22
Data[53] = 5.7544834E+22
Data[54] = 1.5642308E+23
Data[55] = 4.25202E+23
Data[56] = 1.1558189E+24
Data[57] = 3.1418414E+24
Data[58] = 8.54041E+24
Data[59] = 2.3215241E+25
Data[60] = 6.3105574E+25
Data[61] = 1.7153873E+26
Data[62] = 4.662906E+26
Data[63] = 1.2675093E+27
KernelWithMath
Data[0] = 0.1998354
Data[1] = 1.4353162
Data[2] = 4.121525
Data[3] = 11.176119
Data[4] = 30.261522
Data[5] = 82.10757
Data[6] = 223.0274
Data[7] = 606.08276
Data[8] = 1647.3342
Data[9] = 4477.7476
Data[10] = 12171.609
Data[11] = 33085.69
Data[12] = 89936.06
Data[13] = 244471.4
Data[14] = 664542
Data[15] = 1806412.2
Data[16] = 4910337.5
Data[17] = 13347681
Data[18] = 36282760
Data[19] = 98626760
Data[20] = 268095330
Data[21] = 728758660
Data[22] = 1.9809715E+09
Data[23] = 5.3848387E+09
Data[24] = 1.463751E+10
Data[25] = 3.9788876E+10
Data[26] = 1.0815738E+11
Data[27] = 2.9400223E+11
Data[28] = 7.991809E+11
Data[29] = 2.172399E+12
Data[30] = 5.9051926E+12
Data[31] = 1.6051978E+13
Data[32] = 4.3633718E+13
Data[33] = 1.1860874E+14
Data[34] = 3.22412E+14
Data[35] = 8.7640667E+14
Data[36] = 2.38232E+15
Data[37] = 6.475818E+15
Data[38] = 1.7603097E+16
Data[39] = 4.785018E+16
Data[40] = 1.30070276E+17
Data[41] = 3.535677E+17
Data[42] = 9.610966E+17
Data[43] = 2.6125314E+18
Data[44] = 7.1015966E+18
Data[45] = 1.930414E+19
Data[46] = 5.2474096E+19
Data[47] = 1.4263938E+20
Data[48] = 3.8773403E+20
Data[49] = 1.0539704E+21
Data[50] = 2.8649885E+21
Data[51] = 7.787846E+21
Data[52] = 2.1169562E+22
Data[53] = 5.7544834E+22
Data[54] = 1.5642308E+23
Data[55] = 4.25202E+23
Data[56] = 1.1558189E+24
Data[57] = 3.1418414E+24
Data[58] = 8.54041E+24
Data[59] = 2.3215241E+25
Data[60] = 6.3105574E+25
Data[61] = 1.7153873E+26
Data[62] = 4.662906E+26
Data[63] = 1.2675093E+27
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
KernelWithXMath
Data[0] = 0.19983545
Data[1] = 1.4353162
Data[2] = 4.1215253
Data[3] = 11.176118
Data[4] = 30.261526
Data[5] = 82.107574
Data[6] = 223.02747
Data[7] = 606.0827
Data[8] = 1647.3339
Data[9] = 4477.7456
Data[10] = 12171.608
Data[11] = 33085.707
Data[12] = 89936.016
Data[13] = 244471.36
Data[14] = 664542.2
Data[15] = 1806411.1
Data[16] = 4910336
Data[17] = 13347683
Data[18] = 36282732
Data[19] = 98626730
Data[20] = 268095340
Data[21] = 728758000
Data[22] = 1.9809705E+09
Data[23] = 5.384838E+09
Data[24] = 1.4637514E+10
Data[25] = 3.9788904E+10
Data[26] = 1.08157215E+11
Data[27] = 2.940019E+11
Data[28] = 7.991803E+11
Data[29] = 2.1723982E+12
Data[30] = 5.905193E+12
Data[31] = 1.6051985E+13
Data[32] = 4.363372E+13
Data[33] = 1.186088E+14
Data[34] = 3.2241142E+14
Data[35] = 8.7640546E+14
Data[36] = 2.382318E+15
Data[37] = 6.475815E+15
Data[38] = 1.7603095E+16
Data[39] = 4.785019E+16
Data[40] = 1.3007036E+17
Data[41] = 3.535671E+17
Data[42] = 9.610954E+17
Data[43] = 2.6125292E+18
Data[44] = 7.101594E+18
Data[45] = 1.930414E+19
Data[46] = 5.2474118E+19
Data[47] = 1.4263949E+20
Data[48] = 3.877345E+20
Data[49] = 1.0539721E+21
Data[50] = 2.8649793E+21
Data[51] = 7.787824E+21
Data[52] = 2.1169508E+22
Data[53] = 5.7544713E+22
Data[54] = 1.564228E+23
Data[55] = 4.2520145E+23
Data[56] = 1.15581786E+24
Data[57] = 3.14184E+24
Data[58] = 8.5404096E+24
Data[59] = 2.321525E+25
Data[60] = 6.3105615E+25
Data[61] = 1.7153893E+26
Data[62] = 4.6629134E+26
Data[63] = 1.267505E+27
KernelWithMath
Data[0] = 0.1998354
Data[1] = 1.4353162
Data[2] = 4.121525
Data[3] = 11.176119
Data[4] = 30.261522
Data[5] = 82.10757
Data[6] = 223.0274
Data[7] = 606.08276
Data[8] = 1647.3342
Data[9] = 4477.7476
Data[10] = 12171.609
Data[11] = 33085.69
Data[12] = 89936.06
Data[13] = 244471.4
Data[14] = 664542
Data[15] = 1806412.2
Data[16] = 4910337.5
Data[17] = 13347681
Data[18] = 36282760
Data[19] = 98626760
Data[20] = 268095330
Data[21] = 728758660
Data[22] = 1.9809715E+09
Data[23] = 5.3848387E+09
Data[24] = 1.463751E+10
Data[25] = 3.9788876E+10
Data[26] = 1.0815738E+11
Data[27] = 2.9400223E+11
Data[28] = 7.991809E+11
Data[29] = 2.172399E+12
Data[30] = 5.9051926E+12
Data[31] = 1.6051978E+13
Data[32] = 4.3633718E+13
Data[33] = 1.1860874E+14
Data[34] = 3.22412E+14
Data[35] = 8.7640667E+14
Data[36] = 2.38232E+15
Data[37] = 6.475818E+15
Data[38] = 1.7603097E+16
Data[39] = 4.785018E+16
Data[40] = 1.30070276E+17
Data[41] = 3.535677E+17
Data[42] = 9.610966E+17
Data[43] = 2.6125314E+18
Data[44] = 7.1015966E+18
Data[45] = 1.930414E+19
Data[46] = 5.2474096E+19
Data[47] = 1.4263938E+20
Data[48] = 3.8773403E+20
Data[49] = 1.0539704E+21
Data[50] = 2.8649885E+21
Data[51] = 7.787846E+21
Data[52] = 2.1169562E+22
Data[53] = 5.7544834E+22
Data[54] = 1.5642308E+23
Data[55] = 4.25202E+23
Data[56] = 1.1558189E+24
Data[57] = 3.1418414E+24
Data[58] = 8.54041E+24
Data[59] = 2.3215241E+25
Data[60] = 6.3105574E+25
Data[61] = 1.7153873E+26
Data[62] = 4.662906E+26
Data[63] = 1.2675093E+27
END SAMPLE: AlgorithmsMath
START SAMPLE AlgorithmsInitialize
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data[0] = 23
Data[1] = 23
Data[2] = 23
Data[3] = 23
Data[4] = 23
Data[5] = 23
Data[6] = 23
Data[7] = 23
Data[8] = 23
Data[9] = 23
Data[10] = 23
Data[11] = 23
Data[12] = 23
Data[13] = 23
Data[14] = 23
Data[15] = 23
Data[16] = 23
Data[17] = 23
Data[18] = 23
Data[19] = 23
Data[20] = 23
Data[21] = 23
Data[22] = 23
Data[23] = 23
Data[24] = 23
Data[25] = 23
Data[26] = 23
Data[27] = 23
Data[28] = 23
Data[29] = 23
Data[30] = 23
Data[31] = 23
Data[32] = 23
Data[33] = 23
Data[34] = 23
Data[35] = 23
Data[36] = 23
Data[37] = 23
Data[38] = 23
Data[39] = 23
Data[40] = 23
Data[41] = 23
Data[42] = 23
Data[43] = 23
Data[44] = 23
Data[45] = 23
Data[46] = 23
Data[47] = 23
Data[48] = 23
Data[49] = 23
Data[50] = 23
Data[51] = 23
Data[52] = 23
Data[53] = 23
Data[54] = 23
Data[55] = 23
Data[56] = 23
Data[57] = 23
Data[58] = 23
Data[59] = 23
Data[60] = 23
Data[61] = 23
Data[62] = 23
Data[63] = 23
Data2[0] = First: 23, Second: 42
Data2[1] = First: 23, Second: 42
Data2[2] = First: 23, Second: 42
Data2[3] = First: 23, Second: 42
Data2[4] = First: 23, Second: 42
Data2[5] = First: 23, Second: 42
Data2[6] = First: 23, Second: 42
Data2[7] = First: 23, Second: 42
Data2[8] = First: 23, Second: 42
Data2[9] = First: 23, Second: 42
Data2[10] = First: 23, Second: 42
Data2[11] = First: 23, Second: 42
Data2[12] = First: 23, Second: 42
Data2[13] = First: 23, Second: 42
Data2[14] = First: 23, Second: 42
Data2[15] = First: 23, Second: 42
Data2[16] = First: 23, Second: 42
Data2[17] = First: 23, Second: 42
Data2[18] = First: 23, Second: 42
Data2[19] = First: 23, Second: 42
Data2[20] = First: 23, Second: 42
Data2[21] = First: 23, Second: 42
Data2[22] = First: 23, Second: 42
Data2[23] = First: 23, Second: 42
Data2[24] = First: 23, Second: 42
Data2[25] = First: 23, Second: 42
Data2[26] = First: 23, Second: 42
Data2[27] = First: 23, Second: 42
Data2[28] = First: 23, Second: 42
Data2[29] = First: 23, Second: 42
Data2[30] = First: 23, Second: 42
Data2[31] = First: 23, Second: 42
Data2[32] = First: 23, Second: 42
Data2[33] = First: 23, Second: 42
Data2[34] = First: 23, Second: 42
Data2[35] = First: 23, Second: 42
Data2[36] = First: 23, Second: 42
Data2[37] = First: 23, Second: 42
Data2[38] = First: 23, Second: 42
Data2[39] = First: 23, Second: 42
Data2[40] = First: 23, Second: 42
Data2[41] = First: 23, Second: 42
Data2[42] = First: 23, Second: 42
Data2[43] = First: 23, Second: 42
Data2[44] = First: 23, Second: 42
Data2[45] = First: 23, Second: 42
Data2[46] = First: 23, Second: 42
Data2[47] = First: 23, Second: 42
Data2[48] = First: 23, Second: 42
Data2[49] = First: 23, Second: 42
Data2[50] = First: 23, Second: 42
Data2[51] = First: 23, Second: 42
Data2[52] = First: 23, Second: 42
Data2[53] = First: 23, Second: 42
Data2[54] = First: 23, Second: 42
Data2[55] = First: 23, Second: 42
Data2[56] = First: 23, Second: 42
Data2[57] = First: 23, Second: 42
Data2[58] = First: 23, Second: 42
Data2[59] = First: 23, Second: 42
Data2[60] = First: 23, Second: 42
Data2[61] = First: 23, Second: 42
Data2[62] = First: 23, Second: 42
Data2[63] = First: 23, Second: 42
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Data[0] = 23
Data[1] = 23
Data[2] = 23
Data[3] = 23
Data[4] = 23
Data[5] = 23
Data[6] = 23
Data[7] = 23
Data[8] = 23
Data[9] = 23
Data[10] = 23
Data[11] = 23
Data[12] = 23
Data[13] = 23
Data[14] = 23
Data[15] = 23
Data[16] = 23
Data[17] = 23
Data[18] = 23
Data[19] = 23
Data[20] = 23
Data[21] = 23
Data[22] = 23
Data[23] = 23
Data[24] = 23
Data[25] = 23
Data[26] = 23
Data[27] = 23
Data[28] = 23
Data[29] = 23
Data[30] = 23
Data[31] = 23
Data[32] = 23
Data[33] = 23
Data[34] = 23
Data[35] = 23
Data[36] = 23
Data[37] = 23
Data[38] = 23
Data[39] = 23
Data[40] = 23
Data[41] = 23
Data[42] = 23
Data[43] = 23
Data[44] = 23
Data[45] = 23
Data[46] = 23
Data[47] = 23
Data[48] = 23
Data[49] = 23
Data[50] = 23
Data[51] = 23
Data[52] = 23
Data[53] = 23
Data[54] = 23
Data[55] = 23
Data[56] = 23
Data[57] = 23
Data[58] = 23
Data[59] = 23
Data[60] = 23
Data[61] = 23
Data[62] = 23
Data[63] = 23
Data2[0] = First: 23, Second: 42
Data2[1] = First: 23, Second: 42
Data2[2] = First: 23, Second: 42
Data2[3] = First: 23, Second: 42
Data2[4] = First: 23, Second: 42
Data2[5] = First: 23, Second: 42
Data2[6] = First: 23, Second: 42
Data2[7] = First: 23, Second: 42
Data2[8] = First: 23, Second: 42
Data2[9] = First: 23, Second: 42
Data2[10] = First: 23, Second: 42
Data2[11] = First: 23, Second: 42
Data2[12] = First: 23, Second: 42
Data2[13] = First: 23, Second: 42
Data2[14] = First: 23, Second: 42
Data2[15] = First: 23, Second: 42
Data2[16] = First: 23, Second: 42
Data2[17] = First: 23, Second: 42
Data2[18] = First: 23, Second: 42
Data2[19] = First: 23, Second: 42
Data2[20] = First: 23, Second: 42
Data2[21] = First: 23, Second: 42
Data2[22] = First: 23, Second: 42
Data2[23] = First: 23, Second: 42
Data2[24] = First: 23, Second: 42
Data2[25] = First: 23, Second: 42
Data2[26] = First: 23, Second: 42
Data2[27] = First: 23, Second: 42
Data2[28] = First: 23, Second: 42
Data2[29] = First: 23, Second: 42
Data2[30] = First: 23, Second: 42
Data2[31] = First: 23, Second: 42
Data2[32] = First: 23, Second: 42
Data2[33] = First: 23, Second: 42
Data2[34] = First: 23, Second: 42
Data2[35] = First: 23, Second: 42
Data2[36] = First: 23, Second: 42
Data2[37] = First: 23, Second: 42
Data2[38] = First: 23, Second: 42
Data2[39] = First: 23, Second: 42
Data2[40] = First: 23, Second: 42
Data2[41] = First: 23, Second: 42
Data2[42] = First: 23, Second: 42
Data2[43] = First: 23, Second: 42
Data2[44] = First: 23, Second: 42
Data2[45] = First: 23, Second: 42
Data2[46] = First: 23, Second: 42
Data2[47] = First: 23, Second: 42
Data2[48] = First: 23, Second: 42
Data2[49] = First: 23, Second: 42
Data2[50] = First: 23, Second: 42
Data2[51] = First: 23, Second: 42
Data2[52] = First: 23, Second: 42
Data2[53] = First: 23, Second: 42
Data2[54] = First: 23, Second: 42
Data2[55] = First: 23, Second: 42
Data2[56] = First: 23, Second: 42
Data2[57] = First: 23, Second: 42
Data2[58] = First: 23, Second: 42
Data2[59] = First: 23, Second: 42
Data2[60] = First: 23, Second: 42
Data2[61] = First: 23, Second: 42
Data2[62] = First: 23, Second: 42
Data2[63] = First: 23, Second: 42
END SAMPLE: AlgorithmsInitialize
START SAMPLE AlgorithmsGroups
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Data[0, 0] = 12
Data[0, 1] = 0
Data[0, 2] = 1
Data[0, 3] = 1
Data[1, 0] = 12
Data[1, 1] = 1
Data[1, 2] = 2
Data[1, 3] = 1
Data[2, 0] = 12
Data[2, 1] = 2
Data[2, 2] = 3
Data[2, 3] = 1
Data[3, 0] = 12
Data[3, 1] = 3
Data[3, 2] = 4
Data[3, 3] = 1
Data[4, 0] = 12
Data[4, 1] = 4
Data[4, 2] = 5
Data[4, 3] = 1
Data[5, 0] = 12
Data[5, 1] = 5
Data[5, 2] = 6
Data[5, 3] = 1
Data[6, 0] = 12
Data[6, 1] = 6
Data[6, 2] = 7
Data[6, 3] = 1
Data[7, 0] = 12
Data[7, 1] = 7
Data[7, 2] = 8
Data[7, 3] = 1
Data[8, 0] = 12
Data[8, 1] = 8
Data[8, 2] = 9
Data[8, 3] = 1
Data[9, 0] = 12
Data[9, 1] = 9
Data[9, 2] = 10
Data[9, 3] = 1
Data[10, 0] = 12
Data[10, 1] = 10
Data[10, 2] = 11
Data[10, 3] = 1
Data[11, 0] = 12
Data[11, 1] = 11
Data[11, 2] = 12
Data[11, 3] = 1
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Data[0, 0] = 1024
Data[0, 1] = 0
Data[0, 2] = 1
Data[0, 3] = 1
Data[1, 0] = 1024
Data[1, 1] = 1
Data[1, 2] = 2
Data[1, 3] = 1
Data[2, 0] = 1024
Data[2, 1] = 2
Data[2, 2] = 3
Data[2, 3] = 1
Data[3, 0] = 1024
Data[3, 1] = 3
Data[3, 2] = 4
Data[3, 3] = 1
Data[4, 0] = 1024
Data[4, 1] = 4
Data[4, 2] = 5
Data[4, 3] = 1
Data[5, 0] = 1024
Data[5, 1] = 5
Data[5, 2] = 6
Data[5, 3] = 1
Data[6, 0] = 1024
Data[6, 1] = 6
Data[6, 2] = 7
Data[6, 3] = 1
Data[7, 0] = 1024
Data[7, 1] = 7
Data[7, 2] = 8
Data[7, 3] = 1
Data[8, 0] = 1024
Data[8, 1] = 8
Data[8, 2] = 9
Data[8, 3] = 1
Data[9, 0] = 1024
Data[9, 1] = 9
Data[9, 2] = 10
Data[9, 3] = 1
Data[10, 0] = 1024
Data[10, 1] = 10
Data[10, 2] = 11
Data[10, 3] = 1
Data[11, 0] = 1024
Data[11, 1] = 11
Data[11, 2] = 12
Data[11, 3] = 1
Data[12, 0] = 1024
Data[12, 1] = 12
Data[12, 2] = 13
Data[12, 3] = 1
Data[13, 0] = 1024
Data[13, 1] = 13
Data[13, 2] = 14
Data[13, 3] = 1
Data[14, 0] = 1024
Data[14, 1] = 14
Data[14, 2] = 15
Data[14, 3] = 1
Data[15, 0] = 1024
Data[15, 1] = 15
Data[15, 2] = 16
Data[15, 3] = 1
Data[16, 0] = 1024
Data[16, 1] = 16
Data[16, 2] = 17
Data[16, 3] = 1
Data[17, 0] = 1024
Data[17, 1] = 17
Data[17, 2] = 18
Data[17, 3] = 1
Data[18, 0] = 1024
Data[18, 1] = 18
Data[18, 2] = 19
Data[18, 3] = 1
Data[19, 0] = 1024
Data[19, 1] = 19
Data[19, 2] = 20
Data[19, 3] = 1
Data[20, 0] = 1024
Data[20, 1] = 20
Data[20, 2] = 21
Data[20, 3] = 1
Data[21, 0] = 1024
Data[21, 1] = 21
Data[21, 2] = 22
Data[21, 3] = 1
Data[22, 0] = 1024
Data[22, 1] = 22
Data[22, 2] = 23
Data[22, 3] = 1
Data[23, 0] = 1024
Data[23, 1] = 23
Data[23, 2] = 24
Data[23, 3] = 1
Data[24, 0] = 1024
Data[24, 1] = 24
Data[24, 2] = 25
Data[24, 3] = 1
Data[25, 0] = 1024
Data[25, 1] = 25
Data[25, 2] = 26
Data[25, 3] = 1
Data[26, 0] = 1024
Data[26, 1] = 26
Data[26, 2] = 27
Data[26, 3] = 1
Data[27, 0] = 1024
Data[27, 1] = 27
Data[27, 2] = 28
Data[27, 3] = 1
Data[28, 0] = 1024
Data[28, 1] = 28
Data[28, 2] = 29
Data[28, 3] = 1
Data[29, 0] = 1024
Data[29, 1] = 29
Data[29, 2] = 30
Data[29, 3] = 1
Data[30, 0] = 1024
Data[30, 1] = 30
Data[30, 2] = 31
Data[30, 3] = 1
Data[31, 0] = 1024
Data[31, 1] = 31
Data[31, 2] = 32
Data[31, 3] = 1
Data[32, 0] = 1024
Data[32, 1] = 32
Data[32, 2] = 33
Data[32, 3] = 1
Data[33, 0] = 1024
Data[33, 1] = 33
Data[33, 2] = 34
Data[33, 3] = 1
Data[34, 0] = 1024
Data[34, 1] = 34
Data[34, 2] = 35
Data[34, 3] = 1
Data[35, 0] = 1024
Data[35, 1] = 35
Data[35, 2] = 36
Data[35, 3] = 1
Data[36, 0] = 1024
Data[36, 1] = 36
Data[36, 2] = 37
Data[36, 3] = 1
Data[37, 0] = 1024
Data[37, 1] = 37
Data[37, 2] = 38
Data[37, 3] = 1
Data[38, 0] = 1024
Data[38, 1] = 38
Data[38, 2] = 39
Data[38, 3] = 1
Data[39, 0] = 1024
Data[39, 1] = 39
Data[39, 2] = 40
Data[39, 3] = 1
Data[40, 0] = 1024
Data[40, 1] = 40
Data[40, 2] = 41
Data[40, 3] = 1
Data[41, 0] = 1024
Data[41, 1] = 41
Data[41, 2] = 42
Data[41, 3] = 1
Data[42, 0] = 1024
Data[42, 1] = 42
Data[42, 2] = 43
Data[42, 3] = 1
Data[43, 0] = 1024
Data[43, 1] = 43
Data[43, 2] = 44
Data[43, 3] = 1
Data[44, 0] = 1024
Data[44, 1] = 44
Data[44, 2] = 45
Data[44, 3] = 1
Data[45, 0] = 1024
Data[45, 1] = 45
Data[45, 2] = 46
Data[45, 3] = 1
Data[46, 0] = 1024
Data[46, 1] = 46
Data[46, 2] = 47
Data[46, 3] = 1
Data[47, 0] = 1024
Data[47, 1] = 47
Data[47, 2] = 48
Data[47, 3] = 1
Data[48, 0] = 1024
Data[48, 1] = 48
Data[48, 2] = 49
Data[48, 3] = 1
Data[49, 0] = 1024
Data[49, 1] = 49
Data[49, 2] = 50
Data[49, 3] = 1
Data[50, 0] = 1024
Data[50, 1] = 50
Data[50, 2] = 51
Data[50, 3] = 1
Data[51, 0] = 1024
Data[51, 1] = 51
Data[51, 2] = 52
Data[51, 3] = 1
Data[52, 0] = 1024
Data[52, 1] = 52
Data[52, 2] = 53
Data[52, 3] = 1
Data[53, 0] = 1024
Data[53, 1] = 53
Data[53, 2] = 54
Data[53, 3] = 1
Data[54, 0] = 1024
Data[54, 1] = 54
Data[54, 2] = 55
Data[54, 3] = 1
Data[55, 0] = 1024
Data[55, 1] = 55
Data[55, 2] = 56
Data[55, 3] = 1
Data[56, 0] = 1024
Data[56, 1] = 56
Data[56, 2] = 57
Data[56, 3] = 1
Data[57, 0] = 1024
Data[57, 1] = 57
Data[57, 2] = 58
Data[57, 3] = 1
Data[58, 0] = 1024
Data[58, 1] = 58
Data[58, 2] = 59
Data[58, 3] = 1
Data[59, 0] = 1024
Data[59, 1] = 59
Data[59, 2] = 60
Data[59, 3] = 1
Data[60, 0] = 1024
Data[60, 1] = 60
Data[60, 2] = 61
Data[60, 3] = 1
Data[61, 0] = 1024
Data[61, 1] = 61
Data[61, 2] = 62
Data[61, 3] = 1
Data[62, 0] = 1024
Data[62, 1] = 62
Data[62, 2] = 63
Data[62, 3] = 1
Data[63, 0] = 1024
Data[63, 1] = 63
Data[63, 2] = 64
Data[63, 3] = 1
Data[64, 0] = 1024
Data[64, 1] = 64
Data[64, 2] = 65
Data[64, 3] = 1
Data[65, 0] = 1024
Data[65, 1] = 65
Data[65, 2] = 66
Data[65, 3] = 1
Data[66, 0] = 1024
Data[66, 1] = 66
Data[66, 2] = 67
Data[66, 3] = 1
Data[67, 0] = 1024
Data[67, 1] = 67
Data[67, 2] = 68
Data[67, 3] = 1
Data[68, 0] = 1024
Data[68, 1] = 68
Data[68, 2] = 69
Data[68, 3] = 1
Data[69, 0] = 1024
Data[69, 1] = 69
Data[69, 2] = 70
Data[69, 3] = 1
Data[70, 0] = 1024
Data[70, 1] = 70
Data[70, 2] = 71
Data[70, 3] = 1
Data[71, 0] = 1024
Data[71, 1] = 71
Data[71, 2] = 72
Data[71, 3] = 1
Data[72, 0] = 1024
Data[72, 1] = 72
Data[72, 2] = 73
Data[72, 3] = 1
Data[73, 0] = 1024
Data[73, 1] = 73
Data[73, 2] = 74
Data[73, 3] = 1
Data[74, 0] = 1024
Data[74, 1] = 74
Data[74, 2] = 75
Data[74, 3] = 1
Data[75, 0] = 1024
Data[75, 1] = 75
Data[75, 2] = 76
Data[75, 3] = 1
Data[76, 0] = 1024
Data[76, 1] = 76
Data[76, 2] = 77
Data[76, 3] = 1
Data[77, 0] = 1024
Data[77, 1] = 77
Data[77, 2] = 78
Data[77, 3] = 1
Data[78, 0] = 1024
Data[78, 1] = 78
Data[78, 2] = 79
Data[78, 3] = 1
Data[79, 0] = 1024
Data[79, 1] = 79
Data[79, 2] = 80
Data[79, 3] = 1
Data[80, 0] = 1024
Data[80, 1] = 80
Data[80, 2] = 81
Data[80, 3] = 1
Data[81, 0] = 1024
Data[81, 1] = 81
Data[81, 2] = 82
Data[81, 3] = 1
Data[82, 0] = 1024
Data[82, 1] = 82
Data[82, 2] = 83
Data[82, 3] = 1
Data[83, 0] = 1024
Data[83, 1] = 83
Data[83, 2] = 84
Data[83, 3] = 1
Data[84, 0] = 1024
Data[84, 1] = 84
Data[84, 2] = 85
Data[84, 3] = 1
Data[85, 0] = 1024
Data[85, 1] = 85
Data[85, 2] = 86
Data[85, 3] = 1
Data[86, 0] = 1024
Data[86, 1] = 86
Data[86, 2] = 87
Data[86, 3] = 1
Data[87, 0] = 1024
Data[87, 1] = 87
Data[87, 2] = 88
Data[87, 3] = 1
Data[88, 0] = 1024
Data[88, 1] = 88
Data[88, 2] = 89
Data[88, 3] = 1
Data[89, 0] = 1024
Data[89, 1] = 89
Data[89, 2] = 90
Data[89, 3] = 1
Data[90, 0] = 1024
Data[90, 1] = 90
Data[90, 2] = 91
Data[90, 3] = 1
Data[91, 0] = 1024
Data[91, 1] = 91
Data[91, 2] = 92
Data[91, 3] = 1
Data[92, 0] = 1024
Data[92, 1] = 92
Data[92, 2] = 93
Data[92, 3] = 1
Data[93, 0] = 1024
Data[93, 1] = 93
Data[93, 2] = 94
Data[93, 3] = 1
Data[94, 0] = 1024
Data[94, 1] = 94
Data[94, 2] = 95
Data[94, 3] = 1
Data[95, 0] = 1024
Data[95, 1] = 95
Data[95, 2] = 96
Data[95, 3] = 1
Data[96, 0] = 1024
Data[96, 1] = 96
Data[96, 2] = 97
Data[96, 3] = 1
Data[97, 0] = 1024
Data[97, 1] = 97
Data[97, 2] = 98
Data[97, 3] = 1
Data[98, 0] = 1024
Data[98, 1] = 98
Data[98, 2] = 99
Data[98, 3] = 1
Data[99, 0] = 1024
Data[99, 1] = 99
Data[99, 2] = 100
Data[99, 3] = 1
Data[100, 0] = 1024
Data[100, 1] = 100
Data[100, 2] = 101
Data[100, 3] = 1
Data[101, 0] = 1024
Data[101, 1] = 101
Data[101, 2] = 102
Data[101, 3] = 1
Data[102, 0] = 1024
Data[102, 1] = 102
Data[102, 2] = 103
Data[102, 3] = 1
Data[103, 0] = 1024
Data[103, 1] = 103
Data[103, 2] = 104
Data[103, 3] = 1
Data[104, 0] = 1024
Data[104, 1] = 104
Data[104, 2] = 105
Data[104, 3] = 1
Data[105, 0] = 1024
Data[105, 1] = 105
Data[105, 2] = 106
Data[105, 3] = 1
Data[106, 0] = 1024
Data[106, 1] = 106
Data[106, 2] = 107
Data[106, 3] = 1
Data[107, 0] = 1024
Data[107, 1] = 107
Data[107, 2] = 108
Data[107, 3] = 1
Data[108, 0] = 1024
Data[108, 1] = 108
Data[108, 2] = 109
Data[108, 3] = 1
Data[109, 0] = 1024
Data[109, 1] = 109
Data[109, 2] = 110
Data[109, 3] = 1
Data[110, 0] = 1024
Data[110, 1] = 110
Data[110, 2] = 111
Data[110, 3] = 1
Data[111, 0] = 1024
Data[111, 1] = 111
Data[111, 2] = 112
Data[111, 3] = 1
Data[112, 0] = 1024
Data[112, 1] = 112
Data[112, 2] = 113
Data[112, 3] = 1
Data[113, 0] = 1024
Data[113, 1] = 113
Data[113, 2] = 114
Data[113, 3] = 1
Data[114, 0] = 1024
Data[114, 1] = 114
Data[114, 2] = 115
Data[114, 3] = 1
Data[115, 0] = 1024
Data[115, 1] = 115
Data[115, 2] = 116
Data[115, 3] = 1
Data[116, 0] = 1024
Data[116, 1] = 116
Data[116, 2] = 117
Data[116, 3] = 1
Data[117, 0] = 1024
Data[117, 1] = 117
Data[117, 2] = 118
Data[117, 3] = 1
Data[118, 0] = 1024
Data[118, 1] = 118
Data[118, 2] = 119
Data[118, 3] = 1
Data[119, 0] = 1024
Data[119, 1] = 119
Data[119, 2] = 120
Data[119, 3] = 1
Data[120, 0] = 1024
Data[120, 1] = 120
Data[120, 2] = 121
Data[120, 3] = 1
Data[121, 0] = 1024
Data[121, 1] = 121
Data[121, 2] = 122
Data[121, 3] = 1
Data[122, 0] = 1024
Data[122, 1] = 122
Data[122, 2] = 123
Data[122, 3] = 1
Data[123, 0] = 1024
Data[123, 1] = 123
Data[123, 2] = 124
Data[123, 3] = 1
Data[124, 0] = 1024
Data[124, 1] = 124
Data[124, 2] = 125
Data[124, 3] = 1
Data[125, 0] = 1024
Data[125, 1] = 125
Data[125, 2] = 126
Data[125, 3] = 1
Data[126, 0] = 1024
Data[126, 1] = 126
Data[126, 2] = 127
Data[126, 3] = 1
Data[127, 0] = 1024
Data[127, 1] = 127
Data[127, 2] = 128
Data[127, 3] = 1
Data[128, 0] = 1024
Data[128, 1] = 128
Data[128, 2] = 129
Data[128, 3] = 1
Data[129, 0] = 1024
Data[129, 1] = 129
Data[129, 2] = 130
Data[129, 3] = 1
Data[130, 0] = 1024
Data[130, 1] = 130
Data[130, 2] = 131
Data[130, 3] = 1
Data[131, 0] = 1024
Data[131, 1] = 131
Data[131, 2] = 132
Data[131, 3] = 1
Data[132, 0] = 1024
Data[132, 1] = 132
Data[132, 2] = 133
Data[132, 3] = 1
Data[133, 0] = 1024
Data[133, 1] = 133
Data[133, 2] = 134
Data[133, 3] = 1
Data[134, 0] = 1024
Data[134, 1] = 134
Data[134, 2] = 135
Data[134, 3] = 1
Data[135, 0] = 1024
Data[135, 1] = 135
Data[135, 2] = 136
Data[135, 3] = 1
Data[136, 0] = 1024
Data[136, 1] = 136
Data[136, 2] = 137
Data[136, 3] = 1
Data[137, 0] = 1024
Data[137, 1] = 137
Data[137, 2] = 138
Data[137, 3] = 1
Data[138, 0] = 1024
Data[138, 1] = 138
Data[138, 2] = 139
Data[138, 3] = 1
Data[139, 0] = 1024
Data[139, 1] = 139
Data[139, 2] = 140
Data[139, 3] = 1
Data[140, 0] = 1024
Data[140, 1] = 140
Data[140, 2] = 141
Data[140, 3] = 1
Data[141, 0] = 1024
Data[141, 1] = 141
Data[141, 2] = 142
Data[141, 3] = 1
Data[142, 0] = 1024
Data[142, 1] = 142
Data[142, 2] = 143
Data[142, 3] = 1
Data[143, 0] = 1024
Data[143, 1] = 143
Data[143, 2] = 144
Data[143, 3] = 1
Data[144, 0] = 1024
Data[144, 1] = 144
Data[144, 2] = 145
Data[144, 3] = 1
Data[145, 0] = 1024
Data[145, 1] = 145
Data[145, 2] = 146
Data[145, 3] = 1
Data[146, 0] = 1024
Data[146, 1] = 146
Data[146, 2] = 147
Data[146, 3] = 1
Data[147, 0] = 1024
Data[147, 1] = 147
Data[147, 2] = 148
Data[147, 3] = 1
Data[148, 0] = 1024
Data[148, 1] = 148
Data[148, 2] = 149
Data[148, 3] = 1
Data[149, 0] = 1024
Data[149, 1] = 149
Data[149, 2] = 150
Data[149, 3] = 1
Data[150, 0] = 1024
Data[150, 1] = 150
Data[150, 2] = 151
Data[150, 3] = 1
Data[151, 0] = 1024
Data[151, 1] = 151
Data[151, 2] = 152
Data[151, 3] = 1
Data[152, 0] = 1024
Data[152, 1] = 152
Data[152, 2] = 153
Data[152, 3] = 1
Data[153, 0] = 1024
Data[153, 1] = 153
Data[153, 2] = 154
Data[153, 3] = 1
Data[154, 0] = 1024
Data[154, 1] = 154
Data[154, 2] = 155
Data[154, 3] = 1
Data[155, 0] = 1024
Data[155, 1] = 155
Data[155, 2] = 156
Data[155, 3] = 1
Data[156, 0] = 1024
Data[156, 1] = 156
Data[156, 2] = 157
Data[156, 3] = 1
Data[157, 0] = 1024
Data[157, 1] = 157
Data[157, 2] = 158
Data[157, 3] = 1
Data[158, 0] = 1024
Data[158, 1] = 158
Data[158, 2] = 159
Data[158, 3] = 1
Data[159, 0] = 1024
Data[159, 1] = 159
Data[159, 2] = 160
Data[159, 3] = 1
Data[160, 0] = 1024
Data[160, 1] = 160
Data[160, 2] = 161
Data[160, 3] = 1
Data[161, 0] = 1024
Data[161, 1] = 161
Data[161, 2] = 162
Data[161, 3] = 1
Data[162, 0] = 1024
Data[162, 1] = 162
Data[162, 2] = 163
Data[162, 3] = 1
Data[163, 0] = 1024
Data[163, 1] = 163
Data[163, 2] = 164
Data[163, 3] = 1
Data[164, 0] = 1024
Data[164, 1] = 164
Data[164, 2] = 165
Data[164, 3] = 1
Data[165, 0] = 1024
Data[165, 1] = 165
Data[165, 2] = 166
Data[165, 3] = 1
Data[166, 0] = 1024
Data[166, 1] = 166
Data[166, 2] = 167
Data[166, 3] = 1
Data[167, 0] = 1024
Data[167, 1] = 167
Data[167, 2] = 168
Data[167, 3] = 1
Data[168, 0] = 1024
Data[168, 1] = 168
Data[168, 2] = 169
Data[168, 3] = 1
Data[169, 0] = 1024
Data[169, 1] = 169
Data[169, 2] = 170
Data[169, 3] = 1
Data[170, 0] = 1024
Data[170, 1] = 170
Data[170, 2] = 171
Data[170, 3] = 1
Data[171, 0] = 1024
Data[171, 1] = 171
Data[171, 2] = 172
Data[171, 3] = 1
Data[172, 0] = 1024
Data[172, 1] = 172
Data[172, 2] = 173
Data[172, 3] = 1
Data[173, 0] = 1024
Data[173, 1] = 173
Data[173, 2] = 174
Data[173, 3] = 1
Data[174, 0] = 1024
Data[174, 1] = 174
Data[174, 2] = 175
Data[174, 3] = 1
Data[175, 0] = 1024
Data[175, 1] = 175
Data[175, 2] = 176
Data[175, 3] = 1
Data[176, 0] = 1024
Data[176, 1] = 176
Data[176, 2] = 177
Data[176, 3] = 1
Data[177, 0] = 1024
Data[177, 1] = 177
Data[177, 2] = 178
Data[177, 3] = 1
Data[178, 0] = 1024
Data[178, 1] = 178
Data[178, 2] = 179
Data[178, 3] = 1
Data[179, 0] = 1024
Data[179, 1] = 179
Data[179, 2] = 180
Data[179, 3] = 1
Data[180, 0] = 1024
Data[180, 1] = 180
Data[180, 2] = 181
Data[180, 3] = 1
Data[181, 0] = 1024
Data[181, 1] = 181
Data[181, 2] = 182
Data[181, 3] = 1
Data[182, 0] = 1024
Data[182, 1] = 182
Data[182, 2] = 183
Data[182, 3] = 1
Data[183, 0] = 1024
Data[183, 1] = 183
Data[183, 2] = 184
Data[183, 3] = 1
Data[184, 0] = 1024
Data[184, 1] = 184
Data[184, 2] = 185
Data[184, 3] = 1
Data[185, 0] = 1024
Data[185, 1] = 185
Data[185, 2] = 186
Data[185, 3] = 1
Data[186, 0] = 1024
Data[186, 1] = 186
Data[186, 2] = 187
Data[186, 3] = 1
Data[187, 0] = 1024
Data[187, 1] = 187
Data[187, 2] = 188
Data[187, 3] = 1
Data[188, 0] = 1024
Data[188, 1] = 188
Data[188, 2] = 189
Data[188, 3] = 1
Data[189, 0] = 1024
Data[189, 1] = 189
Data[189, 2] = 190
Data[189, 3] = 1
Data[190, 0] = 1024
Data[190, 1] = 190
Data[190, 2] = 191
Data[190, 3] = 1
Data[191, 0] = 1024
Data[191, 1] = 191
Data[191, 2] = 192
Data[191, 3] = 1
Data[192, 0] = 1024
Data[192, 1] = 192
Data[192, 2] = 193
Data[192, 3] = 1
Data[193, 0] = 1024
Data[193, 1] = 193
Data[193, 2] = 194
Data[193, 3] = 1
Data[194, 0] = 1024
Data[194, 1] = 194
Data[194, 2] = 195
Data[194, 3] = 1
Data[195, 0] = 1024
Data[195, 1] = 195
Data[195, 2] = 196
Data[195, 3] = 1
Data[196, 0] = 1024
Data[196, 1] = 196
Data[196, 2] = 197
Data[196, 3] = 1
Data[197, 0] = 1024
Data[197, 1] = 197
Data[197, 2] = 198
Data[197, 3] = 1
Data[198, 0] = 1024
Data[198, 1] = 198
Data[198, 2] = 199
Data[198, 3] = 1
Data[199, 0] = 1024
Data[199, 1] = 199
Data[199, 2] = 200
Data[199, 3] = 1
Data[200, 0] = 1024
Data[200, 1] = 200
Data[200, 2] = 201
Data[200, 3] = 1
Data[201, 0] = 1024
Data[201, 1] = 201
Data[201, 2] = 202
Data[201, 3] = 1
Data[202, 0] = 1024
Data[202, 1] = 202
Data[202, 2] = 203
Data[202, 3] = 1
Data[203, 0] = 1024
Data[203, 1] = 203
Data[203, 2] = 204
Data[203, 3] = 1
Data[204, 0] = 1024
Data[204, 1] = 204
Data[204, 2] = 205
Data[204, 3] = 1
Data[205, 0] = 1024
Data[205, 1] = 205
Data[205, 2] = 206
Data[205, 3] = 1
Data[206, 0] = 1024
Data[206, 1] = 206
Data[206, 2] = 207
Data[206, 3] = 1
Data[207, 0] = 1024
Data[207, 1] = 207
Data[207, 2] = 208
Data[207, 3] = 1
Data[208, 0] = 1024
Data[208, 1] = 208
Data[208, 2] = 209
Data[208, 3] = 1
Data[209, 0] = 1024
Data[209, 1] = 209
Data[209, 2] = 210
Data[209, 3] = 1
Data[210, 0] = 1024
Data[210, 1] = 210
Data[210, 2] = 211
Data[210, 3] = 1
Data[211, 0] = 1024
Data[211, 1] = 211
Data[211, 2] = 212
Data[211, 3] = 1
Data[212, 0] = 1024
Data[212, 1] = 212
Data[212, 2] = 213
Data[212, 3] = 1
Data[213, 0] = 1024
Data[213, 1] = 213
Data[213, 2] = 214
Data[213, 3] = 1
Data[214, 0] = 1024
Data[214, 1] = 214
Data[214, 2] = 215
Data[214, 3] = 1
Data[215, 0] = 1024
Data[215, 1] = 215
Data[215, 2] = 216
Data[215, 3] = 1
Data[216, 0] = 1024
Data[216, 1] = 216
Data[216, 2] = 217
Data[216, 3] = 1
Data[217, 0] = 1024
Data[217, 1] = 217
Data[217, 2] = 218
Data[217, 3] = 1
Data[218, 0] = 1024
Data[218, 1] = 218
Data[218, 2] = 219
Data[218, 3] = 1
Data[219, 0] = 1024
Data[219, 1] = 219
Data[219, 2] = 220
Data[219, 3] = 1
Data[220, 0] = 1024
Data[220, 1] = 220
Data[220, 2] = 221
Data[220, 3] = 1
Data[221, 0] = 1024
Data[221, 1] = 221
Data[221, 2] = 222
Data[221, 3] = 1
Data[222, 0] = 1024
Data[222, 1] = 222
Data[222, 2] = 223
Data[222, 3] = 1
Data[223, 0] = 1024
Data[223, 1] = 223
Data[223, 2] = 224
Data[223, 3] = 1
Data[224, 0] = 1024
Data[224, 1] = 224
Data[224, 2] = 225
Data[224, 3] = 1
Data[225, 0] = 1024
Data[225, 1] = 225
Data[225, 2] = 226
Data[225, 3] = 1
Data[226, 0] = 1024
Data[226, 1] = 226
Data[226, 2] = 227
Data[226, 3] = 1
Data[227, 0] = 1024
Data[227, 1] = 227
Data[227, 2] = 228
Data[227, 3] = 1
Data[228, 0] = 1024
Data[228, 1] = 228
Data[228, 2] = 229
Data[228, 3] = 1
Data[229, 0] = 1024
Data[229, 1] = 229
Data[229, 2] = 230
Data[229, 3] = 1
Data[230, 0] = 1024
Data[230, 1] = 230
Data[230, 2] = 231
Data[230, 3] = 1
Data[231, 0] = 1024
Data[231, 1] = 231
Data[231, 2] = 232
Data[231, 3] = 1
Data[232, 0] = 1024
Data[232, 1] = 232
Data[232, 2] = 233
Data[232, 3] = 1
Data[233, 0] = 1024
Data[233, 1] = 233
Data[233, 2] = 234
Data[233, 3] = 1
Data[234, 0] = 1024
Data[234, 1] = 234
Data[234, 2] = 235
Data[234, 3] = 1
Data[235, 0] = 1024
Data[235, 1] = 235
Data[235, 2] = 236
Data[235, 3] = 1
Data[236, 0] = 1024
Data[236, 1] = 236
Data[236, 2] = 237
Data[236, 3] = 1
Data[237, 0] = 1024
Data[237, 1] = 237
Data[237, 2] = 238
Data[237, 3] = 1
Data[238, 0] = 1024
Data[238, 1] = 238
Data[238, 2] = 239
Data[238, 3] = 1
Data[239, 0] = 1024
Data[239, 1] = 239
Data[239, 2] = 240
Data[239, 3] = 1
Data[240, 0] = 1024
Data[240, 1] = 240
Data[240, 2] = 241
Data[240, 3] = 1
Data[241, 0] = 1024
Data[241, 1] = 241
Data[241, 2] = 242
Data[241, 3] = 1
Data[242, 0] = 1024
Data[242, 1] = 242
Data[242, 2] = 243
Data[242, 3] = 1
Data[243, 0] = 1024
Data[243, 1] = 243
Data[243, 2] = 244
Data[243, 3] = 1
Data[244, 0] = 1024
Data[244, 1] = 244
Data[244, 2] = 245
Data[244, 3] = 1
Data[245, 0] = 1024
Data[245, 1] = 245
Data[245, 2] = 246
Data[245, 3] = 1
Data[246, 0] = 1024
Data[246, 1] = 246
Data[246, 2] = 247
Data[246, 3] = 1
Data[247, 0] = 1024
Data[247, 1] = 247
Data[247, 2] = 248
Data[247, 3] = 1
Data[248, 0] = 1024
Data[248, 1] = 248
Data[248, 2] = 249
Data[248, 3] = 1
Data[249, 0] = 1024
Data[249, 1] = 249
Data[249, 2] = 250
Data[249, 3] = 1
Data[250, 0] = 1024
Data[250, 1] = 250
Data[250, 2] = 251
Data[250, 3] = 1
Data[251, 0] = 1024
Data[251, 1] = 251
Data[251, 2] = 252
Data[251, 3] = 1
Data[252, 0] = 1024
Data[252, 1] = 252
Data[252, 2] = 253
Data[252, 3] = 1
Data[253, 0] = 1024
Data[253, 1] = 253
Data[253, 2] = 254
Data[253, 3] = 1
Data[254, 0] = 1024
Data[254, 1] = 254
Data[254, 2] = 255
Data[254, 3] = 1
Data[255, 0] = 1024
Data[255, 1] = 255
Data[255, 2] = 256
Data[255, 3] = 1
Data[256, 0] = 1024
Data[256, 1] = 256
Data[256, 2] = 257
Data[256, 3] = 1
Data[257, 0] = 1024
Data[257, 1] = 257
Data[257, 2] = 258
Data[257, 3] = 1
Data[258, 0] = 1024
Data[258, 1] = 258
Data[258, 2] = 259
Data[258, 3] = 1
Data[259, 0] = 1024
Data[259, 1] = 259
Data[259, 2] = 260
Data[259, 3] = 1
Data[260, 0] = 1024
Data[260, 1] = 260
Data[260, 2] = 261
Data[260, 3] = 1
Data[261, 0] = 1024
Data[261, 1] = 261
Data[261, 2] = 262
Data[261, 3] = 1
Data[262, 0] = 1024
Data[262, 1] = 262
Data[262, 2] = 263
Data[262, 3] = 1
Data[263, 0] = 1024
Data[263, 1] = 263
Data[263, 2] = 264
Data[263, 3] = 1
Data[264, 0] = 1024
Data[264, 1] = 264
Data[264, 2] = 265
Data[264, 3] = 1
Data[265, 0] = 1024
Data[265, 1] = 265
Data[265, 2] = 266
Data[265, 3] = 1
Data[266, 0] = 1024
Data[266, 1] = 266
Data[266, 2] = 267
Data[266, 3] = 1
Data[267, 0] = 1024
Data[267, 1] = 267
Data[267, 2] = 268
Data[267, 3] = 1
Data[268, 0] = 1024
Data[268, 1] = 268
Data[268, 2] = 269
Data[268, 3] = 1
Data[269, 0] = 1024
Data[269, 1] = 269
Data[269, 2] = 270
Data[269, 3] = 1
Data[270, 0] = 1024
Data[270, 1] = 270
Data[270, 2] = 271
Data[270, 3] = 1
Data[271, 0] = 1024
Data[271, 1] = 271
Data[271, 2] = 272
Data[271, 3] = 1
Data[272, 0] = 1024
Data[272, 1] = 272
Data[272, 2] = 273
Data[272, 3] = 1
Data[273, 0] = 1024
Data[273, 1] = 273
Data[273, 2] = 274
Data[273, 3] = 1
Data[274, 0] = 1024
Data[274, 1] = 274
Data[274, 2] = 275
Data[274, 3] = 1
Data[275, 0] = 1024
Data[275, 1] = 275
Data[275, 2] = 276
Data[275, 3] = 1
Data[276, 0] = 1024
Data[276, 1] = 276
Data[276, 2] = 277
Data[276, 3] = 1
Data[277, 0] = 1024
Data[277, 1] = 277
Data[277, 2] = 278
Data[277, 3] = 1
Data[278, 0] = 1024
Data[278, 1] = 278
Data[278, 2] = 279
Data[278, 3] = 1
Data[279, 0] = 1024
Data[279, 1] = 279
Data[279, 2] = 280
Data[279, 3] = 1
Data[280, 0] = 1024
Data[280, 1] = 280
Data[280, 2] = 281
Data[280, 3] = 1
Data[281, 0] = 1024
Data[281, 1] = 281
Data[281, 2] = 282
Data[281, 3] = 1
Data[282, 0] = 1024
Data[282, 1] = 282
Data[282, 2] = 283
Data[282, 3] = 1
Data[283, 0] = 1024
Data[283, 1] = 283
Data[283, 2] = 284
Data[283, 3] = 1
Data[284, 0] = 1024
Data[284, 1] = 284
Data[284, 2] = 285
Data[284, 3] = 1
Data[285, 0] = 1024
Data[285, 1] = 285
Data[285, 2] = 286
Data[285, 3] = 1
Data[286, 0] = 1024
Data[286, 1] = 286
Data[286, 2] = 287
Data[286, 3] = 1
Data[287, 0] = 1024
Data[287, 1] = 287
Data[287, 2] = 288
Data[287, 3] = 1
Data[288, 0] = 1024
Data[288, 1] = 288
Data[288, 2] = 289
Data[288, 3] = 1
Data[289, 0] = 1024
Data[289, 1] = 289
Data[289, 2] = 290
Data[289, 3] = 1
Data[290, 0] = 1024
Data[290, 1] = 290
Data[290, 2] = 291
Data[290, 3] = 1
Data[291, 0] = 1024
Data[291, 1] = 291
Data[291, 2] = 292
Data[291, 3] = 1
Data[292, 0] = 1024
Data[292, 1] = 292
Data[292, 2] = 293
Data[292, 3] = 1
Data[293, 0] = 1024
Data[293, 1] = 293
Data[293, 2] = 294
Data[293, 3] = 1
Data[294, 0] = 1024
Data[294, 1] = 294
Data[294, 2] = 295
Data[294, 3] = 1
Data[295, 0] = 1024
Data[295, 1] = 295
Data[295, 2] = 296
Data[295, 3] = 1
Data[296, 0] = 1024
Data[296, 1] = 296
Data[296, 2] = 297
Data[296, 3] = 1
Data[297, 0] = 1024
Data[297, 1] = 297
Data[297, 2] = 298
Data[297, 3] = 1
Data[298, 0] = 1024
Data[298, 1] = 298
Data[298, 2] = 299
Data[298, 3] = 1
Data[299, 0] = 1024
Data[299, 1] = 299
Data[299, 2] = 300
Data[299, 3] = 1
Data[300, 0] = 1024
Data[300, 1] = 300
Data[300, 2] = 301
Data[300, 3] = 1
Data[301, 0] = 1024
Data[301, 1] = 301
Data[301, 2] = 302
Data[301, 3] = 1
Data[302, 0] = 1024
Data[302, 1] = 302
Data[302, 2] = 303
Data[302, 3] = 1
Data[303, 0] = 1024
Data[303, 1] = 303
Data[303, 2] = 304
Data[303, 3] = 1
Data[304, 0] = 1024
Data[304, 1] = 304
Data[304, 2] = 305
Data[304, 3] = 1
Data[305, 0] = 1024
Data[305, 1] = 305
Data[305, 2] = 306
Data[305, 3] = 1
Data[306, 0] = 1024
Data[306, 1] = 306
Data[306, 2] = 307
Data[306, 3] = 1
Data[307, 0] = 1024
Data[307, 1] = 307
Data[307, 2] = 308
Data[307, 3] = 1
Data[308, 0] = 1024
Data[308, 1] = 308
Data[308, 2] = 309
Data[308, 3] = 1
Data[309, 0] = 1024
Data[309, 1] = 309
Data[309, 2] = 310
Data[309, 3] = 1
Data[310, 0] = 1024
Data[310, 1] = 310
Data[310, 2] = 311
Data[310, 3] = 1
Data[311, 0] = 1024
Data[311, 1] = 311
Data[311, 2] = 312
Data[311, 3] = 1
Data[312, 0] = 1024
Data[312, 1] = 312
Data[312, 2] = 313
Data[312, 3] = 1
Data[313, 0] = 1024
Data[313, 1] = 313
Data[313, 2] = 314
Data[313, 3] = 1
Data[314, 0] = 1024
Data[314, 1] = 314
Data[314, 2] = 315
Data[314, 3] = 1
Data[315, 0] = 1024
Data[315, 1] = 315
Data[315, 2] = 316
Data[315, 3] = 1
Data[316, 0] = 1024
Data[316, 1] = 316
Data[316, 2] = 317
Data[316, 3] = 1
Data[317, 0] = 1024
Data[317, 1] = 317
Data[317, 2] = 318
Data[317, 3] = 1
Data[318, 0] = 1024
Data[318, 1] = 318
Data[318, 2] = 319
Data[318, 3] = 1
Data[319, 0] = 1024
Data[319, 1] = 319
Data[319, 2] = 320
Data[319, 3] = 1
Data[320, 0] = 1024
Data[320, 1] = 320
Data[320, 2] = 321
Data[320, 3] = 1
Data[321, 0] = 1024
Data[321, 1] = 321
Data[321, 2] = 322
Data[321, 3] = 1
Data[322, 0] = 1024
Data[322, 1] = 322
Data[322, 2] = 323
Data[322, 3] = 1
Data[323, 0] = 1024
Data[323, 1] = 323
Data[323, 2] = 324
Data[323, 3] = 1
Data[324, 0] = 1024
Data[324, 1] = 324
Data[324, 2] = 325
Data[324, 3] = 1
Data[325, 0] = 1024
Data[325, 1] = 325
Data[325, 2] = 326
Data[325, 3] = 1
Data[326, 0] = 1024
Data[326, 1] = 326
Data[326, 2] = 327
Data[326, 3] = 1
Data[327, 0] = 1024
Data[327, 1] = 327
Data[327, 2] = 328
Data[327, 3] = 1
Data[328, 0] = 1024
Data[328, 1] = 328
Data[328, 2] = 329
Data[328, 3] = 1
Data[329, 0] = 1024
Data[329, 1] = 329
Data[329, 2] = 330
Data[329, 3] = 1
Data[330, 0] = 1024
Data[330, 1] = 330
Data[330, 2] = 331
Data[330, 3] = 1
Data[331, 0] = 1024
Data[331, 1] = 331
Data[331, 2] = 332
Data[331, 3] = 1
Data[332, 0] = 1024
Data[332, 1] = 332
Data[332, 2] = 333
Data[332, 3] = 1
Data[333, 0] = 1024
Data[333, 1] = 333
Data[333, 2] = 334
Data[333, 3] = 1
Data[334, 0] = 1024
Data[334, 1] = 334
Data[334, 2] = 335
Data[334, 3] = 1
Data[335, 0] = 1024
Data[335, 1] = 335
Data[335, 2] = 336
Data[335, 3] = 1
Data[336, 0] = 1024
Data[336, 1] = 336
Data[336, 2] = 337
Data[336, 3] = 1
Data[337, 0] = 1024
Data[337, 1] = 337
Data[337, 2] = 338
Data[337, 3] = 1
Data[338, 0] = 1024
Data[338, 1] = 338
Data[338, 2] = 339
Data[338, 3] = 1
Data[339, 0] = 1024
Data[339, 1] = 339
Data[339, 2] = 340
Data[339, 3] = 1
Data[340, 0] = 1024
Data[340, 1] = 340
Data[340, 2] = 341
Data[340, 3] = 1
Data[341, 0] = 1024
Data[341, 1] = 341
Data[341, 2] = 342
Data[341, 3] = 1
Data[342, 0] = 1024
Data[342, 1] = 342
Data[342, 2] = 343
Data[342, 3] = 1
Data[343, 0] = 1024
Data[343, 1] = 343
Data[343, 2] = 344
Data[343, 3] = 1
Data[344, 0] = 1024
Data[344, 1] = 344
Data[344, 2] = 345
Data[344, 3] = 1
Data[345, 0] = 1024
Data[345, 1] = 345
Data[345, 2] = 346
Data[345, 3] = 1
Data[346, 0] = 1024
Data[346, 1] = 346
Data[346, 2] = 347
Data[346, 3] = 1
Data[347, 0] = 1024
Data[347, 1] = 347
Data[347, 2] = 348
Data[347, 3] = 1
Data[348, 0] = 1024
Data[348, 1] = 348
Data[348, 2] = 349
Data[348, 3] = 1
Data[349, 0] = 1024
Data[349, 1] = 349
Data[349, 2] = 350
Data[349, 3] = 1
Data[350, 0] = 1024
Data[350, 1] = 350
Data[350, 2] = 351
Data[350, 3] = 1
Data[351, 0] = 1024
Data[351, 1] = 351
Data[351, 2] = 352
Data[351, 3] = 1
Data[352, 0] = 1024
Data[352, 1] = 352
Data[352, 2] = 353
Data[352, 3] = 1
Data[353, 0] = 1024
Data[353, 1] = 353
Data[353, 2] = 354
Data[353, 3] = 1
Data[354, 0] = 1024
Data[354, 1] = 354
Data[354, 2] = 355
Data[354, 3] = 1
Data[355, 0] = 1024
Data[355, 1] = 355
Data[355, 2] = 356
Data[355, 3] = 1
Data[356, 0] = 1024
Data[356, 1] = 356
Data[356, 2] = 357
Data[356, 3] = 1
Data[357, 0] = 1024
Data[357, 1] = 357
Data[357, 2] = 358
Data[357, 3] = 1
Data[358, 0] = 1024
Data[358, 1] = 358
Data[358, 2] = 359
Data[358, 3] = 1
Data[359, 0] = 1024
Data[359, 1] = 359
Data[359, 2] = 360
Data[359, 3] = 1
Data[360, 0] = 1024
Data[360, 1] = 360
Data[360, 2] = 361
Data[360, 3] = 1
Data[361, 0] = 1024
Data[361, 1] = 361
Data[361, 2] = 362
Data[361, 3] = 1
Data[362, 0] = 1024
Data[362, 1] = 362
Data[362, 2] = 363
Data[362, 3] = 1
Data[363, 0] = 1024
Data[363, 1] = 363
Data[363, 2] = 364
Data[363, 3] = 1
Data[364, 0] = 1024
Data[364, 1] = 364
Data[364, 2] = 365
Data[364, 3] = 1
Data[365, 0] = 1024
Data[365, 1] = 365
Data[365, 2] = 366
Data[365, 3] = 1
Data[366, 0] = 1024
Data[366, 1] = 366
Data[366, 2] = 367
Data[366, 3] = 1
Data[367, 0] = 1024
Data[367, 1] = 367
Data[367, 2] = 368
Data[367, 3] = 1
Data[368, 0] = 1024
Data[368, 1] = 368
Data[368, 2] = 369
Data[368, 3] = 1
Data[369, 0] = 1024
Data[369, 1] = 369
Data[369, 2] = 370
Data[369, 3] = 1
Data[370, 0] = 1024
Data[370, 1] = 370
Data[370, 2] = 371
Data[370, 3] = 1
Data[371, 0] = 1024
Data[371, 1] = 371
Data[371, 2] = 372
Data[371, 3] = 1
Data[372, 0] = 1024
Data[372, 1] = 372
Data[372, 2] = 373
Data[372, 3] = 1
Data[373, 0] = 1024
Data[373, 1] = 373
Data[373, 2] = 374
Data[373, 3] = 1
Data[374, 0] = 1024
Data[374, 1] = 374
Data[374, 2] = 375
Data[374, 3] = 1
Data[375, 0] = 1024
Data[375, 1] = 375
Data[375, 2] = 376
Data[375, 3] = 1
Data[376, 0] = 1024
Data[376, 1] = 376
Data[376, 2] = 377
Data[376, 3] = 1
Data[377, 0] = 1024
Data[377, 1] = 377
Data[377, 2] = 378
Data[377, 3] = 1
Data[378, 0] = 1024
Data[378, 1] = 378
Data[378, 2] = 379
Data[378, 3] = 1
Data[379, 0] = 1024
Data[379, 1] = 379
Data[379, 2] = 380
Data[379, 3] = 1
Data[380, 0] = 1024
Data[380, 1] = 380
Data[380, 2] = 381
Data[380, 3] = 1
Data[381, 0] = 1024
Data[381, 1] = 381
Data[381, 2] = 382
Data[381, 3] = 1
Data[382, 0] = 1024
Data[382, 1] = 382
Data[382, 2] = 383
Data[382, 3] = 1
Data[383, 0] = 1024
Data[383, 1] = 383
Data[383, 2] = 384
Data[383, 3] = 1
Data[384, 0] = 1024
Data[384, 1] = 384
Data[384, 2] = 385
Data[384, 3] = 1
Data[385, 0] = 1024
Data[385, 1] = 385
Data[385, 2] = 386
Data[385, 3] = 1
Data[386, 0] = 1024
Data[386, 1] = 386
Data[386, 2] = 387
Data[386, 3] = 1
Data[387, 0] = 1024
Data[387, 1] = 387
Data[387, 2] = 388
Data[387, 3] = 1
Data[388, 0] = 1024
Data[388, 1] = 388
Data[388, 2] = 389
Data[388, 3] = 1
Data[389, 0] = 1024
Data[389, 1] = 389
Data[389, 2] = 390
Data[389, 3] = 1
Data[390, 0] = 1024
Data[390, 1] = 390
Data[390, 2] = 391
Data[390, 3] = 1
Data[391, 0] = 1024
Data[391, 1] = 391
Data[391, 2] = 392
Data[391, 3] = 1
Data[392, 0] = 1024
Data[392, 1] = 392
Data[392, 2] = 393
Data[392, 3] = 1
Data[393, 0] = 1024
Data[393, 1] = 393
Data[393, 2] = 394
Data[393, 3] = 1
Data[394, 0] = 1024
Data[394, 1] = 394
Data[394, 2] = 395
Data[394, 3] = 1
Data[395, 0] = 1024
Data[395, 1] = 395
Data[395, 2] = 396
Data[395, 3] = 1
Data[396, 0] = 1024
Data[396, 1] = 396
Data[396, 2] = 397
Data[396, 3] = 1
Data[397, 0] = 1024
Data[397, 1] = 397
Data[397, 2] = 398
Data[397, 3] = 1
Data[398, 0] = 1024
Data[398, 1] = 398
Data[398, 2] = 399
Data[398, 3] = 1
Data[399, 0] = 1024
Data[399, 1] = 399
Data[399, 2] = 400
Data[399, 3] = 1
Data[400, 0] = 1024
Data[400, 1] = 400
Data[400, 2] = 401
Data[400, 3] = 1
Data[401, 0] = 1024
Data[401, 1] = 401
Data[401, 2] = 402
Data[401, 3] = 1
Data[402, 0] = 1024
Data[402, 1] = 402
Data[402, 2] = 403
Data[402, 3] = 1
Data[403, 0] = 1024
Data[403, 1] = 403
Data[403, 2] = 404
Data[403, 3] = 1
Data[404, 0] = 1024
Data[404, 1] = 404
Data[404, 2] = 405
Data[404, 3] = 1
Data[405, 0] = 1024
Data[405, 1] = 405
Data[405, 2] = 406
Data[405, 3] = 1
Data[406, 0] = 1024
Data[406, 1] = 406
Data[406, 2] = 407
Data[406, 3] = 1
Data[407, 0] = 1024
Data[407, 1] = 407
Data[407, 2] = 408
Data[407, 3] = 1
Data[408, 0] = 1024
Data[408, 1] = 408
Data[408, 2] = 409
Data[408, 3] = 1
Data[409, 0] = 1024
Data[409, 1] = 409
Data[409, 2] = 410
Data[409, 3] = 1
Data[410, 0] = 1024
Data[410, 1] = 410
Data[410, 2] = 411
Data[410, 3] = 1
Data[411, 0] = 1024
Data[411, 1] = 411
Data[411, 2] = 412
Data[411, 3] = 1
Data[412, 0] = 1024
Data[412, 1] = 412
Data[412, 2] = 413
Data[412, 3] = 1
Data[413, 0] = 1024
Data[413, 1] = 413
Data[413, 2] = 414
Data[413, 3] = 1
Data[414, 0] = 1024
Data[414, 1] = 414
Data[414, 2] = 415
Data[414, 3] = 1
Data[415, 0] = 1024
Data[415, 1] = 415
Data[415, 2] = 416
Data[415, 3] = 1
Data[416, 0] = 1024
Data[416, 1] = 416
Data[416, 2] = 417
Data[416, 3] = 1
Data[417, 0] = 1024
Data[417, 1] = 417
Data[417, 2] = 418
Data[417, 3] = 1
Data[418, 0] = 1024
Data[418, 1] = 418
Data[418, 2] = 419
Data[418, 3] = 1
Data[419, 0] = 1024
Data[419, 1] = 419
Data[419, 2] = 420
Data[419, 3] = 1
Data[420, 0] = 1024
Data[420, 1] = 420
Data[420, 2] = 421
Data[420, 3] = 1
Data[421, 0] = 1024
Data[421, 1] = 421
Data[421, 2] = 422
Data[421, 3] = 1
Data[422, 0] = 1024
Data[422, 1] = 422
Data[422, 2] = 423
Data[422, 3] = 1
Data[423, 0] = 1024
Data[423, 1] = 423
Data[423, 2] = 424
Data[423, 3] = 1
Data[424, 0] = 1024
Data[424, 1] = 424
Data[424, 2] = 425
Data[424, 3] = 1
Data[425, 0] = 1024
Data[425, 1] = 425
Data[425, 2] = 426
Data[425, 3] = 1
Data[426, 0] = 1024
Data[426, 1] = 426
Data[426, 2] = 427
Data[426, 3] = 1
Data[427, 0] = 1024
Data[427, 1] = 427
Data[427, 2] = 428
Data[427, 3] = 1
Data[428, 0] = 1024
Data[428, 1] = 428
Data[428, 2] = 429
Data[428, 3] = 1
Data[429, 0] = 1024
Data[429, 1] = 429
Data[429, 2] = 430
Data[429, 3] = 1
Data[430, 0] = 1024
Data[430, 1] = 430
Data[430, 2] = 431
Data[430, 3] = 1
Data[431, 0] = 1024
Data[431, 1] = 431
Data[431, 2] = 432
Data[431, 3] = 1
Data[432, 0] = 1024
Data[432, 1] = 432
Data[432, 2] = 433
Data[432, 3] = 1
Data[433, 0] = 1024
Data[433, 1] = 433
Data[433, 2] = 434
Data[433, 3] = 1
Data[434, 0] = 1024
Data[434, 1] = 434
Data[434, 2] = 435
Data[434, 3] = 1
Data[435, 0] = 1024
Data[435, 1] = 435
Data[435, 2] = 436
Data[435, 3] = 1
Data[436, 0] = 1024
Data[436, 1] = 436
Data[436, 2] = 437
Data[436, 3] = 1
Data[437, 0] = 1024
Data[437, 1] = 437
Data[437, 2] = 438
Data[437, 3] = 1
Data[438, 0] = 1024
Data[438, 1] = 438
Data[438, 2] = 439
Data[438, 3] = 1
Data[439, 0] = 1024
Data[439, 1] = 439
Data[439, 2] = 440
Data[439, 3] = 1
Data[440, 0] = 1024
Data[440, 1] = 440
Data[440, 2] = 441
Data[440, 3] = 1
Data[441, 0] = 1024
Data[441, 1] = 441
Data[441, 2] = 442
Data[441, 3] = 1
Data[442, 0] = 1024
Data[442, 1] = 442
Data[442, 2] = 443
Data[442, 3] = 1
Data[443, 0] = 1024
Data[443, 1] = 443
Data[443, 2] = 444
Data[443, 3] = 1
Data[444, 0] = 1024
Data[444, 1] = 444
Data[444, 2] = 445
Data[444, 3] = 1
Data[445, 0] = 1024
Data[445, 1] = 445
Data[445, 2] = 446
Data[445, 3] = 1
Data[446, 0] = 1024
Data[446, 1] = 446
Data[446, 2] = 447
Data[446, 3] = 1
Data[447, 0] = 1024
Data[447, 1] = 447
Data[447, 2] = 448
Data[447, 3] = 1
Data[448, 0] = 1024
Data[448, 1] = 448
Data[448, 2] = 449
Data[448, 3] = 1
Data[449, 0] = 1024
Data[449, 1] = 449
Data[449, 2] = 450
Data[449, 3] = 1
Data[450, 0] = 1024
Data[450, 1] = 450
Data[450, 2] = 451
Data[450, 3] = 1
Data[451, 0] = 1024
Data[451, 1] = 451
Data[451, 2] = 452
Data[451, 3] = 1
Data[452, 0] = 1024
Data[452, 1] = 452
Data[452, 2] = 453
Data[452, 3] = 1
Data[453, 0] = 1024
Data[453, 1] = 453
Data[453, 2] = 454
Data[453, 3] = 1
Data[454, 0] = 1024
Data[454, 1] = 454
Data[454, 2] = 455
Data[454, 3] = 1
Data[455, 0] = 1024
Data[455, 1] = 455
Data[455, 2] = 456
Data[455, 3] = 1
Data[456, 0] = 1024
Data[456, 1] = 456
Data[456, 2] = 457
Data[456, 3] = 1
Data[457, 0] = 1024
Data[457, 1] = 457
Data[457, 2] = 458
Data[457, 3] = 1
Data[458, 0] = 1024
Data[458, 1] = 458
Data[458, 2] = 459
Data[458, 3] = 1
Data[459, 0] = 1024
Data[459, 1] = 459
Data[459, 2] = 460
Data[459, 3] = 1
Data[460, 0] = 1024
Data[460, 1] = 460
Data[460, 2] = 461
Data[460, 3] = 1
Data[461, 0] = 1024
Data[461, 1] = 461
Data[461, 2] = 462
Data[461, 3] = 1
Data[462, 0] = 1024
Data[462, 1] = 462
Data[462, 2] = 463
Data[462, 3] = 1
Data[463, 0] = 1024
Data[463, 1] = 463
Data[463, 2] = 464
Data[463, 3] = 1
Data[464, 0] = 1024
Data[464, 1] = 464
Data[464, 2] = 465
Data[464, 3] = 1
Data[465, 0] = 1024
Data[465, 1] = 465
Data[465, 2] = 466
Data[465, 3] = 1
Data[466, 0] = 1024
Data[466, 1] = 466
Data[466, 2] = 467
Data[466, 3] = 1
Data[467, 0] = 1024
Data[467, 1] = 467
Data[467, 2] = 468
Data[467, 3] = 1
Data[468, 0] = 1024
Data[468, 1] = 468
Data[468, 2] = 469
Data[468, 3] = 1
Data[469, 0] = 1024
Data[469, 1] = 469
Data[469, 2] = 470
Data[469, 3] = 1
Data[470, 0] = 1024
Data[470, 1] = 470
Data[470, 2] = 471
Data[470, 3] = 1
Data[471, 0] = 1024
Data[471, 1] = 471
Data[471, 2] = 472
Data[471, 3] = 1
Data[472, 0] = 1024
Data[472, 1] = 472
Data[472, 2] = 473
Data[472, 3] = 1
Data[473, 0] = 1024
Data[473, 1] = 473
Data[473, 2] = 474
Data[473, 3] = 1
Data[474, 0] = 1024
Data[474, 1] = 474
Data[474, 2] = 475
Data[474, 3] = 1
Data[475, 0] = 1024
Data[475, 1] = 475
Data[475, 2] = 476
Data[475, 3] = 1
Data[476, 0] = 1024
Data[476, 1] = 476
Data[476, 2] = 477
Data[476, 3] = 1
Data[477, 0] = 1024
Data[477, 1] = 477
Data[477, 2] = 478
Data[477, 3] = 1
Data[478, 0] = 1024
Data[478, 1] = 478
Data[478, 2] = 479
Data[478, 3] = 1
Data[479, 0] = 1024
Data[479, 1] = 479
Data[479, 2] = 480
Data[479, 3] = 1
Data[480, 0] = 1024
Data[480, 1] = 480
Data[480, 2] = 481
Data[480, 3] = 1
Data[481, 0] = 1024
Data[481, 1] = 481
Data[481, 2] = 482
Data[481, 3] = 1
Data[482, 0] = 1024
Data[482, 1] = 482
Data[482, 2] = 483
Data[482, 3] = 1
Data[483, 0] = 1024
Data[483, 1] = 483
Data[483, 2] = 484
Data[483, 3] = 1
Data[484, 0] = 1024
Data[484, 1] = 484
Data[484, 2] = 485
Data[484, 3] = 1
Data[485, 0] = 1024
Data[485, 1] = 485
Data[485, 2] = 486
Data[485, 3] = 1
Data[486, 0] = 1024
Data[486, 1] = 486
Data[486, 2] = 487
Data[486, 3] = 1
Data[487, 0] = 1024
Data[487, 1] = 487
Data[487, 2] = 488
Data[487, 3] = 1
Data[488, 0] = 1024
Data[488, 1] = 488
Data[488, 2] = 489
Data[488, 3] = 1
Data[489, 0] = 1024
Data[489, 1] = 489
Data[489, 2] = 490
Data[489, 3] = 1
Data[490, 0] = 1024
Data[490, 1] = 490
Data[490, 2] = 491
Data[490, 3] = 1
Data[491, 0] = 1024
Data[491, 1] = 491
Data[491, 2] = 492
Data[491, 3] = 1
Data[492, 0] = 1024
Data[492, 1] = 492
Data[492, 2] = 493
Data[492, 3] = 1
Data[493, 0] = 1024
Data[493, 1] = 493
Data[493, 2] = 494
Data[493, 3] = 1
Data[494, 0] = 1024
Data[494, 1] = 494
Data[494, 2] = 495
Data[494, 3] = 1
Data[495, 0] = 1024
Data[495, 1] = 495
Data[495, 2] = 496
Data[495, 3] = 1
Data[496, 0] = 1024
Data[496, 1] = 496
Data[496, 2] = 497
Data[496, 3] = 1
Data[497, 0] = 1024
Data[497, 1] = 497
Data[497, 2] = 498
Data[497, 3] = 1
Data[498, 0] = 1024
Data[498, 1] = 498
Data[498, 2] = 499
Data[498, 3] = 1
Data[499, 0] = 1024
Data[499, 1] = 499
Data[499, 2] = 500
Data[499, 3] = 1
Data[500, 0] = 1024
Data[500, 1] = 500
Data[500, 2] = 501
Data[500, 3] = 1
Data[501, 0] = 1024
Data[501, 1] = 501
Data[501, 2] = 502
Data[501, 3] = 1
Data[502, 0] = 1024
Data[502, 1] = 502
Data[502, 2] = 503
Data[502, 3] = 1
Data[503, 0] = 1024
Data[503, 1] = 503
Data[503, 2] = 504
Data[503, 3] = 1
Data[504, 0] = 1024
Data[504, 1] = 504
Data[504, 2] = 505
Data[504, 3] = 1
Data[505, 0] = 1024
Data[505, 1] = 505
Data[505, 2] = 506
Data[505, 3] = 1
Data[506, 0] = 1024
Data[506, 1] = 506
Data[506, 2] = 507
Data[506, 3] = 1
Data[507, 0] = 1024
Data[507, 1] = 507
Data[507, 2] = 508
Data[507, 3] = 1
Data[508, 0] = 1024
Data[508, 1] = 508
Data[508, 2] = 509
Data[508, 3] = 1
Data[509, 0] = 1024
Data[509, 1] = 509
Data[509, 2] = 510
Data[509, 3] = 1
Data[510, 0] = 1024
Data[510, 1] = 510
Data[510, 2] = 511
Data[510, 3] = 1
Data[511, 0] = 1024
Data[511, 1] = 511
Data[511, 2] = 512
Data[511, 3] = 1
Data[512, 0] = 1024
Data[512, 1] = 512
Data[512, 2] = 513
Data[512, 3] = 1
Data[513, 0] = 1024
Data[513, 1] = 513
Data[513, 2] = 514
Data[513, 3] = 1
Data[514, 0] = 1024
Data[514, 1] = 514
Data[514, 2] = 515
Data[514, 3] = 1
Data[515, 0] = 1024
Data[515, 1] = 515
Data[515, 2] = 516
Data[515, 3] = 1
Data[516, 0] = 1024
Data[516, 1] = 516
Data[516, 2] = 517
Data[516, 3] = 1
Data[517, 0] = 1024
Data[517, 1] = 517
Data[517, 2] = 518
Data[517, 3] = 1
Data[518, 0] = 1024
Data[518, 1] = 518
Data[518, 2] = 519
Data[518, 3] = 1
Data[519, 0] = 1024
Data[519, 1] = 519
Data[519, 2] = 520
Data[519, 3] = 1
Data[520, 0] = 1024
Data[520, 1] = 520
Data[520, 2] = 521
Data[520, 3] = 1
Data[521, 0] = 1024
Data[521, 1] = 521
Data[521, 2] = 522
Data[521, 3] = 1
Data[522, 0] = 1024
Data[522, 1] = 522
Data[522, 2] = 523
Data[522, 3] = 1
Data[523, 0] = 1024
Data[523, 1] = 523
Data[523, 2] = 524
Data[523, 3] = 1
Data[524, 0] = 1024
Data[524, 1] = 524
Data[524, 2] = 525
Data[524, 3] = 1
Data[525, 0] = 1024
Data[525, 1] = 525
Data[525, 2] = 526
Data[525, 3] = 1
Data[526, 0] = 1024
Data[526, 1] = 526
Data[526, 2] = 527
Data[526, 3] = 1
Data[527, 0] = 1024
Data[527, 1] = 527
Data[527, 2] = 528
Data[527, 3] = 1
Data[528, 0] = 1024
Data[528, 1] = 528
Data[528, 2] = 529
Data[528, 3] = 1
Data[529, 0] = 1024
Data[529, 1] = 529
Data[529, 2] = 530
Data[529, 3] = 1
Data[530, 0] = 1024
Data[530, 1] = 530
Data[530, 2] = 531
Data[530, 3] = 1
Data[531, 0] = 1024
Data[531, 1] = 531
Data[531, 2] = 532
Data[531, 3] = 1
Data[532, 0] = 1024
Data[532, 1] = 532
Data[532, 2] = 533
Data[532, 3] = 1
Data[533, 0] = 1024
Data[533, 1] = 533
Data[533, 2] = 534
Data[533, 3] = 1
Data[534, 0] = 1024
Data[534, 1] = 534
Data[534, 2] = 535
Data[534, 3] = 1
Data[535, 0] = 1024
Data[535, 1] = 535
Data[535, 2] = 536
Data[535, 3] = 1
Data[536, 0] = 1024
Data[536, 1] = 536
Data[536, 2] = 537
Data[536, 3] = 1
Data[537, 0] = 1024
Data[537, 1] = 537
Data[537, 2] = 538
Data[537, 3] = 1
Data[538, 0] = 1024
Data[538, 1] = 538
Data[538, 2] = 539
Data[538, 3] = 1
Data[539, 0] = 1024
Data[539, 1] = 539
Data[539, 2] = 540
Data[539, 3] = 1
Data[540, 0] = 1024
Data[540, 1] = 540
Data[540, 2] = 541
Data[540, 3] = 1
Data[541, 0] = 1024
Data[541, 1] = 541
Data[541, 2] = 542
Data[541, 3] = 1
Data[542, 0] = 1024
Data[542, 1] = 542
Data[542, 2] = 543
Data[542, 3] = 1
Data[543, 0] = 1024
Data[543, 1] = 543
Data[543, 2] = 544
Data[543, 3] = 1
Data[544, 0] = 1024
Data[544, 1] = 544
Data[544, 2] = 545
Data[544, 3] = 1
Data[545, 0] = 1024
Data[545, 1] = 545
Data[545, 2] = 546
Data[545, 3] = 1
Data[546, 0] = 1024
Data[546, 1] = 546
Data[546, 2] = 547
Data[546, 3] = 1
Data[547, 0] = 1024
Data[547, 1] = 547
Data[547, 2] = 548
Data[547, 3] = 1
Data[548, 0] = 1024
Data[548, 1] = 548
Data[548, 2] = 549
Data[548, 3] = 1
Data[549, 0] = 1024
Data[549, 1] = 549
Data[549, 2] = 550
Data[549, 3] = 1
Data[550, 0] = 1024
Data[550, 1] = 550
Data[550, 2] = 551
Data[550, 3] = 1
Data[551, 0] = 1024
Data[551, 1] = 551
Data[551, 2] = 552
Data[551, 3] = 1
Data[552, 0] = 1024
Data[552, 1] = 552
Data[552, 2] = 553
Data[552, 3] = 1
Data[553, 0] = 1024
Data[553, 1] = 553
Data[553, 2] = 554
Data[553, 3] = 1
Data[554, 0] = 1024
Data[554, 1] = 554
Data[554, 2] = 555
Data[554, 3] = 1
Data[555, 0] = 1024
Data[555, 1] = 555
Data[555, 2] = 556
Data[555, 3] = 1
Data[556, 0] = 1024
Data[556, 1] = 556
Data[556, 2] = 557
Data[556, 3] = 1
Data[557, 0] = 1024
Data[557, 1] = 557
Data[557, 2] = 558
Data[557, 3] = 1
Data[558, 0] = 1024
Data[558, 1] = 558
Data[558, 2] = 559
Data[558, 3] = 1
Data[559, 0] = 1024
Data[559, 1] = 559
Data[559, 2] = 560
Data[559, 3] = 1
Data[560, 0] = 1024
Data[560, 1] = 560
Data[560, 2] = 561
Data[560, 3] = 1
Data[561, 0] = 1024
Data[561, 1] = 561
Data[561, 2] = 562
Data[561, 3] = 1
Data[562, 0] = 1024
Data[562, 1] = 562
Data[562, 2] = 563
Data[562, 3] = 1
Data[563, 0] = 1024
Data[563, 1] = 563
Data[563, 2] = 564
Data[563, 3] = 1
Data[564, 0] = 1024
Data[564, 1] = 564
Data[564, 2] = 565
Data[564, 3] = 1
Data[565, 0] = 1024
Data[565, 1] = 565
Data[565, 2] = 566
Data[565, 3] = 1
Data[566, 0] = 1024
Data[566, 1] = 566
Data[566, 2] = 567
Data[566, 3] = 1
Data[567, 0] = 1024
Data[567, 1] = 567
Data[567, 2] = 568
Data[567, 3] = 1
Data[568, 0] = 1024
Data[568, 1] = 568
Data[568, 2] = 569
Data[568, 3] = 1
Data[569, 0] = 1024
Data[569, 1] = 569
Data[569, 2] = 570
Data[569, 3] = 1
Data[570, 0] = 1024
Data[570, 1] = 570
Data[570, 2] = 571
Data[570, 3] = 1
Data[571, 0] = 1024
Data[571, 1] = 571
Data[571, 2] = 572
Data[571, 3] = 1
Data[572, 0] = 1024
Data[572, 1] = 572
Data[572, 2] = 573
Data[572, 3] = 1
Data[573, 0] = 1024
Data[573, 1] = 573
Data[573, 2] = 574
Data[573, 3] = 1
Data[574, 0] = 1024
Data[574, 1] = 574
Data[574, 2] = 575
Data[574, 3] = 1
Data[575, 0] = 1024
Data[575, 1] = 575
Data[575, 2] = 576
Data[575, 3] = 1
Data[576, 0] = 1024
Data[576, 1] = 576
Data[576, 2] = 577
Data[576, 3] = 1
Data[577, 0] = 1024
Data[577, 1] = 577
Data[577, 2] = 578
Data[577, 3] = 1
Data[578, 0] = 1024
Data[578, 1] = 578
Data[578, 2] = 579
Data[578, 3] = 1
Data[579, 0] = 1024
Data[579, 1] = 579
Data[579, 2] = 580
Data[579, 3] = 1
Data[580, 0] = 1024
Data[580, 1] = 580
Data[580, 2] = 581
Data[580, 3] = 1
Data[581, 0] = 1024
Data[581, 1] = 581
Data[581, 2] = 582
Data[581, 3] = 1
Data[582, 0] = 1024
Data[582, 1] = 582
Data[582, 2] = 583
Data[582, 3] = 1
Data[583, 0] = 1024
Data[583, 1] = 583
Data[583, 2] = 584
Data[583, 3] = 1
Data[584, 0] = 1024
Data[584, 1] = 584
Data[584, 2] = 585
Data[584, 3] = 1
Data[585, 0] = 1024
Data[585, 1] = 585
Data[585, 2] = 586
Data[585, 3] = 1
Data[586, 0] = 1024
Data[586, 1] = 586
Data[586, 2] = 587
Data[586, 3] = 1
Data[587, 0] = 1024
Data[587, 1] = 587
Data[587, 2] = 588
Data[587, 3] = 1
Data[588, 0] = 1024
Data[588, 1] = 588
Data[588, 2] = 589
Data[588, 3] = 1
Data[589, 0] = 1024
Data[589, 1] = 589
Data[589, 2] = 590
Data[589, 3] = 1
Data[590, 0] = 1024
Data[590, 1] = 590
Data[590, 2] = 591
Data[590, 3] = 1
Data[591, 0] = 1024
Data[591, 1] = 591
Data[591, 2] = 592
Data[591, 3] = 1
Data[592, 0] = 1024
Data[592, 1] = 592
Data[592, 2] = 593
Data[592, 3] = 1
Data[593, 0] = 1024
Data[593, 1] = 593
Data[593, 2] = 594
Data[593, 3] = 1
Data[594, 0] = 1024
Data[594, 1] = 594
Data[594, 2] = 595
Data[594, 3] = 1
Data[595, 0] = 1024
Data[595, 1] = 595
Data[595, 2] = 596
Data[595, 3] = 1
Data[596, 0] = 1024
Data[596, 1] = 596
Data[596, 2] = 597
Data[596, 3] = 1
Data[597, 0] = 1024
Data[597, 1] = 597
Data[597, 2] = 598
Data[597, 3] = 1
Data[598, 0] = 1024
Data[598, 1] = 598
Data[598, 2] = 599
Data[598, 3] = 1
Data[599, 0] = 1024
Data[599, 1] = 599
Data[599, 2] = 600
Data[599, 3] = 1
Data[600, 0] = 1024
Data[600, 1] = 600
Data[600, 2] = 601
Data[600, 3] = 1
Data[601, 0] = 1024
Data[601, 1] = 601
Data[601, 2] = 602
Data[601, 3] = 1
Data[602, 0] = 1024
Data[602, 1] = 602
Data[602, 2] = 603
Data[602, 3] = 1
Data[603, 0] = 1024
Data[603, 1] = 603
Data[603, 2] = 604
Data[603, 3] = 1
Data[604, 0] = 1024
Data[604, 1] = 604
Data[604, 2] = 605
Data[604, 3] = 1
Data[605, 0] = 1024
Data[605, 1] = 605
Data[605, 2] = 606
Data[605, 3] = 1
Data[606, 0] = 1024
Data[606, 1] = 606
Data[606, 2] = 607
Data[606, 3] = 1
Data[607, 0] = 1024
Data[607, 1] = 607
Data[607, 2] = 608
Data[607, 3] = 1
Data[608, 0] = 1024
Data[608, 1] = 608
Data[608, 2] = 609
Data[608, 3] = 1
Data[609, 0] = 1024
Data[609, 1] = 609
Data[609, 2] = 610
Data[609, 3] = 1
Data[610, 0] = 1024
Data[610, 1] = 610
Data[610, 2] = 611
Data[610, 3] = 1
Data[611, 0] = 1024
Data[611, 1] = 611
Data[611, 2] = 612
Data[611, 3] = 1
Data[612, 0] = 1024
Data[612, 1] = 612
Data[612, 2] = 613
Data[612, 3] = 1
Data[613, 0] = 1024
Data[613, 1] = 613
Data[613, 2] = 614
Data[613, 3] = 1
Data[614, 0] = 1024
Data[614, 1] = 614
Data[614, 2] = 615
Data[614, 3] = 1
Data[615, 0] = 1024
Data[615, 1] = 615
Data[615, 2] = 616
Data[615, 3] = 1
Data[616, 0] = 1024
Data[616, 1] = 616
Data[616, 2] = 617
Data[616, 3] = 1
Data[617, 0] = 1024
Data[617, 1] = 617
Data[617, 2] = 618
Data[617, 3] = 1
Data[618, 0] = 1024
Data[618, 1] = 618
Data[618, 2] = 619
Data[618, 3] = 1
Data[619, 0] = 1024
Data[619, 1] = 619
Data[619, 2] = 620
Data[619, 3] = 1
Data[620, 0] = 1024
Data[620, 1] = 620
Data[620, 2] = 621
Data[620, 3] = 1
Data[621, 0] = 1024
Data[621, 1] = 621
Data[621, 2] = 622
Data[621, 3] = 1
Data[622, 0] = 1024
Data[622, 1] = 622
Data[622, 2] = 623
Data[622, 3] = 1
Data[623, 0] = 1024
Data[623, 1] = 623
Data[623, 2] = 624
Data[623, 3] = 1
Data[624, 0] = 1024
Data[624, 1] = 624
Data[624, 2] = 625
Data[624, 3] = 1
Data[625, 0] = 1024
Data[625, 1] = 625
Data[625, 2] = 626
Data[625, 3] = 1
Data[626, 0] = 1024
Data[626, 1] = 626
Data[626, 2] = 627
Data[626, 3] = 1
Data[627, 0] = 1024
Data[627, 1] = 627
Data[627, 2] = 628
Data[627, 3] = 1
Data[628, 0] = 1024
Data[628, 1] = 628
Data[628, 2] = 629
Data[628, 3] = 1
Data[629, 0] = 1024
Data[629, 1] = 629
Data[629, 2] = 630
Data[629, 3] = 1
Data[630, 0] = 1024
Data[630, 1] = 630
Data[630, 2] = 631
Data[630, 3] = 1
Data[631, 0] = 1024
Data[631, 1] = 631
Data[631, 2] = 632
Data[631, 3] = 1
Data[632, 0] = 1024
Data[632, 1] = 632
Data[632, 2] = 633
Data[632, 3] = 1
Data[633, 0] = 1024
Data[633, 1] = 633
Data[633, 2] = 634
Data[633, 3] = 1
Data[634, 0] = 1024
Data[634, 1] = 634
Data[634, 2] = 635
Data[634, 3] = 1
Data[635, 0] = 1024
Data[635, 1] = 635
Data[635, 2] = 636
Data[635, 3] = 1
Data[636, 0] = 1024
Data[636, 1] = 636
Data[636, 2] = 637
Data[636, 3] = 1
Data[637, 0] = 1024
Data[637, 1] = 637
Data[637, 2] = 638
Data[637, 3] = 1
Data[638, 0] = 1024
Data[638, 1] = 638
Data[638, 2] = 639
Data[638, 3] = 1
Data[639, 0] = 1024
Data[639, 1] = 639
Data[639, 2] = 640
Data[639, 3] = 1
Data[640, 0] = 1024
Data[640, 1] = 640
Data[640, 2] = 641
Data[640, 3] = 1
Data[641, 0] = 1024
Data[641, 1] = 641
Data[641, 2] = 642
Data[641, 3] = 1
Data[642, 0] = 1024
Data[642, 1] = 642
Data[642, 2] = 643
Data[642, 3] = 1
Data[643, 0] = 1024
Data[643, 1] = 643
Data[643, 2] = 644
Data[643, 3] = 1
Data[644, 0] = 1024
Data[644, 1] = 644
Data[644, 2] = 645
Data[644, 3] = 1
Data[645, 0] = 1024
Data[645, 1] = 645
Data[645, 2] = 646
Data[645, 3] = 1
Data[646, 0] = 1024
Data[646, 1] = 646
Data[646, 2] = 647
Data[646, 3] = 1
Data[647, 0] = 1024
Data[647, 1] = 647
Data[647, 2] = 648
Data[647, 3] = 1
Data[648, 0] = 1024
Data[648, 1] = 648
Data[648, 2] = 649
Data[648, 3] = 1
Data[649, 0] = 1024
Data[649, 1] = 649
Data[649, 2] = 650
Data[649, 3] = 1
Data[650, 0] = 1024
Data[650, 1] = 650
Data[650, 2] = 651
Data[650, 3] = 1
Data[651, 0] = 1024
Data[651, 1] = 651
Data[651, 2] = 652
Data[651, 3] = 1
Data[652, 0] = 1024
Data[652, 1] = 652
Data[652, 2] = 653
Data[652, 3] = 1
Data[653, 0] = 1024
Data[653, 1] = 653
Data[653, 2] = 654
Data[653, 3] = 1
Data[654, 0] = 1024
Data[654, 1] = 654
Data[654, 2] = 655
Data[654, 3] = 1
Data[655, 0] = 1024
Data[655, 1] = 655
Data[655, 2] = 656
Data[655, 3] = 1
Data[656, 0] = 1024
Data[656, 1] = 656
Data[656, 2] = 657
Data[656, 3] = 1
Data[657, 0] = 1024
Data[657, 1] = 657
Data[657, 2] = 658
Data[657, 3] = 1
Data[658, 0] = 1024
Data[658, 1] = 658
Data[658, 2] = 659
Data[658, 3] = 1
Data[659, 0] = 1024
Data[659, 1] = 659
Data[659, 2] = 660
Data[659, 3] = 1
Data[660, 0] = 1024
Data[660, 1] = 660
Data[660, 2] = 661
Data[660, 3] = 1
Data[661, 0] = 1024
Data[661, 1] = 661
Data[661, 2] = 662
Data[661, 3] = 1
Data[662, 0] = 1024
Data[662, 1] = 662
Data[662, 2] = 663
Data[662, 3] = 1
Data[663, 0] = 1024
Data[663, 1] = 663
Data[663, 2] = 664
Data[663, 3] = 1
Data[664, 0] = 1024
Data[664, 1] = 664
Data[664, 2] = 665
Data[664, 3] = 1
Data[665, 0] = 1024
Data[665, 1] = 665
Data[665, 2] = 666
Data[665, 3] = 1
Data[666, 0] = 1024
Data[666, 1] = 666
Data[666, 2] = 667
Data[666, 3] = 1
Data[667, 0] = 1024
Data[667, 1] = 667
Data[667, 2] = 668
Data[667, 3] = 1
Data[668, 0] = 1024
Data[668, 1] = 668
Data[668, 2] = 669
Data[668, 3] = 1
Data[669, 0] = 1024
Data[669, 1] = 669
Data[669, 2] = 670
Data[669, 3] = 1
Data[670, 0] = 1024
Data[670, 1] = 670
Data[670, 2] = 671
Data[670, 3] = 1
Data[671, 0] = 1024
Data[671, 1] = 671
Data[671, 2] = 672
Data[671, 3] = 1
Data[672, 0] = 1024
Data[672, 1] = 672
Data[672, 2] = 673
Data[672, 3] = 1
Data[673, 0] = 1024
Data[673, 1] = 673
Data[673, 2] = 674
Data[673, 3] = 1
Data[674, 0] = 1024
Data[674, 1] = 674
Data[674, 2] = 675
Data[674, 3] = 1
Data[675, 0] = 1024
Data[675, 1] = 675
Data[675, 2] = 676
Data[675, 3] = 1
Data[676, 0] = 1024
Data[676, 1] = 676
Data[676, 2] = 677
Data[676, 3] = 1
Data[677, 0] = 1024
Data[677, 1] = 677
Data[677, 2] = 678
Data[677, 3] = 1
Data[678, 0] = 1024
Data[678, 1] = 678
Data[678, 2] = 679
Data[678, 3] = 1
Data[679, 0] = 1024
Data[679, 1] = 679
Data[679, 2] = 680
Data[679, 3] = 1
Data[680, 0] = 1024
Data[680, 1] = 680
Data[680, 2] = 681
Data[680, 3] = 1
Data[681, 0] = 1024
Data[681, 1] = 681
Data[681, 2] = 682
Data[681, 3] = 1
Data[682, 0] = 1024
Data[682, 1] = 682
Data[682, 2] = 683
Data[682, 3] = 1
Data[683, 0] = 1024
Data[683, 1] = 683
Data[683, 2] = 684
Data[683, 3] = 1
Data[684, 0] = 1024
Data[684, 1] = 684
Data[684, 2] = 685
Data[684, 3] = 1
Data[685, 0] = 1024
Data[685, 1] = 685
Data[685, 2] = 686
Data[685, 3] = 1
Data[686, 0] = 1024
Data[686, 1] = 686
Data[686, 2] = 687
Data[686, 3] = 1
Data[687, 0] = 1024
Data[687, 1] = 687
Data[687, 2] = 688
Data[687, 3] = 1
Data[688, 0] = 1024
Data[688, 1] = 688
Data[688, 2] = 689
Data[688, 3] = 1
Data[689, 0] = 1024
Data[689, 1] = 689
Data[689, 2] = 690
Data[689, 3] = 1
Data[690, 0] = 1024
Data[690, 1] = 690
Data[690, 2] = 691
Data[690, 3] = 1
Data[691, 0] = 1024
Data[691, 1] = 691
Data[691, 2] = 692
Data[691, 3] = 1
Data[692, 0] = 1024
Data[692, 1] = 692
Data[692, 2] = 693
Data[692, 3] = 1
Data[693, 0] = 1024
Data[693, 1] = 693
Data[693, 2] = 694
Data[693, 3] = 1
Data[694, 0] = 1024
Data[694, 1] = 694
Data[694, 2] = 695
Data[694, 3] = 1
Data[695, 0] = 1024
Data[695, 1] = 695
Data[695, 2] = 696
Data[695, 3] = 1
Data[696, 0] = 1024
Data[696, 1] = 696
Data[696, 2] = 697
Data[696, 3] = 1
Data[697, 0] = 1024
Data[697, 1] = 697
Data[697, 2] = 698
Data[697, 3] = 1
Data[698, 0] = 1024
Data[698, 1] = 698
Data[698, 2] = 699
Data[698, 3] = 1
Data[699, 0] = 1024
Data[699, 1] = 699
Data[699, 2] = 700
Data[699, 3] = 1
Data[700, 0] = 1024
Data[700, 1] = 700
Data[700, 2] = 701
Data[700, 3] = 1
Data[701, 0] = 1024
Data[701, 1] = 701
Data[701, 2] = 702
Data[701, 3] = 1
Data[702, 0] = 1024
Data[702, 1] = 702
Data[702, 2] = 703
Data[702, 3] = 1
Data[703, 0] = 1024
Data[703, 1] = 703
Data[703, 2] = 704
Data[703, 3] = 1
Data[704, 0] = 1024
Data[704, 1] = 704
Data[704, 2] = 705
Data[704, 3] = 1
Data[705, 0] = 1024
Data[705, 1] = 705
Data[705, 2] = 706
Data[705, 3] = 1
Data[706, 0] = 1024
Data[706, 1] = 706
Data[706, 2] = 707
Data[706, 3] = 1
Data[707, 0] = 1024
Data[707, 1] = 707
Data[707, 2] = 708
Data[707, 3] = 1
Data[708, 0] = 1024
Data[708, 1] = 708
Data[708, 2] = 709
Data[708, 3] = 1
Data[709, 0] = 1024
Data[709, 1] = 709
Data[709, 2] = 710
Data[709, 3] = 1
Data[710, 0] = 1024
Data[710, 1] = 710
Data[710, 2] = 711
Data[710, 3] = 1
Data[711, 0] = 1024
Data[711, 1] = 711
Data[711, 2] = 712
Data[711, 3] = 1
Data[712, 0] = 1024
Data[712, 1] = 712
Data[712, 2] = 713
Data[712, 3] = 1
Data[713, 0] = 1024
Data[713, 1] = 713
Data[713, 2] = 714
Data[713, 3] = 1
Data[714, 0] = 1024
Data[714, 1] = 714
Data[714, 2] = 715
Data[714, 3] = 1
Data[715, 0] = 1024
Data[715, 1] = 715
Data[715, 2] = 716
Data[715, 3] = 1
Data[716, 0] = 1024
Data[716, 1] = 716
Data[716, 2] = 717
Data[716, 3] = 1
Data[717, 0] = 1024
Data[717, 1] = 717
Data[717, 2] = 718
Data[717, 3] = 1
Data[718, 0] = 1024
Data[718, 1] = 718
Data[718, 2] = 719
Data[718, 3] = 1
Data[719, 0] = 1024
Data[719, 1] = 719
Data[719, 2] = 720
Data[719, 3] = 1
Data[720, 0] = 1024
Data[720, 1] = 720
Data[720, 2] = 721
Data[720, 3] = 1
Data[721, 0] = 1024
Data[721, 1] = 721
Data[721, 2] = 722
Data[721, 3] = 1
Data[722, 0] = 1024
Data[722, 1] = 722
Data[722, 2] = 723
Data[722, 3] = 1
Data[723, 0] = 1024
Data[723, 1] = 723
Data[723, 2] = 724
Data[723, 3] = 1
Data[724, 0] = 1024
Data[724, 1] = 724
Data[724, 2] = 725
Data[724, 3] = 1
Data[725, 0] = 1024
Data[725, 1] = 725
Data[725, 2] = 726
Data[725, 3] = 1
Data[726, 0] = 1024
Data[726, 1] = 726
Data[726, 2] = 727
Data[726, 3] = 1
Data[727, 0] = 1024
Data[727, 1] = 727
Data[727, 2] = 728
Data[727, 3] = 1
Data[728, 0] = 1024
Data[728, 1] = 728
Data[728, 2] = 729
Data[728, 3] = 1
Data[729, 0] = 1024
Data[729, 1] = 729
Data[729, 2] = 730
Data[729, 3] = 1
Data[730, 0] = 1024
Data[730, 1] = 730
Data[730, 2] = 731
Data[730, 3] = 1
Data[731, 0] = 1024
Data[731, 1] = 731
Data[731, 2] = 732
Data[731, 3] = 1
Data[732, 0] = 1024
Data[732, 1] = 732
Data[732, 2] = 733
Data[732, 3] = 1
Data[733, 0] = 1024
Data[733, 1] = 733
Data[733, 2] = 734
Data[733, 3] = 1
Data[734, 0] = 1024
Data[734, 1] = 734
Data[734, 2] = 735
Data[734, 3] = 1
Data[735, 0] = 1024
Data[735, 1] = 735
Data[735, 2] = 736
Data[735, 3] = 1
Data[736, 0] = 1024
Data[736, 1] = 736
Data[736, 2] = 737
Data[736, 3] = 1
Data[737, 0] = 1024
Data[737, 1] = 737
Data[737, 2] = 738
Data[737, 3] = 1
Data[738, 0] = 1024
Data[738, 1] = 738
Data[738, 2] = 739
Data[738, 3] = 1
Data[739, 0] = 1024
Data[739, 1] = 739
Data[739, 2] = 740
Data[739, 3] = 1
Data[740, 0] = 1024
Data[740, 1] = 740
Data[740, 2] = 741
Data[740, 3] = 1
Data[741, 0] = 1024
Data[741, 1] = 741
Data[741, 2] = 742
Data[741, 3] = 1
Data[742, 0] = 1024
Data[742, 1] = 742
Data[742, 2] = 743
Data[742, 3] = 1
Data[743, 0] = 1024
Data[743, 1] = 743
Data[743, 2] = 744
Data[743, 3] = 1
Data[744, 0] = 1024
Data[744, 1] = 744
Data[744, 2] = 745
Data[744, 3] = 1
Data[745, 0] = 1024
Data[745, 1] = 745
Data[745, 2] = 746
Data[745, 3] = 1
Data[746, 0] = 1024
Data[746, 1] = 746
Data[746, 2] = 747
Data[746, 3] = 1
Data[747, 0] = 1024
Data[747, 1] = 747
Data[747, 2] = 748
Data[747, 3] = 1
Data[748, 0] = 1024
Data[748, 1] = 748
Data[748, 2] = 749
Data[748, 3] = 1
Data[749, 0] = 1024
Data[749, 1] = 749
Data[749, 2] = 750
Data[749, 3] = 1
Data[750, 0] = 1024
Data[750, 1] = 750
Data[750, 2] = 751
Data[750, 3] = 1
Data[751, 0] = 1024
Data[751, 1] = 751
Data[751, 2] = 752
Data[751, 3] = 1
Data[752, 0] = 1024
Data[752, 1] = 752
Data[752, 2] = 753
Data[752, 3] = 1
Data[753, 0] = 1024
Data[753, 1] = 753
Data[753, 2] = 754
Data[753, 3] = 1
Data[754, 0] = 1024
Data[754, 1] = 754
Data[754, 2] = 755
Data[754, 3] = 1
Data[755, 0] = 1024
Data[755, 1] = 755
Data[755, 2] = 756
Data[755, 3] = 1
Data[756, 0] = 1024
Data[756, 1] = 756
Data[756, 2] = 757
Data[756, 3] = 1
Data[757, 0] = 1024
Data[757, 1] = 757
Data[757, 2] = 758
Data[757, 3] = 1
Data[758, 0] = 1024
Data[758, 1] = 758
Data[758, 2] = 759
Data[758, 3] = 1
Data[759, 0] = 1024
Data[759, 1] = 759
Data[759, 2] = 760
Data[759, 3] = 1
Data[760, 0] = 1024
Data[760, 1] = 760
Data[760, 2] = 761
Data[760, 3] = 1
Data[761, 0] = 1024
Data[761, 1] = 761
Data[761, 2] = 762
Data[761, 3] = 1
Data[762, 0] = 1024
Data[762, 1] = 762
Data[762, 2] = 763
Data[762, 3] = 1
Data[763, 0] = 1024
Data[763, 1] = 763
Data[763, 2] = 764
Data[763, 3] = 1
Data[764, 0] = 1024
Data[764, 1] = 764
Data[764, 2] = 765
Data[764, 3] = 1
Data[765, 0] = 1024
Data[765, 1] = 765
Data[765, 2] = 766
Data[765, 3] = 1
Data[766, 0] = 1024
Data[766, 1] = 766
Data[766, 2] = 767
Data[766, 3] = 1
Data[767, 0] = 1024
Data[767, 1] = 767
Data[767, 2] = 768
Data[767, 3] = 1
Data[768, 0] = 1024
Data[768, 1] = 768
Data[768, 2] = 769
Data[768, 3] = 1
Data[769, 0] = 1024
Data[769, 1] = 769
Data[769, 2] = 770
Data[769, 3] = 1
Data[770, 0] = 1024
Data[770, 1] = 770
Data[770, 2] = 771
Data[770, 3] = 1
Data[771, 0] = 1024
Data[771, 1] = 771
Data[771, 2] = 772
Data[771, 3] = 1
Data[772, 0] = 1024
Data[772, 1] = 772
Data[772, 2] = 773
Data[772, 3] = 1
Data[773, 0] = 1024
Data[773, 1] = 773
Data[773, 2] = 774
Data[773, 3] = 1
Data[774, 0] = 1024
Data[774, 1] = 774
Data[774, 2] = 775
Data[774, 3] = 1
Data[775, 0] = 1024
Data[775, 1] = 775
Data[775, 2] = 776
Data[775, 3] = 1
Data[776, 0] = 1024
Data[776, 1] = 776
Data[776, 2] = 777
Data[776, 3] = 1
Data[777, 0] = 1024
Data[777, 1] = 777
Data[777, 2] = 778
Data[777, 3] = 1
Data[778, 0] = 1024
Data[778, 1] = 778
Data[778, 2] = 779
Data[778, 3] = 1
Data[779, 0] = 1024
Data[779, 1] = 779
Data[779, 2] = 780
Data[779, 3] = 1
Data[780, 0] = 1024
Data[780, 1] = 780
Data[780, 2] = 781
Data[780, 3] = 1
Data[781, 0] = 1024
Data[781, 1] = 781
Data[781, 2] = 782
Data[781, 3] = 1
Data[782, 0] = 1024
Data[782, 1] = 782
Data[782, 2] = 783
Data[782, 3] = 1
Data[783, 0] = 1024
Data[783, 1] = 783
Data[783, 2] = 784
Data[783, 3] = 1
Data[784, 0] = 1024
Data[784, 1] = 784
Data[784, 2] = 785
Data[784, 3] = 1
Data[785, 0] = 1024
Data[785, 1] = 785
Data[785, 2] = 786
Data[785, 3] = 1
Data[786, 0] = 1024
Data[786, 1] = 786
Data[786, 2] = 787
Data[786, 3] = 1
Data[787, 0] = 1024
Data[787, 1] = 787
Data[787, 2] = 788
Data[787, 3] = 1
Data[788, 0] = 1024
Data[788, 1] = 788
Data[788, 2] = 789
Data[788, 3] = 1
Data[789, 0] = 1024
Data[789, 1] = 789
Data[789, 2] = 790
Data[789, 3] = 1
Data[790, 0] = 1024
Data[790, 1] = 790
Data[790, 2] = 791
Data[790, 3] = 1
Data[791, 0] = 1024
Data[791, 1] = 791
Data[791, 2] = 792
Data[791, 3] = 1
Data[792, 0] = 1024
Data[792, 1] = 792
Data[792, 2] = 793
Data[792, 3] = 1
Data[793, 0] = 1024
Data[793, 1] = 793
Data[793, 2] = 794
Data[793, 3] = 1
Data[794, 0] = 1024
Data[794, 1] = 794
Data[794, 2] = 795
Data[794, 3] = 1
Data[795, 0] = 1024
Data[795, 1] = 795
Data[795, 2] = 796
Data[795, 3] = 1
Data[796, 0] = 1024
Data[796, 1] = 796
Data[796, 2] = 797
Data[796, 3] = 1
Data[797, 0] = 1024
Data[797, 1] = 797
Data[797, 2] = 798
Data[797, 3] = 1
Data[798, 0] = 1024
Data[798, 1] = 798
Data[798, 2] = 799
Data[798, 3] = 1
Data[799, 0] = 1024
Data[799, 1] = 799
Data[799, 2] = 800
Data[799, 3] = 1
Data[800, 0] = 1024
Data[800, 1] = 800
Data[800, 2] = 801
Data[800, 3] = 1
Data[801, 0] = 1024
Data[801, 1] = 801
Data[801, 2] = 802
Data[801, 3] = 1
Data[802, 0] = 1024
Data[802, 1] = 802
Data[802, 2] = 803
Data[802, 3] = 1
Data[803, 0] = 1024
Data[803, 1] = 803
Data[803, 2] = 804
Data[803, 3] = 1
Data[804, 0] = 1024
Data[804, 1] = 804
Data[804, 2] = 805
Data[804, 3] = 1
Data[805, 0] = 1024
Data[805, 1] = 805
Data[805, 2] = 806
Data[805, 3] = 1
Data[806, 0] = 1024
Data[806, 1] = 806
Data[806, 2] = 807
Data[806, 3] = 1
Data[807, 0] = 1024
Data[807, 1] = 807
Data[807, 2] = 808
Data[807, 3] = 1
Data[808, 0] = 1024
Data[808, 1] = 808
Data[808, 2] = 809
Data[808, 3] = 1
Data[809, 0] = 1024
Data[809, 1] = 809
Data[809, 2] = 810
Data[809, 3] = 1
Data[810, 0] = 1024
Data[810, 1] = 810
Data[810, 2] = 811
Data[810, 3] = 1
Data[811, 0] = 1024
Data[811, 1] = 811
Data[811, 2] = 812
Data[811, 3] = 1
Data[812, 0] = 1024
Data[812, 1] = 812
Data[812, 2] = 813
Data[812, 3] = 1
Data[813, 0] = 1024
Data[813, 1] = 813
Data[813, 2] = 814
Data[813, 3] = 1
Data[814, 0] = 1024
Data[814, 1] = 814
Data[814, 2] = 815
Data[814, 3] = 1
Data[815, 0] = 1024
Data[815, 1] = 815
Data[815, 2] = 816
Data[815, 3] = 1
Data[816, 0] = 1024
Data[816, 1] = 816
Data[816, 2] = 817
Data[816, 3] = 1
Data[817, 0] = 1024
Data[817, 1] = 817
Data[817, 2] = 818
Data[817, 3] = 1
Data[818, 0] = 1024
Data[818, 1] = 818
Data[818, 2] = 819
Data[818, 3] = 1
Data[819, 0] = 1024
Data[819, 1] = 819
Data[819, 2] = 820
Data[819, 3] = 1
Data[820, 0] = 1024
Data[820, 1] = 820
Data[820, 2] = 821
Data[820, 3] = 1
Data[821, 0] = 1024
Data[821, 1] = 821
Data[821, 2] = 822
Data[821, 3] = 1
Data[822, 0] = 1024
Data[822, 1] = 822
Data[822, 2] = 823
Data[822, 3] = 1
Data[823, 0] = 1024
Data[823, 1] = 823
Data[823, 2] = 824
Data[823, 3] = 1
Data[824, 0] = 1024
Data[824, 1] = 824
Data[824, 2] = 825
Data[824, 3] = 1
Data[825, 0] = 1024
Data[825, 1] = 825
Data[825, 2] = 826
Data[825, 3] = 1
Data[826, 0] = 1024
Data[826, 1] = 826
Data[826, 2] = 827
Data[826, 3] = 1
Data[827, 0] = 1024
Data[827, 1] = 827
Data[827, 2] = 828
Data[827, 3] = 1
Data[828, 0] = 1024
Data[828, 1] = 828
Data[828, 2] = 829
Data[828, 3] = 1
Data[829, 0] = 1024
Data[829, 1] = 829
Data[829, 2] = 830
Data[829, 3] = 1
Data[830, 0] = 1024
Data[830, 1] = 830
Data[830, 2] = 831
Data[830, 3] = 1
Data[831, 0] = 1024
Data[831, 1] = 831
Data[831, 2] = 832
Data[831, 3] = 1
Data[832, 0] = 1024
Data[832, 1] = 832
Data[832, 2] = 833
Data[832, 3] = 1
Data[833, 0] = 1024
Data[833, 1] = 833
Data[833, 2] = 834
Data[833, 3] = 1
Data[834, 0] = 1024
Data[834, 1] = 834
Data[834, 2] = 835
Data[834, 3] = 1
Data[835, 0] = 1024
Data[835, 1] = 835
Data[835, 2] = 836
Data[835, 3] = 1
Data[836, 0] = 1024
Data[836, 1] = 836
Data[836, 2] = 837
Data[836, 3] = 1
Data[837, 0] = 1024
Data[837, 1] = 837
Data[837, 2] = 838
Data[837, 3] = 1
Data[838, 0] = 1024
Data[838, 1] = 838
Data[838, 2] = 839
Data[838, 3] = 1
Data[839, 0] = 1024
Data[839, 1] = 839
Data[839, 2] = 840
Data[839, 3] = 1
Data[840, 0] = 1024
Data[840, 1] = 840
Data[840, 2] = 841
Data[840, 3] = 1
Data[841, 0] = 1024
Data[841, 1] = 841
Data[841, 2] = 842
Data[841, 3] = 1
Data[842, 0] = 1024
Data[842, 1] = 842
Data[842, 2] = 843
Data[842, 3] = 1
Data[843, 0] = 1024
Data[843, 1] = 843
Data[843, 2] = 844
Data[843, 3] = 1
Data[844, 0] = 1024
Data[844, 1] = 844
Data[844, 2] = 845
Data[844, 3] = 1
Data[845, 0] = 1024
Data[845, 1] = 845
Data[845, 2] = 846
Data[845, 3] = 1
Data[846, 0] = 1024
Data[846, 1] = 846
Data[846, 2] = 847
Data[846, 3] = 1
Data[847, 0] = 1024
Data[847, 1] = 847
Data[847, 2] = 848
Data[847, 3] = 1
Data[848, 0] = 1024
Data[848, 1] = 848
Data[848, 2] = 849
Data[848, 3] = 1
Data[849, 0] = 1024
Data[849, 1] = 849
Data[849, 2] = 850
Data[849, 3] = 1
Data[850, 0] = 1024
Data[850, 1] = 850
Data[850, 2] = 851
Data[850, 3] = 1
Data[851, 0] = 1024
Data[851, 1] = 851
Data[851, 2] = 852
Data[851, 3] = 1
Data[852, 0] = 1024
Data[852, 1] = 852
Data[852, 2] = 853
Data[852, 3] = 1
Data[853, 0] = 1024
Data[853, 1] = 853
Data[853, 2] = 854
Data[853, 3] = 1
Data[854, 0] = 1024
Data[854, 1] = 854
Data[854, 2] = 855
Data[854, 3] = 1
Data[855, 0] = 1024
Data[855, 1] = 855
Data[855, 2] = 856
Data[855, 3] = 1
Data[856, 0] = 1024
Data[856, 1] = 856
Data[856, 2] = 857
Data[856, 3] = 1
Data[857, 0] = 1024
Data[857, 1] = 857
Data[857, 2] = 858
Data[857, 3] = 1
Data[858, 0] = 1024
Data[858, 1] = 858
Data[858, 2] = 859
Data[858, 3] = 1
Data[859, 0] = 1024
Data[859, 1] = 859
Data[859, 2] = 860
Data[859, 3] = 1
Data[860, 0] = 1024
Data[860, 1] = 860
Data[860, 2] = 861
Data[860, 3] = 1
Data[861, 0] = 1024
Data[861, 1] = 861
Data[861, 2] = 862
Data[861, 3] = 1
Data[862, 0] = 1024
Data[862, 1] = 862
Data[862, 2] = 863
Data[862, 3] = 1
Data[863, 0] = 1024
Data[863, 1] = 863
Data[863, 2] = 864
Data[863, 3] = 1
Data[864, 0] = 1024
Data[864, 1] = 864
Data[864, 2] = 865
Data[864, 3] = 1
Data[865, 0] = 1024
Data[865, 1] = 865
Data[865, 2] = 866
Data[865, 3] = 1
Data[866, 0] = 1024
Data[866, 1] = 866
Data[866, 2] = 867
Data[866, 3] = 1
Data[867, 0] = 1024
Data[867, 1] = 867
Data[867, 2] = 868
Data[867, 3] = 1
Data[868, 0] = 1024
Data[868, 1] = 868
Data[868, 2] = 869
Data[868, 3] = 1
Data[869, 0] = 1024
Data[869, 1] = 869
Data[869, 2] = 870
Data[869, 3] = 1
Data[870, 0] = 1024
Data[870, 1] = 870
Data[870, 2] = 871
Data[870, 3] = 1
Data[871, 0] = 1024
Data[871, 1] = 871
Data[871, 2] = 872
Data[871, 3] = 1
Data[872, 0] = 1024
Data[872, 1] = 872
Data[872, 2] = 873
Data[872, 3] = 1
Data[873, 0] = 1024
Data[873, 1] = 873
Data[873, 2] = 874
Data[873, 3] = 1
Data[874, 0] = 1024
Data[874, 1] = 874
Data[874, 2] = 875
Data[874, 3] = 1
Data[875, 0] = 1024
Data[875, 1] = 875
Data[875, 2] = 876
Data[875, 3] = 1
Data[876, 0] = 1024
Data[876, 1] = 876
Data[876, 2] = 877
Data[876, 3] = 1
Data[877, 0] = 1024
Data[877, 1] = 877
Data[877, 2] = 878
Data[877, 3] = 1
Data[878, 0] = 1024
Data[878, 1] = 878
Data[878, 2] = 879
Data[878, 3] = 1
Data[879, 0] = 1024
Data[879, 1] = 879
Data[879, 2] = 880
Data[879, 3] = 1
Data[880, 0] = 1024
Data[880, 1] = 880
Data[880, 2] = 881
Data[880, 3] = 1
Data[881, 0] = 1024
Data[881, 1] = 881
Data[881, 2] = 882
Data[881, 3] = 1
Data[882, 0] = 1024
Data[882, 1] = 882
Data[882, 2] = 883
Data[882, 3] = 1
Data[883, 0] = 1024
Data[883, 1] = 883
Data[883, 2] = 884
Data[883, 3] = 1
Data[884, 0] = 1024
Data[884, 1] = 884
Data[884, 2] = 885
Data[884, 3] = 1
Data[885, 0] = 1024
Data[885, 1] = 885
Data[885, 2] = 886
Data[885, 3] = 1
Data[886, 0] = 1024
Data[886, 1] = 886
Data[886, 2] = 887
Data[886, 3] = 1
Data[887, 0] = 1024
Data[887, 1] = 887
Data[887, 2] = 888
Data[887, 3] = 1
Data[888, 0] = 1024
Data[888, 1] = 888
Data[888, 2] = 889
Data[888, 3] = 1
Data[889, 0] = 1024
Data[889, 1] = 889
Data[889, 2] = 890
Data[889, 3] = 1
Data[890, 0] = 1024
Data[890, 1] = 890
Data[890, 2] = 891
Data[890, 3] = 1
Data[891, 0] = 1024
Data[891, 1] = 891
Data[891, 2] = 892
Data[891, 3] = 1
Data[892, 0] = 1024
Data[892, 1] = 892
Data[892, 2] = 893
Data[892, 3] = 1
Data[893, 0] = 1024
Data[893, 1] = 893
Data[893, 2] = 894
Data[893, 3] = 1
Data[894, 0] = 1024
Data[894, 1] = 894
Data[894, 2] = 895
Data[894, 3] = 1
Data[895, 0] = 1024
Data[895, 1] = 895
Data[895, 2] = 896
Data[895, 3] = 1
Data[896, 0] = 1024
Data[896, 1] = 896
Data[896, 2] = 897
Data[896, 3] = 1
Data[897, 0] = 1024
Data[897, 1] = 897
Data[897, 2] = 898
Data[897, 3] = 1
Data[898, 0] = 1024
Data[898, 1] = 898
Data[898, 2] = 899
Data[898, 3] = 1
Data[899, 0] = 1024
Data[899, 1] = 899
Data[899, 2] = 900
Data[899, 3] = 1
Data[900, 0] = 1024
Data[900, 1] = 900
Data[900, 2] = 901
Data[900, 3] = 1
Data[901, 0] = 1024
Data[901, 1] = 901
Data[901, 2] = 902
Data[901, 3] = 1
Data[902, 0] = 1024
Data[902, 1] = 902
Data[902, 2] = 903
Data[902, 3] = 1
Data[903, 0] = 1024
Data[903, 1] = 903
Data[903, 2] = 904
Data[903, 3] = 1
Data[904, 0] = 1024
Data[904, 1] = 904
Data[904, 2] = 905
Data[904, 3] = 1
Data[905, 0] = 1024
Data[905, 1] = 905
Data[905, 2] = 906
Data[905, 3] = 1
Data[906, 0] = 1024
Data[906, 1] = 906
Data[906, 2] = 907
Data[906, 3] = 1
Data[907, 0] = 1024
Data[907, 1] = 907
Data[907, 2] = 908
Data[907, 3] = 1
Data[908, 0] = 1024
Data[908, 1] = 908
Data[908, 2] = 909
Data[908, 3] = 1
Data[909, 0] = 1024
Data[909, 1] = 909
Data[909, 2] = 910
Data[909, 3] = 1
Data[910, 0] = 1024
Data[910, 1] = 910
Data[910, 2] = 911
Data[910, 3] = 1
Data[911, 0] = 1024
Data[911, 1] = 911
Data[911, 2] = 912
Data[911, 3] = 1
Data[912, 0] = 1024
Data[912, 1] = 912
Data[912, 2] = 913
Data[912, 3] = 1
Data[913, 0] = 1024
Data[913, 1] = 913
Data[913, 2] = 914
Data[913, 3] = 1
Data[914, 0] = 1024
Data[914, 1] = 914
Data[914, 2] = 915
Data[914, 3] = 1
Data[915, 0] = 1024
Data[915, 1] = 915
Data[915, 2] = 916
Data[915, 3] = 1
Data[916, 0] = 1024
Data[916, 1] = 916
Data[916, 2] = 917
Data[916, 3] = 1
Data[917, 0] = 1024
Data[917, 1] = 917
Data[917, 2] = 918
Data[917, 3] = 1
Data[918, 0] = 1024
Data[918, 1] = 918
Data[918, 2] = 919
Data[918, 3] = 1
Data[919, 0] = 1024
Data[919, 1] = 919
Data[919, 2] = 920
Data[919, 3] = 1
Data[920, 0] = 1024
Data[920, 1] = 920
Data[920, 2] = 921
Data[920, 3] = 1
Data[921, 0] = 1024
Data[921, 1] = 921
Data[921, 2] = 922
Data[921, 3] = 1
Data[922, 0] = 1024
Data[922, 1] = 922
Data[922, 2] = 923
Data[922, 3] = 1
Data[923, 0] = 1024
Data[923, 1] = 923
Data[923, 2] = 924
Data[923, 3] = 1
Data[924, 0] = 1024
Data[924, 1] = 924
Data[924, 2] = 925
Data[924, 3] = 1
Data[925, 0] = 1024
Data[925, 1] = 925
Data[925, 2] = 926
Data[925, 3] = 1
Data[926, 0] = 1024
Data[926, 1] = 926
Data[926, 2] = 927
Data[926, 3] = 1
Data[927, 0] = 1024
Data[927, 1] = 927
Data[927, 2] = 928
Data[927, 3] = 1
Data[928, 0] = 1024
Data[928, 1] = 928
Data[928, 2] = 929
Data[928, 3] = 1
Data[929, 0] = 1024
Data[929, 1] = 929
Data[929, 2] = 930
Data[929, 3] = 1
Data[930, 0] = 1024
Data[930, 1] = 930
Data[930, 2] = 931
Data[930, 3] = 1
Data[931, 0] = 1024
Data[931, 1] = 931
Data[931, 2] = 932
Data[931, 3] = 1
Data[932, 0] = 1024
Data[932, 1] = 932
Data[932, 2] = 933
Data[932, 3] = 1
Data[933, 0] = 1024
Data[933, 1] = 933
Data[933, 2] = 934
Data[933, 3] = 1
Data[934, 0] = 1024
Data[934, 1] = 934
Data[934, 2] = 935
Data[934, 3] = 1
Data[935, 0] = 1024
Data[935, 1] = 935
Data[935, 2] = 936
Data[935, 3] = 1
Data[936, 0] = 1024
Data[936, 1] = 936
Data[936, 2] = 937
Data[936, 3] = 1
Data[937, 0] = 1024
Data[937, 1] = 937
Data[937, 2] = 938
Data[937, 3] = 1
Data[938, 0] = 1024
Data[938, 1] = 938
Data[938, 2] = 939
Data[938, 3] = 1
Data[939, 0] = 1024
Data[939, 1] = 939
Data[939, 2] = 940
Data[939, 3] = 1
Data[940, 0] = 1024
Data[940, 1] = 940
Data[940, 2] = 941
Data[940, 3] = 1
Data[941, 0] = 1024
Data[941, 1] = 941
Data[941, 2] = 942
Data[941, 3] = 1
Data[942, 0] = 1024
Data[942, 1] = 942
Data[942, 2] = 943
Data[942, 3] = 1
Data[943, 0] = 1024
Data[943, 1] = 943
Data[943, 2] = 944
Data[943, 3] = 1
Data[944, 0] = 1024
Data[944, 1] = 944
Data[944, 2] = 945
Data[944, 3] = 1
Data[945, 0] = 1024
Data[945, 1] = 945
Data[945, 2] = 946
Data[945, 3] = 1
Data[946, 0] = 1024
Data[946, 1] = 946
Data[946, 2] = 947
Data[946, 3] = 1
Data[947, 0] = 1024
Data[947, 1] = 947
Data[947, 2] = 948
Data[947, 3] = 1
Data[948, 0] = 1024
Data[948, 1] = 948
Data[948, 2] = 949
Data[948, 3] = 1
Data[949, 0] = 1024
Data[949, 1] = 949
Data[949, 2] = 950
Data[949, 3] = 1
Data[950, 0] = 1024
Data[950, 1] = 950
Data[950, 2] = 951
Data[950, 3] = 1
Data[951, 0] = 1024
Data[951, 1] = 951
Data[951, 2] = 952
Data[951, 3] = 1
Data[952, 0] = 1024
Data[952, 1] = 952
Data[952, 2] = 953
Data[952, 3] = 1
Data[953, 0] = 1024
Data[953, 1] = 953
Data[953, 2] = 954
Data[953, 3] = 1
Data[954, 0] = 1024
Data[954, 1] = 954
Data[954, 2] = 955
Data[954, 3] = 1
Data[955, 0] = 1024
Data[955, 1] = 955
Data[955, 2] = 956
Data[955, 3] = 1
Data[956, 0] = 1024
Data[956, 1] = 956
Data[956, 2] = 957
Data[956, 3] = 1
Data[957, 0] = 1024
Data[957, 1] = 957
Data[957, 2] = 958
Data[957, 3] = 1
Data[958, 0] = 1024
Data[958, 1] = 958
Data[958, 2] = 959
Data[958, 3] = 1
Data[959, 0] = 1024
Data[959, 1] = 959
Data[959, 2] = 960
Data[959, 3] = 1
Data[960, 0] = 1024
Data[960, 1] = 960
Data[960, 2] = 961
Data[960, 3] = 1
Data[961, 0] = 1024
Data[961, 1] = 961
Data[961, 2] = 962
Data[961, 3] = 1
Data[962, 0] = 1024
Data[962, 1] = 962
Data[962, 2] = 963
Data[962, 3] = 1
Data[963, 0] = 1024
Data[963, 1] = 963
Data[963, 2] = 964
Data[963, 3] = 1
Data[964, 0] = 1024
Data[964, 1] = 964
Data[964, 2] = 965
Data[964, 3] = 1
Data[965, 0] = 1024
Data[965, 1] = 965
Data[965, 2] = 966
Data[965, 3] = 1
Data[966, 0] = 1024
Data[966, 1] = 966
Data[966, 2] = 967
Data[966, 3] = 1
Data[967, 0] = 1024
Data[967, 1] = 967
Data[967, 2] = 968
Data[967, 3] = 1
Data[968, 0] = 1024
Data[968, 1] = 968
Data[968, 2] = 969
Data[968, 3] = 1
Data[969, 0] = 1024
Data[969, 1] = 969
Data[969, 2] = 970
Data[969, 3] = 1
Data[970, 0] = 1024
Data[970, 1] = 970
Data[970, 2] = 971
Data[970, 3] = 1
Data[971, 0] = 1024
Data[971, 1] = 971
Data[971, 2] = 972
Data[971, 3] = 1
Data[972, 0] = 1024
Data[972, 1] = 972
Data[972, 2] = 973
Data[972, 3] = 1
Data[973, 0] = 1024
Data[973, 1] = 973
Data[973, 2] = 974
Data[973, 3] = 1
Data[974, 0] = 1024
Data[974, 1] = 974
Data[974, 2] = 975
Data[974, 3] = 1
Data[975, 0] = 1024
Data[975, 1] = 975
Data[975, 2] = 976
Data[975, 3] = 1
Data[976, 0] = 1024
Data[976, 1] = 976
Data[976, 2] = 977
Data[976, 3] = 1
Data[977, 0] = 1024
Data[977, 1] = 977
Data[977, 2] = 978
Data[977, 3] = 1
Data[978, 0] = 1024
Data[978, 1] = 978
Data[978, 2] = 979
Data[978, 3] = 1
Data[979, 0] = 1024
Data[979, 1] = 979
Data[979, 2] = 980
Data[979, 3] = 1
Data[980, 0] = 1024
Data[980, 1] = 980
Data[980, 2] = 981
Data[980, 3] = 1
Data[981, 0] = 1024
Data[981, 1] = 981
Data[981, 2] = 982
Data[981, 3] = 1
Data[982, 0] = 1024
Data[982, 1] = 982
Data[982, 2] = 983
Data[982, 3] = 1
Data[983, 0] = 1024
Data[983, 1] = 983
Data[983, 2] = 984
Data[983, 3] = 1
Data[984, 0] = 1024
Data[984, 1] = 984
Data[984, 2] = 985
Data[984, 3] = 1
Data[985, 0] = 1024
Data[985, 1] = 985
Data[985, 2] = 986
Data[985, 3] = 1
Data[986, 0] = 1024
Data[986, 1] = 986
Data[986, 2] = 987
Data[986, 3] = 1
Data[987, 0] = 1024
Data[987, 1] = 987
Data[987, 2] = 988
Data[987, 3] = 1
Data[988, 0] = 1024
Data[988, 1] = 988
Data[988, 2] = 989
Data[988, 3] = 1
Data[989, 0] = 1024
Data[989, 1] = 989
Data[989, 2] = 990
Data[989, 3] = 1
Data[990, 0] = 1024
Data[990, 1] = 990
Data[990, 2] = 991
Data[990, 3] = 1
Data[991, 0] = 1024
Data[991, 1] = 991
Data[991, 2] = 992
Data[991, 3] = 1
Data[992, 0] = 1024
Data[992, 1] = 992
Data[992, 2] = 993
Data[992, 3] = 1
Data[993, 0] = 1024
Data[993, 1] = 993
Data[993, 2] = 994
Data[993, 3] = 1
Data[994, 0] = 1024
Data[994, 1] = 994
Data[994, 2] = 995
Data[994, 3] = 1
Data[995, 0] = 1024
Data[995, 1] = 995
Data[995, 2] = 996
Data[995, 3] = 1
Data[996, 0] = 1024
Data[996, 1] = 996
Data[996, 2] = 997
Data[996, 3] = 1
Data[997, 0] = 1024
Data[997, 1] = 997
Data[997, 2] = 998
Data[997, 3] = 1
Data[998, 0] = 1024
Data[998, 1] = 998
Data[998, 2] = 999
Data[998, 3] = 1
Data[999, 0] = 1024
Data[999, 1] = 999
Data[999, 2] = 1000
Data[999, 3] = 1
Data[1000, 0] = 1024
Data[1000, 1] = 1000
Data[1000, 2] = 1001
Data[1000, 3] = 1
Data[1001, 0] = 1024
Data[1001, 1] = 1001
Data[1001, 2] = 1002
Data[1001, 3] = 1
Data[1002, 0] = 1024
Data[1002, 1] = 1002
Data[1002, 2] = 1003
Data[1002, 3] = 1
Data[1003, 0] = 1024
Data[1003, 1] = 1003
Data[1003, 2] = 1004
Data[1003, 3] = 1
Data[1004, 0] = 1024
Data[1004, 1] = 1004
Data[1004, 2] = 1005
Data[1004, 3] = 1
Data[1005, 0] = 1024
Data[1005, 1] = 1005
Data[1005, 2] = 1006
Data[1005, 3] = 1
Data[1006, 0] = 1024
Data[1006, 1] = 1006
Data[1006, 2] = 1007
Data[1006, 3] = 1
Data[1007, 0] = 1024
Data[1007, 1] = 1007
Data[1007, 2] = 1008
Data[1007, 3] = 1
Data[1008, 0] = 1024
Data[1008, 1] = 1008
Data[1008, 2] = 1009
Data[1008, 3] = 1
Data[1009, 0] = 1024
Data[1009, 1] = 1009
Data[1009, 2] = 1010
Data[1009, 3] = 1
Data[1010, 0] = 1024
Data[1010, 1] = 1010
Data[1010, 2] = 1011
Data[1010, 3] = 1
Data[1011, 0] = 1024
Data[1011, 1] = 1011
Data[1011, 2] = 1012
Data[1011, 3] = 1
Data[1012, 0] = 1024
Data[1012, 1] = 1012
Data[1012, 2] = 1013
Data[1012, 3] = 1
Data[1013, 0] = 1024
Data[1013, 1] = 1013
Data[1013, 2] = 1014
Data[1013, 3] = 1
Data[1014, 0] = 1024
Data[1014, 1] = 1014
Data[1014, 2] = 1015
Data[1014, 3] = 1
Data[1015, 0] = 1024
Data[1015, 1] = 1015
Data[1015, 2] = 1016
Data[1015, 3] = 1
Data[1016, 0] = 1024
Data[1016, 1] = 1016
Data[1016, 2] = 1017
Data[1016, 3] = 1
Data[1017, 0] = 1024
Data[1017, 1] = 1017
Data[1017, 2] = 1018
Data[1017, 3] = 1
Data[1018, 0] = 1024
Data[1018, 1] = 1018
Data[1018, 2] = 1019
Data[1018, 3] = 1
Data[1019, 0] = 1024
Data[1019, 1] = 1019
Data[1019, 2] = 1020
Data[1019, 3] = 1
Data[1020, 0] = 1024
Data[1020, 1] = 1020
Data[1020, 2] = 1021
Data[1020, 3] = 1
Data[1021, 0] = 1024
Data[1021, 1] = 1021
Data[1021, 2] = 1022
Data[1021, 3] = 1
Data[1022, 0] = 1024
Data[1022, 1] = 1022
Data[1022, 2] = 1023
Data[1022, 3] = 1
Data[1023, 0] = 1024
Data[1023, 1] = 1023
Data[1023, 2] = 1024
Data[1023, 3] = 1
END SAMPLE: AlgorithmsGroups
START SAMPLE AlgorithmsReduce
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Render Thread Failed
System.DllNotFoundException: Unable to load DLL 'cublas64_10' or one of its dependencies: The specified module could not be found. (0x8007007E)
   at ILGPU.Runtime.Cuda.API.CuBlas_WindowsAPI_V10.cublasCreate_v2(IntPtr& handle)
   at ILGPU.Runtime.Cuda.API.CuBlas_WindowsAPI_V10.Create(IntPtr& handle)
   at ILGPU.Runtime.Cuda.CuBlas`1..ctor(CudaAccelerator accelerator, CuBlasAPIVersion apiVersion)
   at ILGPU.Runtime.Cuda.CuBlas..ctor(CudaAccelerator accelerator, CuBlasAPIVersion apiVersion)
   at AlgorithmsReduce.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: AlgorithmsReduce
START SAMPLE AdvancedViews
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Render Thread Failed
ILGPU.InternalCompilerException: Access is denied: 'ILGPU.ArrayView`1[AdvancedViews.ComposedStructure]'.. Ensure type is publicly visible, or internally visible and define '[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("ILGPURuntime")]'.
 ---> System.TypeLoadException: Access is denied: 'ILGPU.ArrayView`1[AdvancedViews.ComposedStructure]'.
   at System.Reflection.Emit.TypeBuilder.TermCreateClass(QCallModule module, Int32 tk, ObjectHandleOnStack type)
   at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock()
   at System.Reflection.Emit.TypeBuilder.CreateType()
   at ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ParameterCollection& parameters, ConstructorInfo& taskConstructor, ImmutableArray`1& taskArgumentMapping)
   at ILGPU.Backends.IL.ILBackend.Compile(EntryPoint entryPoint, BackendContext& backendContext, KernelSpecialization& specialization)
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   --- End of inner exception stack trace ---
   at ILGPU.Backends.Backend.Compile[TBackendHook](Method kernelMethod, EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile[TBackendHook](EntryPointDescription& entry, KernelSpecialization& specialization, TBackendHook backendHook)
   at ILGPU.Backends.Backend.Compile(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.CompileKernel(EntryPointDescription& entry, KernelSpecialization& specialization)
   at ILGPU.Runtime.Accelerator.<>c__DisplayClass173_0`1.<LoadGenericKernel>b__0(TKernelLoader& loader, KernelInfo& info)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method, KernelInfo& kernelInfo)
   at ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel[TDelegate](MethodInfo method)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel[TIndex,T1,T2,T3](Accelerator accelerator, Action`4 action)
   at ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel[TIndex,T1,T2,T3](Accelerator accelerator, Action`4 action)
   at AdvancedViews.Program.Main()
   at ILGPUView.Files.FileRunner.renderThreadMain() in C:\Users\zinsl\source\repos\ILGPUView\ILGPUView\Files\FileRunner.cs:line 143
END SAMPLE: AdvancedViews
START SAMPLE AdvancedAtomics
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Launching: AddDoubleAtomicKernel
Data[0] = 2048
Launching: AddDoubleAtomicILGPUFunctionsKernel
Data[0] = 2048
Launching: AddDoubleBuiltInKernel
Data[0] = 2048
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Launching: AddDoubleAtomicKernel
Data[0] = 2048
Launching: AddDoubleAtomicILGPUFunctionsKernel
Data[0] = 2048
Launching: AddDoubleBuiltInKernel
Data[0] = 2048
END SAMPLE: AdvancedAtomics
START SAMPLE SharedMemory
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Shared-memory kernel
Data[0] = 32
Data[1] = 32
Data[2] = 32
Data[3] = 32
Data[4] = 32
Data[5] = 32
Data[6] = 32
Data[7] = 32
Data[8] = 32
Data[9] = 32
Data[10] = 32
Data[11] = 32
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Shared-memory kernel
Data[0] = 32
Data[1] = 32
Data[2] = 32
Data[3] = 32
Data[4] = 32
Data[5] = 32
Data[6] = 32
Data[7] = 32
Data[8] = 32
Data[9] = 32
Data[10] = 32
Data[11] = 32
Data[12] = 32
Data[13] = 32
Data[14] = 32
Data[15] = 32
Data[16] = 32
Data[17] = 32
Data[18] = 32
Data[19] = 32
Data[20] = 32
Data[21] = 32
Data[22] = 32
Data[23] = 32
Data[24] = 32
Data[25] = 32
Data[26] = 32
Data[27] = 32
Data[28] = 32
Data[29] = 32
Data[30] = 32
Data[31] = 32
Data[32] = 32
Data[33] = 32
Data[34] = 32
Data[35] = 32
Data[36] = 32
Data[37] = 32
Data[38] = 32
Data[39] = 32
Data[40] = 32
Data[41] = 32
Data[42] = 32
Data[43] = 32
Data[44] = 32
Data[45] = 32
Data[46] = 32
Data[47] = 32
Data[48] = 32
Data[49] = 32
Data[50] = 32
Data[51] = 32
Data[52] = 32
Data[53] = 32
Data[54] = 32
Data[55] = 32
Data[56] = 32
Data[57] = 32
Data[58] = 32
Data[59] = 32
Data[60] = 32
Data[61] = 32
Data[62] = 32
Data[63] = 32
Data[64] = 32
Data[65] = 32
Data[66] = 32
Data[67] = 32
Data[68] = 32
Data[69] = 32
Data[70] = 32
Data[71] = 32
Data[72] = 32
Data[73] = 32
Data[74] = 32
Data[75] = 32
Data[76] = 32
Data[77] = 32
Data[78] = 32
Data[79] = 32
Data[80] = 32
Data[81] = 32
Data[82] = 32
Data[83] = 32
Data[84] = 32
Data[85] = 32
Data[86] = 32
Data[87] = 32
Data[88] = 32
Data[89] = 32
Data[90] = 32
Data[91] = 32
Data[92] = 32
Data[93] = 32
Data[94] = 32
Data[95] = 32
Data[96] = 32
Data[97] = 32
Data[98] = 32
Data[99] = 32
Data[100] = 32
Data[101] = 32
Data[102] = 32
Data[103] = 32
Data[104] = 32
Data[105] = 32
Data[106] = 32
Data[107] = 32
Data[108] = 32
Data[109] = 32
Data[110] = 32
Data[111] = 32
Data[112] = 32
Data[113] = 32
Data[114] = 32
Data[115] = 32
Data[116] = 32
Data[117] = 32
Data[118] = 32
Data[119] = 32
Data[120] = 32
Data[121] = 32
Data[122] = 32
Data[123] = 32
Data[124] = 32
Data[125] = 32
Data[126] = 32
Data[127] = 32
Data[128] = 32
Data[129] = 32
Data[130] = 32
Data[131] = 32
Data[132] = 32
Data[133] = 32
Data[134] = 32
Data[135] = 32
Data[136] = 32
Data[137] = 32
Data[138] = 32
Data[139] = 32
Data[140] = 32
Data[141] = 32
Data[142] = 32
Data[143] = 32
Data[144] = 32
Data[145] = 32
Data[146] = 32
Data[147] = 32
Data[148] = 32
Data[149] = 32
Data[150] = 32
Data[151] = 32
Data[152] = 32
Data[153] = 32
Data[154] = 32
Data[155] = 32
Data[156] = 32
Data[157] = 32
Data[158] = 32
Data[159] = 32
Data[160] = 32
Data[161] = 32
Data[162] = 32
Data[163] = 32
Data[164] = 32
Data[165] = 32
Data[166] = 32
Data[167] = 32
Data[168] = 32
Data[169] = 32
Data[170] = 32
Data[171] = 32
Data[172] = 32
Data[173] = 32
Data[174] = 32
Data[175] = 32
Data[176] = 32
Data[177] = 32
Data[178] = 32
Data[179] = 32
Data[180] = 32
Data[181] = 32
Data[182] = 32
Data[183] = 32
Data[184] = 32
Data[185] = 32
Data[186] = 32
Data[187] = 32
Data[188] = 32
Data[189] = 32
Data[190] = 32
Data[191] = 32
Data[192] = 32
Data[193] = 32
Data[194] = 32
Data[195] = 32
Data[196] = 32
Data[197] = 32
Data[198] = 32
Data[199] = 32
Data[200] = 32
Data[201] = 32
Data[202] = 32
Data[203] = 32
Data[204] = 32
Data[205] = 32
Data[206] = 32
Data[207] = 32
Data[208] = 32
Data[209] = 32
Data[210] = 32
Data[211] = 32
Data[212] = 32
Data[213] = 32
Data[214] = 32
Data[215] = 32
Data[216] = 32
Data[217] = 32
Data[218] = 32
Data[219] = 32
Data[220] = 32
Data[221] = 32
Data[222] = 32
Data[223] = 32
Data[224] = 32
Data[225] = 32
Data[226] = 32
Data[227] = 32
Data[228] = 32
Data[229] = 32
Data[230] = 32
Data[231] = 32
Data[232] = 32
Data[233] = 32
Data[234] = 32
Data[235] = 32
Data[236] = 32
Data[237] = 32
Data[238] = 32
Data[239] = 32
Data[240] = 32
Data[241] = 32
Data[242] = 32
Data[243] = 32
Data[244] = 32
Data[245] = 32
Data[246] = 32
Data[247] = 32
Data[248] = 32
Data[249] = 32
Data[250] = 32
Data[251] = 32
Data[252] = 32
Data[253] = 32
Data[254] = 32
Data[255] = 32
Data[256] = 32
Data[257] = 32
Data[258] = 32
Data[259] = 32
Data[260] = 32
Data[261] = 32
Data[262] = 32
Data[263] = 32
Data[264] = 32
Data[265] = 32
Data[266] = 32
Data[267] = 32
Data[268] = 32
Data[269] = 32
Data[270] = 32
Data[271] = 32
Data[272] = 32
Data[273] = 32
Data[274] = 32
Data[275] = 32
Data[276] = 32
Data[277] = 32
Data[278] = 32
Data[279] = 32
Data[280] = 32
Data[281] = 32
Data[282] = 32
Data[283] = 32
Data[284] = 32
Data[285] = 32
Data[286] = 32
Data[287] = 32
Data[288] = 32
Data[289] = 32
Data[290] = 32
Data[291] = 32
Data[292] = 32
Data[293] = 32
Data[294] = 32
Data[295] = 32
Data[296] = 32
Data[297] = 32
Data[298] = 32
Data[299] = 32
Data[300] = 32
Data[301] = 32
Data[302] = 32
Data[303] = 32
Data[304] = 32
Data[305] = 32
Data[306] = 32
Data[307] = 32
Data[308] = 32
Data[309] = 32
Data[310] = 32
Data[311] = 32
Data[312] = 32
Data[313] = 32
Data[314] = 32
Data[315] = 32
Data[316] = 32
Data[317] = 32
Data[318] = 32
Data[319] = 32
Data[320] = 32
Data[321] = 32
Data[322] = 32
Data[323] = 32
Data[324] = 32
Data[325] = 32
Data[326] = 32
Data[327] = 32
Data[328] = 32
Data[329] = 32
Data[330] = 32
Data[331] = 32
Data[332] = 32
Data[333] = 32
Data[334] = 32
Data[335] = 32
Data[336] = 32
Data[337] = 32
Data[338] = 32
Data[339] = 32
Data[340] = 32
Data[341] = 32
Data[342] = 32
Data[343] = 32
Data[344] = 32
Data[345] = 32
Data[346] = 32
Data[347] = 32
Data[348] = 32
Data[349] = 32
Data[350] = 32
Data[351] = 32
Data[352] = 32
Data[353] = 32
Data[354] = 32
Data[355] = 32
Data[356] = 32
Data[357] = 32
Data[358] = 32
Data[359] = 32
Data[360] = 32
Data[361] = 32
Data[362] = 32
Data[363] = 32
Data[364] = 32
Data[365] = 32
Data[366] = 32
Data[367] = 32
Data[368] = 32
Data[369] = 32
Data[370] = 32
Data[371] = 32
Data[372] = 32
Data[373] = 32
Data[374] = 32
Data[375] = 32
Data[376] = 32
Data[377] = 32
Data[378] = 32
Data[379] = 32
Data[380] = 32
Data[381] = 32
Data[382] = 32
Data[383] = 32
Data[384] = 32
Data[385] = 32
Data[386] = 32
Data[387] = 32
Data[388] = 32
Data[389] = 32
Data[390] = 32
Data[391] = 32
Data[392] = 32
Data[393] = 32
Data[394] = 32
Data[395] = 32
Data[396] = 32
Data[397] = 32
Data[398] = 32
Data[399] = 32
Data[400] = 32
Data[401] = 32
Data[402] = 32
Data[403] = 32
Data[404] = 32
Data[405] = 32
Data[406] = 32
Data[407] = 32
Data[408] = 32
Data[409] = 32
Data[410] = 32
Data[411] = 32
Data[412] = 32
Data[413] = 32
Data[414] = 32
Data[415] = 32
Data[416] = 32
Data[417] = 32
Data[418] = 32
Data[419] = 32
Data[420] = 32
Data[421] = 32
Data[422] = 32
Data[423] = 32
Data[424] = 32
Data[425] = 32
Data[426] = 32
Data[427] = 32
Data[428] = 32
Data[429] = 32
Data[430] = 32
Data[431] = 32
Data[432] = 32
Data[433] = 32
Data[434] = 32
Data[435] = 32
Data[436] = 32
Data[437] = 32
Data[438] = 32
Data[439] = 32
Data[440] = 32
Data[441] = 32
Data[442] = 32
Data[443] = 32
Data[444] = 32
Data[445] = 32
Data[446] = 32
Data[447] = 32
Data[448] = 32
Data[449] = 32
Data[450] = 32
Data[451] = 32
Data[452] = 32
Data[453] = 32
Data[454] = 32
Data[455] = 32
Data[456] = 32
Data[457] = 32
Data[458] = 32
Data[459] = 32
Data[460] = 32
Data[461] = 32
Data[462] = 32
Data[463] = 32
Data[464] = 32
Data[465] = 32
Data[466] = 32
Data[467] = 32
Data[468] = 32
Data[469] = 32
Data[470] = 32
Data[471] = 32
Data[472] = 32
Data[473] = 32
Data[474] = 32
Data[475] = 32
Data[476] = 32
Data[477] = 32
Data[478] = 32
Data[479] = 32
Data[480] = 32
Data[481] = 32
Data[482] = 32
Data[483] = 32
Data[484] = 32
Data[485] = 32
Data[486] = 32
Data[487] = 32
Data[488] = 32
Data[489] = 32
Data[490] = 32
Data[491] = 32
Data[492] = 32
Data[493] = 32
Data[494] = 32
Data[495] = 32
Data[496] = 32
Data[497] = 32
Data[498] = 32
Data[499] = 32
Data[500] = 32
Data[501] = 32
Data[502] = 32
Data[503] = 32
Data[504] = 32
Data[505] = 32
Data[506] = 32
Data[507] = 32
Data[508] = 32
Data[509] = 32
Data[510] = 32
Data[511] = 32
Data[512] = 32
Data[513] = 32
Data[514] = 32
Data[515] = 32
Data[516] = 32
Data[517] = 32
Data[518] = 32
Data[519] = 32
Data[520] = 32
Data[521] = 32
Data[522] = 32
Data[523] = 32
Data[524] = 32
Data[525] = 32
Data[526] = 32
Data[527] = 32
Data[528] = 32
Data[529] = 32
Data[530] = 32
Data[531] = 32
Data[532] = 32
Data[533] = 32
Data[534] = 32
Data[535] = 32
Data[536] = 32
Data[537] = 32
Data[538] = 32
Data[539] = 32
Data[540] = 32
Data[541] = 32
Data[542] = 32
Data[543] = 32
Data[544] = 32
Data[545] = 32
Data[546] = 32
Data[547] = 32
Data[548] = 32
Data[549] = 32
Data[550] = 32
Data[551] = 32
Data[552] = 32
Data[553] = 32
Data[554] = 32
Data[555] = 32
Data[556] = 32
Data[557] = 32
Data[558] = 32
Data[559] = 32
Data[560] = 32
Data[561] = 32
Data[562] = 32
Data[563] = 32
Data[564] = 32
Data[565] = 32
Data[566] = 32
Data[567] = 32
Data[568] = 32
Data[569] = 32
Data[570] = 32
Data[571] = 32
Data[572] = 32
Data[573] = 32
Data[574] = 32
Data[575] = 32
Data[576] = 32
Data[577] = 32
Data[578] = 32
Data[579] = 32
Data[580] = 32
Data[581] = 32
Data[582] = 32
Data[583] = 32
Data[584] = 32
Data[585] = 32
Data[586] = 32
Data[587] = 32
Data[588] = 32
Data[589] = 32
Data[590] = 32
Data[591] = 32
Data[592] = 32
Data[593] = 32
Data[594] = 32
Data[595] = 32
Data[596] = 32
Data[597] = 32
Data[598] = 32
Data[599] = 32
Data[600] = 32
Data[601] = 32
Data[602] = 32
Data[603] = 32
Data[604] = 32
Data[605] = 32
Data[606] = 32
Data[607] = 32
Data[608] = 32
Data[609] = 32
Data[610] = 32
Data[611] = 32
Data[612] = 32
Data[613] = 32
Data[614] = 32
Data[615] = 32
Data[616] = 32
Data[617] = 32
Data[618] = 32
Data[619] = 32
Data[620] = 32
Data[621] = 32
Data[622] = 32
Data[623] = 32
Data[624] = 32
Data[625] = 32
Data[626] = 32
Data[627] = 32
Data[628] = 32
Data[629] = 32
Data[630] = 32
Data[631] = 32
Data[632] = 32
Data[633] = 32
Data[634] = 32
Data[635] = 32
Data[636] = 32
Data[637] = 32
Data[638] = 32
Data[639] = 32
Data[640] = 32
Data[641] = 32
Data[642] = 32
Data[643] = 32
Data[644] = 32
Data[645] = 32
Data[646] = 32
Data[647] = 32
Data[648] = 32
Data[649] = 32
Data[650] = 32
Data[651] = 32
Data[652] = 32
Data[653] = 32
Data[654] = 32
Data[655] = 32
Data[656] = 32
Data[657] = 32
Data[658] = 32
Data[659] = 32
Data[660] = 32
Data[661] = 32
Data[662] = 32
Data[663] = 32
Data[664] = 32
Data[665] = 32
Data[666] = 32
Data[667] = 32
Data[668] = 32
Data[669] = 32
Data[670] = 32
Data[671] = 32
Data[672] = 32
Data[673] = 32
Data[674] = 32
Data[675] = 32
Data[676] = 32
Data[677] = 32
Data[678] = 32
Data[679] = 32
Data[680] = 32
Data[681] = 32
Data[682] = 32
Data[683] = 32
Data[684] = 32
Data[685] = 32
Data[686] = 32
Data[687] = 32
Data[688] = 32
Data[689] = 32
Data[690] = 32
Data[691] = 32
Data[692] = 32
Data[693] = 32
Data[694] = 32
Data[695] = 32
Data[696] = 32
Data[697] = 32
Data[698] = 32
Data[699] = 32
Data[700] = 32
Data[701] = 32
Data[702] = 32
Data[703] = 32
Data[704] = 32
Data[705] = 32
Data[706] = 32
Data[707] = 32
Data[708] = 32
Data[709] = 32
Data[710] = 32
Data[711] = 32
Data[712] = 32
Data[713] = 32
Data[714] = 32
Data[715] = 32
Data[716] = 32
Data[717] = 32
Data[718] = 32
Data[719] = 32
Data[720] = 32
Data[721] = 32
Data[722] = 32
Data[723] = 32
Data[724] = 32
Data[725] = 32
Data[726] = 32
Data[727] = 32
Data[728] = 32
Data[729] = 32
Data[730] = 32
Data[731] = 32
Data[732] = 32
Data[733] = 32
Data[734] = 32
Data[735] = 32
Data[736] = 32
Data[737] = 32
Data[738] = 32
Data[739] = 32
Data[740] = 32
Data[741] = 32
Data[742] = 32
Data[743] = 32
Data[744] = 32
Data[745] = 32
Data[746] = 32
Data[747] = 32
Data[748] = 32
Data[749] = 32
Data[750] = 32
Data[751] = 32
Data[752] = 32
Data[753] = 32
Data[754] = 32
Data[755] = 32
Data[756] = 32
Data[757] = 32
Data[758] = 32
Data[759] = 32
Data[760] = 32
Data[761] = 32
Data[762] = 32
Data[763] = 32
Data[764] = 32
Data[765] = 32
Data[766] = 32
Data[767] = 32
Data[768] = 32
Data[769] = 32
Data[770] = 32
Data[771] = 32
Data[772] = 32
Data[773] = 32
Data[774] = 32
Data[775] = 32
Data[776] = 32
Data[777] = 32
Data[778] = 32
Data[779] = 32
Data[780] = 32
Data[781] = 32
Data[782] = 32
Data[783] = 32
Data[784] = 32
Data[785] = 32
Data[786] = 32
Data[787] = 32
Data[788] = 32
Data[789] = 32
Data[790] = 32
Data[791] = 32
Data[792] = 32
Data[793] = 32
Data[794] = 32
Data[795] = 32
Data[796] = 32
Data[797] = 32
Data[798] = 32
Data[799] = 32
Data[800] = 32
Data[801] = 32
Data[802] = 32
Data[803] = 32
Data[804] = 32
Data[805] = 32
Data[806] = 32
Data[807] = 32
Data[808] = 32
Data[809] = 32
Data[810] = 32
Data[811] = 32
Data[812] = 32
Data[813] = 32
Data[814] = 32
Data[815] = 32
Data[816] = 32
Data[817] = 32
Data[818] = 32
Data[819] = 32
Data[820] = 32
Data[821] = 32
Data[822] = 32
Data[823] = 32
Data[824] = 32
Data[825] = 32
Data[826] = 32
Data[827] = 32
Data[828] = 32
Data[829] = 32
Data[830] = 32
Data[831] = 32
Data[832] = 32
Data[833] = 32
Data[834] = 32
Data[835] = 32
Data[836] = 32
Data[837] = 32
Data[838] = 32
Data[839] = 32
Data[840] = 32
Data[841] = 32
Data[842] = 32
Data[843] = 32
Data[844] = 32
Data[845] = 32
Data[846] = 32
Data[847] = 32
Data[848] = 32
Data[849] = 32
Data[850] = 32
Data[851] = 32
Data[852] = 32
Data[853] = 32
Data[854] = 32
Data[855] = 32
Data[856] = 32
Data[857] = 32
Data[858] = 32
Data[859] = 32
Data[860] = 32
Data[861] = 32
Data[862] = 32
Data[863] = 32
Data[864] = 32
Data[865] = 32
Data[866] = 32
Data[867] = 32
Data[868] = 32
Data[869] = 32
Data[870] = 32
Data[871] = 32
Data[872] = 32
Data[873] = 32
Data[874] = 32
Data[875] = 32
Data[876] = 32
Data[877] = 32
Data[878] = 32
Data[879] = 32
Data[880] = 32
Data[881] = 32
Data[882] = 32
Data[883] = 32
Data[884] = 32
Data[885] = 32
Data[886] = 32
Data[887] = 32
Data[888] = 32
Data[889] = 32
Data[890] = 32
Data[891] = 32
Data[892] = 32
Data[893] = 32
Data[894] = 32
Data[895] = 32
Data[896] = 32
Data[897] = 32
Data[898] = 32
Data[899] = 32
Data[900] = 32
Data[901] = 32
Data[902] = 32
Data[903] = 32
Data[904] = 32
Data[905] = 32
Data[906] = 32
Data[907] = 32
Data[908] = 32
Data[909] = 32
Data[910] = 32
Data[911] = 32
Data[912] = 32
Data[913] = 32
Data[914] = 32
Data[915] = 32
Data[916] = 32
Data[917] = 32
Data[918] = 32
Data[919] = 32
Data[920] = 32
Data[921] = 32
Data[922] = 32
Data[923] = 32
Data[924] = 32
Data[925] = 32
Data[926] = 32
Data[927] = 32
Data[928] = 32
Data[929] = 32
Data[930] = 32
Data[931] = 32
Data[932] = 32
Data[933] = 32
Data[934] = 32
Data[935] = 32
Data[936] = 32
Data[937] = 32
Data[938] = 32
Data[939] = 32
Data[940] = 32
Data[941] = 32
Data[942] = 32
Data[943] = 32
Data[944] = 32
Data[945] = 32
Data[946] = 32
Data[947] = 32
Data[948] = 32
Data[949] = 32
Data[950] = 32
Data[951] = 32
Data[952] = 32
Data[953] = 32
Data[954] = 32
Data[955] = 32
Data[956] = 32
Data[957] = 32
Data[958] = 32
Data[959] = 32
Data[960] = 32
Data[961] = 32
Data[962] = 32
Data[963] = 32
Data[964] = 32
Data[965] = 32
Data[966] = 32
Data[967] = 32
Data[968] = 32
Data[969] = 32
Data[970] = 32
Data[971] = 32
Data[972] = 32
Data[973] = 32
Data[974] = 32
Data[975] = 32
Data[976] = 32
Data[977] = 32
Data[978] = 32
Data[979] = 32
Data[980] = 32
Data[981] = 32
Data[982] = 32
Data[983] = 32
Data[984] = 32
Data[985] = 32
Data[986] = 32
Data[987] = 32
Data[988] = 32
Data[989] = 32
Data[990] = 32
Data[991] = 32
Data[992] = 32
Data[993] = 32
Data[994] = 32
Data[995] = 32
Data[996] = 32
Data[997] = 32
Data[998] = 32
Data[999] = 32
Data[1000] = 32
Data[1001] = 32
Data[1002] = 32
Data[1003] = 32
Data[1004] = 32
Data[1005] = 32
Data[1006] = 32
Data[1007] = 32
Data[1008] = 32
Data[1009] = 32
Data[1010] = 32
Data[1011] = 32
Data[1012] = 32
Data[1013] = 32
Data[1014] = 32
Data[1015] = 32
Data[1016] = 32
Data[1017] = 32
Data[1018] = 32
Data[1019] = 32
Data[1020] = 32
Data[1021] = 32
Data[1022] = 32
Data[1023] = 32
Performing operations on CPUAccelerator [WarpSize: 1, MaxNumThreadsPerGroup: 12, MemorySize: 9223372036854775807]
Shared-memory kernel
Data[0] = 64
Data[1] = 64
Data[2] = 64
Data[3] = 64
Data[4] = 64
Data[5] = 64
Data[6] = 64
Data[7] = 64
Data[8] = 64
Data[9] = 64
Data[10] = 64
Data[11] = 64
Performing operations on GeForce RTX 2060 [WarpSize: 32, MaxNumThreadsPerGroup: 1024, MemorySize: 6442450944]
Shared-memory kernel
Data[0] = 64
Data[1] = 64
Data[2] = 64
Data[3] = 64
Data[4] = 64
Data[5] = 64
Data[6] = 64
Data[7] = 64
Data[8] = 64
Data[9] = 64
Data[10] = 64
Data[11] = 64
Data[12] = 64
Data[13] = 64
Data[14] = 64
Data[15] = 64
Data[16] = 64
Data[17] = 64
Data[18] = 64
Data[19] = 64
Data[20] = 64
Data[21] = 64
Data[22] = 64
Data[23] = 64
Data[24] = 64
Data[25] = 64
Data[26] = 64
Data[27] = 64
Data[28] = 64
Data[29] = 64
Data[30] = 64
Data[31] = 64
Data[32] = 64
Data[33] = 64
Data[34] = 64
Data[35] = 64
Data[36] = 64
Data[37] = 64
Data[38] = 64
Data[39] = 64
Data[40] = 64
Data[41] = 64
Data[42] = 64
Data[43] = 64
Data[44] = 64
Data[45] = 64
Data[46] = 64
Data[47] = 64
Data[48] = 64
Data[49] = 64
Data[50] = 64
Data[51] = 64
Data[52] = 64
Data[53] = 64
Data[54] = 64
Data[55] = 64
Data[56] = 64
Data[57] = 64
Data[58] = 64
Data[59] = 64
Data[60] = 64
Data[61] = 64
Data[62] = 64
Data[63] = 64
Data[64] = 64
Data[65] = 64
Data[66] = 64
Data[67] = 64
Data[68] = 64
Data[69] = 64
Data[70] = 64
Data[71] = 64
Data[72] = 64
Data[73] = 64
Data[74] = 64
Data[75] = 64
Data[76] = 64
Data[77] = 64
Data[78] = 64
Data[79] = 64
Data[80] = 64
Data[81] = 64
Data[82] = 64
Data[83] = 64
Data[84] = 64
Data[85] = 64
Data[86] = 64
Data[87] = 64
Data[88] = 64
Data[89] = 64
Data[90] = 64
Data[91] = 64
Data[92] = 64
Data[93] = 64
Data[94] = 64
Data[95] = 64
Data[96] = 64
Data[97] = 64
Data[98] = 64
Data[99] = 64
Data[100] = 64
Data[101] = 64
Data[102] = 64
Data[103] = 64
Data[104] = 64
Data[105] = 64
Data[106] = 64
Data[107] = 64
Data[108] = 64
Data[109] = 64
Data[110] = 64
Data[111] = 64
Data[112] = 64
Data[113] = 64
Data[114] = 64
Data[115] = 64
Data[116] = 64
Data[117] = 64
Data[118] = 64
Data[119] = 64
Data[120] = 64
Data[121] = 64
Data[122] = 64
Data[123] = 64
Data[124] = 64
Data[125] = 64
Data[126] = 64
Data[127] = 64
Data[128] = 64
Data[129] = 64
Data[130] = 64
Data[131] = 64
Data[132] = 64
Data[133] = 64
Data[134] = 64
Data[135] = 64
Data[136] = 64
Data[137] = 64
Data[138] = 64
Data[139] = 64
Data[140] = 64
Data[141] = 64
Data[142] = 64
Data[143] = 64
Data[144] = 64
Data[145] = 64
Data[146] = 64
Data[147] = 64
Data[148] = 64
Data[149] = 64
Data[150] = 64
Data[151] = 64
Data[152] = 64
Data[153] = 64
Data[154] = 64
Data[155] = 64
Data[156] = 64
Data[157] = 64
Data[158] = 64
Data[159] = 64
Data[160] = 64
Data[161] = 64
Data[162] = 64
Data[163] = 64
Data[164] = 64
Data[165] = 64
Data[166] = 64
Data[167] = 64
Data[168] = 64
Data[169] = 64
Data[170] = 64
Data[171] = 64
Data[172] = 64
Data[173] = 64
Data[174] = 64
Data[175] = 64
Data[176] = 64
Data[177] = 64
Data[178] = 64
Data[179] = 64
Data[180] = 64
Data[181] = 64
Data[182] = 64
Data[183] = 64
Data[184] = 64
Data[185] = 64
Data[186] = 64
Data[187] = 64
Data[188] = 64
Data[189] = 64
Data[190] = 64
Data[191] = 64
Data[192] = 64
Data[193] = 64
Data[194] = 64
Data[195] = 64
Data[196] = 64
Data[197] = 64
Data[198] = 64
Data[199] = 64
Data[200] = 64
Data[201] = 64
Data[202] = 64
Data[203] = 64
Data[204] = 64
Data[205] = 64
Data[206] = 64
Data[207] = 64
Data[208] = 64
Data[209] = 64
Data[210] = 64
Data[211] = 64
Data[212] = 64
Data[213] = 64
Data[214] = 64
Data[215] = 64
Data[216] = 64
Data[217] = 64
Data[218] = 64
Data[219] = 64
Data[220] = 64
Data[221] = 64
Data[222] = 64
Data[223] = 64
Data[224] = 64
Data[225] = 64
Data[226] = 64
Data[227] = 64
Data[228] = 64
Data[229] = 64
Data[230] = 64
Data[231] = 64
Data[232] = 64
Data[233] = 64
Data[234] = 64
Data[235] = 64
Data[236] = 64
Data[237] = 64
Data[238] = 64
Data[239] = 64
Data[240] = 64
Data[241] = 64
Data[242] = 64
Data[243] = 64
Data[244] = 64
Data[245] = 64
Data[246] = 64
Data[247] = 64
Data[248] = 64
Data[249] = 64
Data[250] = 64
Data[251] = 64
Data[252] = 64
Data[253] = 64
Data[254] = 64
Data[255] = 64
Data[256] = 64
Data[257] = 64
Data[258] = 64
Data[259] = 64
Data[260] = 64
Data[261] = 64
Data[262] = 64
Data[263] = 64
Data[264] = 64
Data[265] = 64
Data[266] = 64
Data[267] = 64
Data[268] = 64
Data[269] = 64
Data[270] = 64
Data[271] = 64
Data[272] = 64
Data[273] = 64
Data[274] = 64
Data[275] = 64
Data[276] = 64
Data[277] = 64
Data[278] = 64
Data[279] = 64
Data[280] = 64
Data[281] = 64
Data[282] = 64
Data[283] = 64
Data[284] = 64
Data[285] = 64
Data[286] = 64
Data[287] = 64
Data[288] = 64
Data[289] = 64
Data[290] = 64
Data[291] = 64
Data[292] = 64
Data[293] = 64
Data[294] = 64
Data[295] = 64
Data[296] = 64
Data[297] = 64
Data[298] = 64
Data[299] = 64
Data[300] = 64
Data[301] = 64
Data[302] = 64
Data[303] = 64
Data[304] = 64
Data[305] = 64
Data[306] = 64
Data[307] = 64
Data[308] = 64
Data[309] = 64
Data[310] = 64
Data[311] = 64
Data[312] = 64
Data[313] = 64
Data[314] = 64
Data[315] = 64
Data[316] = 64
Data[317] = 64
Data[318] = 64
Data[319] = 64
Data[320] = 64
Data[321] = 64
Data[322] = 64
Data[323] = 64
Data[324] = 64
Data[325] = 64
Data[326] = 64
Data[327] = 64
Data[328] = 64
Data[329] = 64
Data[330] = 64
Data[331] = 64
Data[332] = 64
Data[333] = 64
Data[334] = 64
Data[335] = 64
Data[336] = 64
Data[337] = 64
Data[338] = 64
Data[339] = 64
Data[340] = 64
Data[341] = 64
Data[342] = 64
Data[343] = 64
Data[344] = 64
Data[345] = 64
Data[346] = 64
Data[347] = 64
Data[348] = 64
Data[349] = 64
Data[350] = 64
Data[351] = 64
Data[352] = 64
Data[353] = 64
Data[354] = 64
Data[355] = 64
Data[356] = 64
Data[357] = 64
Data[358] = 64
Data[359] = 64
Data[360] = 64
Data[361] = 64
Data[362] = 64
Data[363] = 64
Data[364] = 64
Data[365] = 64
Data[366] = 64
Data[367] = 64
Data[368] = 64
Data[369] = 64
Data[370] = 64
Data[371] = 64
Data[372] = 64
Data[373] = 64
Data[374] = 64
Data[375] = 64
Data[376] = 64
Data[377] = 64
Data[378] = 64
Data[379] = 64
Data[380] = 64
Data[381] = 64
Data[382] = 64
Data[383] = 64
Data[384] = 64
Data[385] = 64
Data[386] = 64
Data[387] = 64
Data[388] = 64
Data[389] = 64
Data[390] = 64
Data[391] = 64
Data[392] = 64
Data[393] = 64
Data[394] = 64
Data[395] = 64
Data[396] = 64
Data[397] = 64
Data[398] = 64
Data[399] = 64
Data[400] = 64
Data[401] = 64
Data[402] = 64
Data[403] = 64
Data[404] = 64
Data[405] = 64
Data[406] = 64
Data[407] = 64
Data[408] = 64
Data[409] = 64
Data[410] = 64
Data[411] = 64
Data[412] = 64
Data[413] = 64
Data[414] = 64
Data[415] = 64
Data[416] = 64
Data[417] = 64
Data[418] = 64
Data[419] = 64
Data[420] = 64
Data[421] = 64
Data[422] = 64
Data[423] = 64
Data[424] = 64
Data[425] = 64
Data[426] = 64
Data[427] = 64
Data[428] = 64
Data[429] = 64
Data[430] = 64
Data[431] = 64
Data[432] = 64
Data[433] = 64
Data[434] = 64
Data[435] = 64
Data[436] = 64
Data[437] = 64
Data[438] = 64
Data[439] = 64
Data[440] = 64
Data[441] = 64
Data[442] = 64
Data[443] = 64
Data[444] = 64
Data[445] = 64
Data[446] = 64
Data[447] = 64
Data[448] = 64
Data[449] = 64
Data[450] = 64
Data[451] = 64
Data[452] = 64
Data[453] = 64
Data[454] = 64
Data[455] = 64
Data[456] = 64
Data[457] = 64
Data[458] = 64
Data[459] = 64
Data[460] = 64
Data[461] = 64
Data[462] = 64
Data[463] = 64
Data[464] = 64
Data[465] = 64
Data[466] = 64
Data[467] = 64
Data[468] = 64
Data[469] = 64
Data[470] = 64
Data[471] = 64
Data[472] = 64
Data[473] = 64
Data[474] = 64
Data[475] = 64
Data[476] = 64
Data[477] = 64
Data[478] = 64
Data[479] = 64
Data[480] = 64
Data[481] = 64
Data[482] = 64
Data[483] = 64
Data[484] = 64
Data[485] = 64
Data[486] = 64
Data[487] = 64
Data[488] = 64
Data[489] = 64
Data[490] = 64
Data[491] = 64
Data[492] = 64
Data[493] = 64
Data[494] = 64
Data[495] = 64
Data[496] = 64
Data[497] = 64
Data[498] = 64
Data[499] = 64
Data[500] = 64
Data[501] = 64
Data[502] = 64
Data[503] = 64
Data[504] = 64
Data[505] = 64
Data[506] = 64
Data[507] = 64
Data[508] = 64
Data[509] = 64
Data[510] = 64
Data[511] = 64
Data[512] = 64
Data[513] = 64
Data[514] = 64
Data[515] = 64
Data[516] = 64
Data[517] = 64
Data[518] = 64
Data[519] = 64
Data[520] = 64
Data[521] = 64
Data[522] = 64
Data[523] = 64
Data[524] = 64
Data[525] = 64
Data[526] = 64
Data[527] = 64
Data[528] = 64
Data[529] = 64
Data[530] = 64
Data[531] = 64
Data[532] = 64
Data[533] = 64
Data[534] = 64
Data[535] = 64
Data[536] = 64
Data[537] = 64
Data[538] = 64
Data[539] = 64
Data[540] = 64
Data[541] = 64
Data[542] = 64
Data[543] = 64
Data[544] = 64
Data[545] = 64
Data[546] = 64
Data[547] = 64
Data[548] = 64
Data[549] = 64
Data[550] = 64
Data[551] = 64
Data[552] = 64
Data[553] = 64
Data[554] = 64
Data[555] = 64
Data[556] = 64
Data[557] = 64
Data[558] = 64
Data[559] = 64
Data[560] = 64
Data[561] = 64
Data[562] = 64
Data[563] = 64
Data[564] = 64
Data[565] = 64
Data[566] = 64
Data[567] = 64
Data[568] = 64
Data[569] = 64
Data[570] = 64
Data[571] = 64
Data[572] = 64
Data[573] = 64
Data[574] = 64
Data[575] = 64
Data[576] = 64
Data[577] = 64
Data[578] = 64
Data[579] = 64
Data[580] = 64
Data[581] = 64
Data[582] = 64
Data[583] = 64
Data[584] = 64
Data[585] = 64
Data[586] = 64
Data[587] = 64
Data[588] = 64
Data[589] = 64
Data[590] = 64
Data[591] = 64
Data[592] = 64
Data[593] = 64
Data[594] = 64
Data[595] = 64
Data[596] = 64
Data[597] = 64
Data[598] = 64
Data[599] = 64
Data[600] = 64
Data[601] = 64
Data[602] = 64
Data[603] = 64
Data[604] = 64
Data[605] = 64
Data[606] = 64
Data[607] = 64
Data[608] = 64
Data[609] = 64
Data[610] = 64
Data[611] = 64
Data[612] = 64
Data[613] = 64
Data[614] = 64
Data[615] = 64
Data[616] = 64
Data[617] = 64
Data[618] = 64
Data[619] = 64
Data[620] = 64
Data[621] = 64
Data[622] = 64
Data[623] = 64
Data[624] = 64
Data[625] = 64
Data[626] = 64
Data[627] = 64
Data[628] = 64
Data[629] = 64
Data[630] = 64
Data[631] = 64
Data[632] = 64
Data[633] = 64
Data[634] = 64
Data[635] = 64
Data[636] = 64
Data[637] = 64
Data[638] = 64
Data[639] = 64
Data[640] = 64
Data[641] = 64
Data[642] = 64
Data[643] = 64
Data[644] = 64
Data[645] = 64
Data[646] = 64
Data[647] = 64
Data[648] = 64
Data[649] = 64
Data[650] = 64
Data[651] = 64
Data[652] = 64
Data[653] = 64
Data[654] = 64
Data[655] = 64
Data[656] = 64
Data[657] = 64
Data[658] = 64
Data[659] = 64
Data[660] = 64
Data[661] = 64
Data[662] = 64
Data[663] = 64
Data[664] = 64
Data[665] = 64
Data[666] = 64
Data[667] = 64
Data[668] = 64
Data[669] = 64
Data[670] = 64
Data[671] = 64
Data[672] = 64
Data[673] = 64
Data[674] = 64
Data[675] = 64
Data[676] = 64
Data[677] = 64
Data[678] = 64
Data[679] = 64
Data[680] = 64
Data[681] = 64
Data[682] = 64
Data[683] = 64
Data[684] = 64
Data[685] = 64
Data[686] = 64
Data[687] = 64
Data[688] = 64
Data[689] = 64
Data[690] = 64
Data[691] = 64
Data[692] = 64
Data[693] = 64
Data[694] = 64
Data[695] = 64
Data[696] = 64
Data[697] = 64
Data[698] = 64
Data[699] = 64
Data[700] = 64
Data[701] = 64
Data[702] = 64
Data[703] = 64
Data[704] = 64
Data[705] = 64
Data[706] = 64
Data[707] = 64
Data[708] = 64
Data[709] = 64
Data[710] = 64
Data[711] = 64
Data[712] = 64
Data[713] = 64
Data[714] = 64
Data[715] = 64
Data[716] = 64
Data[717] = 64
Data[718] = 64
Data[719] = 64
Data[720] = 64
Data[721] = 64
Data[722] = 64
Data[723] = 64
Data[724] = 64
Data[725] = 64
Data[726] = 64
Data[727] = 64
Data[728] = 64
Data[729] = 64
Data[730] = 64
Data[731] = 64
Data[732] = 64
Data[733] = 64
Data[734] = 64
Data[735] = 64
Data[736] = 64
Data[737] = 64
Data[738] = 64
Data[739] = 64
Data[740] = 64
Data[741] = 64
Data[742] = 64
Data[743] = 64
Data[744] = 64
Data[745] = 64
Data[746] = 64
Data[747] = 64
Data[748] = 64
Data[749] = 64
Data[750] = 64
Data[751] = 64
Data[752] = 64
Data[753] = 64
Data[754] = 64
Data[755] = 64
Data[756] = 64
Data[757] = 64
Data[758] = 64
Data[759] = 64
Data[760] = 64
Data[761] = 64
Data[762] = 64
Data[763] = 64
Data[764] = 64
Data[765] = 64
Data[766] = 64
Data[767] = 64
Data[768] = 64
Data[769] = 64
Data[770] = 64
Data[771] = 64
Data[772] = 64
Data[773] = 64
Data[774] = 64
Data[775] = 64
Data[776] = 64
Data[777] = 64
Data[778] = 64
Data[779] = 64
Data[780] = 64
Data[781] = 64
Data[782] = 64
Data[783] = 64
Data[784] = 64
Data[785] = 64
Data[786] = 64
Data[787] = 64
Data[788] = 64
Data[789] = 64
Data[790] = 64
Data[791] = 64
Data[792] = 64
Data[793] = 64
Data[794] = 64
Data[795] = 64
Data[796] = 64
Data[797] = 64
Data[798] = 64
Data[799] = 64
Data[800] = 64
Data[801] = 64
Data[802] = 64
Data[803] = 64
Data[804] = 64
Data[805] = 64
Data[806] = 64
Data[807] = 64
Data[808] = 64
Data[809] = 64
Data[810] = 64
Data[811] = 64
Data[812] = 64
Data[813] = 64
Data[814] = 64
Data[815] = 64
Data[816] = 64
Data[817] = 64
Data[818] = 64
Data[819] = 64
Data[820] = 64
Data[821] = 64
Data[822] = 64
Data[823] = 64
Data[824] = 64
Data[825] = 64
Data[826] = 64
Data[827] = 64
Data[828] = 64
Data[829] = 64
Data[830] = 64
Data[831] = 64
Data[832] = 64
Data[833] = 64
Data[834] = 64
Data[835] = 64
Data[836] = 64
Data[837] = 64
Data[838] = 64
Data[839] = 64
Data[840] = 64
Data[841] = 64
Data[842] = 64
Data[843] = 64
Data[844] = 64
Data[845] = 64
Data[846] = 64
Data[847] = 64
Data[848] = 64
Data[849] = 64
Data[850] = 64
Data[851] = 64
Data[852] = 64
Data[853] = 64
Data[854] = 64
Data[855] = 64
Data[856] = 64
Data[857] = 64
Data[858] = 64
Data[859] = 64
Data[860] = 64
Data[861] = 64
Data[862] = 64
Data[863] = 64
Data[864] = 64
Data[865] = 64
Data[866] = 64
Data[867] = 64
Data[868] = 64
Data[869] = 64
Data[870] = 64
Data[871] = 64
Data[872] = 64
Data[873] = 64
Data[874] = 64
Data[875] = 64
Data[876] = 64
Data[877] = 64
Data[878] = 64
Data[879] = 64
Data[880] = 64
Data[881] = 64
Data[882] = 64
Data[883] = 64
Data[884] = 64
Data[885] = 64
Data[886] = 64
Data[887] = 64
Data[888] = 64
Data[889] = 64
Data[890] = 64
Data[891] = 64
Data[892] = 64
Data[893] = 64
Data[894] = 64
Data[895] = 64
Data[896] = 64
Data[897] = 64
Data[898] = 64
Data[899] = 64
Data[900] = 64
Data[901] = 64
Data[902] = 64
Data[903] = 64
Data[904] = 64
Data[905] = 64
Data[906] = 64
Data[907] = 64
Data[908] = 64
Data[909] = 64
Data[910] = 64
Data[911] = 64
Data[912] = 64
Data[913] = 64
Data[914] = 64
Data[915] = 64
Data[916] = 64
Data[917] = 64
Data[918] = 64
Data[919] = 64
Data[920] = 64
Data[921] = 64
Data[922] = 64
Data[923] = 64
Data[924] = 64
Data[925] = 64
Data[926] = 64
Data[927] = 64
Data[928] = 64
Data[929] = 64
Data[930] = 64
Data[931] = 64
Data[932] = 64
Data[933] = 64
Data[934] = 64
Data[935] = 64
Data[936] = 64
Data[937] = 64
Data[938] = 64
Data[939] = 64
Data[940] = 64
Data[941] = 64
Data[942] = 64
Data[943] = 64
Data[944] = 64
Data[945] = 64
Data[946] = 64
Data[947] = 64
Data[948] = 64
Data[949] = 64
Data[950] = 64
Data[951] = 64
Data[952] = 64
Data[953] = 64
Data[954] = 64
Data[955] = 64
Data[956] = 64
Data[957] = 64
Data[958] = 64
Data[959] = 64
Data[960] = 64
Data[961] = 64
Data[962] = 64
Data[963] = 64
Data[964] = 64
Data[965] = 64
Data[966] = 64
Data[967] = 64
Data[968] = 64
Data[969] = 64
Data[970] = 64
Data[971] = 64
Data[972] = 64
Data[973] = 64
Data[974] = 64
Data[975] = 64
Data[976] = 64
Data[977] = 64
Data[978] = 64
Data[979] = 64
Data[980] = 64
Data[981] = 64
Data[982] = 64
Data[983] = 64
Data[984] = 64
Data[985] = 64
Data[986] = 64
Data[987] = 64
Data[988] = 64
Data[989] = 64
Data[990] = 64
Data[991] = 64
Data[992] = 64
Data[993] = 64
Data[994] = 64
Data[995] = 64
Data[996] = 64
Data[997] = 64
Data[998] = 64
Data[999] = 64
Data[1000] = 64
Data[1001] = 64
Data[1002] = 64
Data[1003] = 64
Data[1004] = 64
Data[1005] = 64
Data[1006] = 64
Data[1007] = 64
Data[1008] = 64
Data[1009] = 64
Data[1010] = 64
Data[1011] = 64
Data[1012] = 64
Data[1013] = 64
Data[1014] = 64
Data[1015] = 64
Data[1016] = 64
Data[1017] = 64
Data[1018] = 64
Data[1019] = 64
Data[1020] = 64
Data[1021] = 64
Data[1022] = 64
Data[1023] = 64
END SAMPLE: SharedMemory
Finished
